
WhistBand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c2c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003dc4  08003dc4  00013dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .user_data    00000040  08040000  08040000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .init_array   00000004  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  08003e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000134b4  20000080  08003ed4  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20013534  08003ed4  00023534  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018e88  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000030d5  00000000  00000000  00048ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d40  00000000  00000000  0004bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bf8  00000000  00000000  0004cd10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006b90  00000000  00000000  0004d908  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003feb  00000000  00000000  00054498  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00058483  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003498  00000000  00000000  00058500  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0005b998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003dac 	.word	0x08003dac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08003dac 	.word	0x08003dac

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <BSP_LED_Init>:
  * @param  Led: Specifies the Led to be configured. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b088      	sub	sp, #32
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80001f2:	2300      	movs	r3, #0
 80001f4:	60bb      	str	r3, [r7, #8]
 80001f6:	4a15      	ldr	r2, [pc, #84]	; (800024c <BSP_LED_Init+0x64>)
 80001f8:	4b14      	ldr	r3, [pc, #80]	; (800024c <BSP_LED_Init+0x64>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	6313      	str	r3, [r2, #48]	; 0x30
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <BSP_LED_Init+0x64>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	f003 0301 	and.w	r3, r3, #1
 800020a:	60bb      	str	r3, [r7, #8]
 800020c:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800020e:	2320      	movs	r3, #32
 8000210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000212:	2301      	movs	r3, #1
 8000214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <BSP_LED_Init+0x68>)
 8000222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000226:	f107 020c 	add.w	r2, r7, #12
 800022a:	4611      	mov	r1, r2
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fdcb 	bl	8000dc8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <BSP_LED_Init+0x68>)
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	2120      	movs	r1, #32
 800023c:	2200      	movs	r2, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f000 ff5c 	bl	80010fc <HAL_GPIO_WritePin>
}
 8000244:	bf00      	nop
 8000246:	3720      	adds	r7, #32
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40023800 	.word	0x40023800
 8000250:	20000000 	.word	0x20000000

08000254 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	4a05      	ldr	r2, [pc, #20]	; (8000278 <BSP_LED_On+0x24>)
 8000262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000266:	2120      	movs	r1, #32
 8000268:	2201      	movs	r2, #1
 800026a:	4618      	mov	r0, r3
 800026c:	f000 ff46 	bl	80010fc <HAL_GPIO_WritePin>
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000000 	.word	0x20000000

0800027c <BSP_LED_Toggle>:
  * @param  Led: Specifies the Led to be toggled. 
  *   This parameter can be one of following parameters:
  *     @arg LED2  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <BSP_LED_Toggle+0x24>)
 800028a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028e:	2220      	movs	r2, #32
 8000290:	4611      	mov	r1, r2
 8000292:	4618      	mov	r0, r3
 8000294:	f000 ff4b 	bl	800112e <HAL_GPIO_TogglePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000000 	.word	0x20000000

080002a4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	460a      	mov	r2, r1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	4613      	mov	r3, r2
 80002b2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80002b4:	2300      	movs	r3, #0
 80002b6:	60bb      	str	r3, [r7, #8]
 80002b8:	4a22      	ldr	r2, [pc, #136]	; (8000344 <BSP_PB_Init+0xa0>)
 80002ba:	4b22      	ldr	r3, [pc, #136]	; (8000344 <BSP_PB_Init+0xa0>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
 80002c4:	4b1f      	ldr	r3, [pc, #124]	; (8000344 <BSP_PB_Init+0xa0>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d112      	bne.n	80002fc <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80002d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002dc:	2300      	movs	r3, #0
 80002de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002e0:	2302      	movs	r3, #2
 80002e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80002e4:	2302      	movs	r3, #2
 80002e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4a17      	ldr	r2, [pc, #92]	; (8000348 <BSP_PB_Init+0xa4>)
 80002ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f0:	f107 020c 	add.w	r2, r7, #12
 80002f4:	4611      	mov	r1, r2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fd66 	bl	8000dc8 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80002fc:	79bb      	ldrb	r3, [r7, #6]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d11c      	bne.n	800033c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	2300      	movs	r3, #0
 800030a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <BSP_PB_Init+0xa8>)
 800030e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	4a0d      	ldr	r2, [pc, #52]	; (8000348 <BSP_PB_Init+0xa4>)
 8000314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000318:	f107 020c 	add.w	r2, r7, #12
 800031c:	4611      	mov	r1, r2
 800031e:	4618      	mov	r0, r3
 8000320:	f000 fd52 	bl	8000dc8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000324:	2328      	movs	r3, #40	; 0x28
 8000326:	b25b      	sxtb	r3, r3
 8000328:	2200      	movs	r2, #0
 800032a:	210f      	movs	r1, #15
 800032c:	4618      	mov	r0, r3
 800032e:	f000 f970 	bl	8000612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000332:	2328      	movs	r3, #40	; 0x28
 8000334:	b25b      	sxtb	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f987 	bl	800064a <HAL_NVIC_EnableIRQ>
  }
}
 800033c:	bf00      	nop
 800033e:	3720      	adds	r7, #32
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40023800 	.word	0x40023800
 8000348:	20000004 	.word	0x20000004
 800034c:	10210000 	.word	0x10210000

08000350 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	4a06      	ldr	r2, [pc, #24]	; (8000378 <BSP_PB_GetState+0x28>)
 800035e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000366:	4611      	mov	r1, r2
 8000368:	4618      	mov	r0, r3
 800036a:	f000 feaf 	bl	80010cc <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
}
 8000370:	4618      	mov	r0, r3
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000004 	.word	0x20000004

0800037c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000380:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <HAL_Init+0x40>)
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <HAL_Init+0x40>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800038a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800038c:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <HAL_Init+0x40>)
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <HAL_Init+0x40>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000398:	4a08      	ldr	r2, [pc, #32]	; (80003bc <HAL_Init+0x40>)
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <HAL_Init+0x40>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003a4:	2003      	movs	r0, #3
 80003a6:	f000 f929 	bl	80005fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003aa:	2000      	movs	r0, #0
 80003ac:	f000 f808 	bl	80003c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80003b0:	f003 faf5 	bl	800399e <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40023c00 	.word	0x40023c00

080003c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80003c8:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <HAL_InitTick+0x30>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a09      	ldr	r2, [pc, #36]	; (80003f4 <HAL_InitTick+0x34>)
 80003ce:	fba2 2303 	umull	r2, r3, r2, r3
 80003d2:	099b      	lsrs	r3, r3, #6
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f946 	bl	8000666 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80003da:	2200      	movs	r2, #0
 80003dc:	6879      	ldr	r1, [r7, #4]
 80003de:	f04f 30ff 	mov.w	r0, #4294967295
 80003e2:	f000 f916 	bl	8000612 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	2000007c 	.word	0x2000007c
 80003f4:	10624dd3 	.word	0x10624dd3

080003f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  uwTick++;
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <HAL_IncTick+0x18>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	4a03      	ldr	r2, [pc, #12]	; (8000410 <HAL_IncTick+0x18>)
 8000404:	6013      	str	r3, [r2, #0]
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	200000a8 	.word	0x200000a8

08000414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  return uwTick;
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <HAL_GetTick+0x14>)
 800041a:	681b      	ldr	r3, [r3, #0]
}
 800041c:	4618      	mov	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	200000a8 	.word	0x200000a8

0800042c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000434:	f7ff ffee 	bl	8000414 <HAL_GetTick>
 8000438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000444:	d002      	beq.n	800044c <HAL_Delay+0x20>
  {
     wait++;
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	3301      	adds	r3, #1
 800044a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800044c:	bf00      	nop
 800044e:	f7ff ffe1 	bl	8000414 <HAL_GetTick>
 8000452:	4602      	mov	r2, r0
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	1ad2      	subs	r2, r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	429a      	cmp	r2, r3
 800045c:	d3f7      	bcc.n	800044e <HAL_Delay+0x22>
  {
  }
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	f003 0307 	and.w	r3, r3, #7
 8000476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <NVIC_SetPriorityGrouping+0x44>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800047e:	68ba      	ldr	r2, [r7, #8]
 8000480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000484:	4013      	ands	r3, r2
 8000486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800049a:	4a04      	ldr	r2, [pc, #16]	; (80004ac <NVIC_SetPriorityGrouping+0x44>)
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	60d3      	str	r3, [r2, #12]
}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <NVIC_GetPriorityGrouping+0x18>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	0a1b      	lsrs	r3, r3, #8
 80004ba:	f003 0307 	and.w	r3, r3, #7
}
 80004be:	4618      	mov	r0, r3
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	e000ed00 	.word	0xe000ed00

080004cc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004d6:	4909      	ldr	r1, [pc, #36]	; (80004fc <NVIC_EnableIRQ+0x30>)
 80004d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004dc:	095b      	lsrs	r3, r3, #5
 80004de:	79fa      	ldrb	r2, [r7, #7]
 80004e0:	f002 021f 	and.w	r2, r2, #31
 80004e4:	2001      	movs	r0, #1
 80004e6:	fa00 f202 	lsl.w	r2, r0, r2
 80004ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	e000e100 	.word	0xe000e100

08000500 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800050c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000510:	2b00      	cmp	r3, #0
 8000512:	da0b      	bge.n	800052c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000514:	490d      	ldr	r1, [pc, #52]	; (800054c <NVIC_SetPriority+0x4c>)
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	f003 030f 	and.w	r3, r3, #15
 800051c:	3b04      	subs	r3, #4
 800051e:	683a      	ldr	r2, [r7, #0]
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	0112      	lsls	r2, r2, #4
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	440b      	add	r3, r1
 8000528:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800052a:	e009      	b.n	8000540 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052c:	4908      	ldr	r1, [pc, #32]	; (8000550 <NVIC_SetPriority+0x50>)
 800052e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000532:	683a      	ldr	r2, [r7, #0]
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	0112      	lsls	r2, r2, #4
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	440b      	add	r3, r1
 800053c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e000ed00 	.word	0xe000ed00
 8000550:	e000e100 	.word	0xe000e100

08000554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000554:	b480      	push	{r7}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	f1c3 0307 	rsb	r3, r3, #7
 800056e:	2b04      	cmp	r3, #4
 8000570:	bf28      	it	cs
 8000572:	2304      	movcs	r3, #4
 8000574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	3304      	adds	r3, #4
 800057a:	2b06      	cmp	r3, #6
 800057c:	d902      	bls.n	8000584 <NVIC_EncodePriority+0x30>
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	3b03      	subs	r3, #3
 8000582:	e000      	b.n	8000586 <NVIC_EncodePriority+0x32>
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000588:	2201      	movs	r2, #1
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	401a      	ands	r2, r3
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800059a:	2101      	movs	r1, #1
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	fa01 f303 	lsl.w	r3, r1, r3
 80005a2:	1e59      	subs	r1, r3, #1
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a8:	4313      	orrs	r3, r2
         );
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3724      	adds	r7, #36	; 0x24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005c8:	d301      	bcc.n	80005ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ca:	2301      	movs	r3, #1
 80005cc:	e00f      	b.n	80005ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <SysTick_Config+0x40>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005d6:	210f      	movs	r1, #15
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f7ff ff90 	bl	8000500 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <SysTick_Config+0x40>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <SysTick_Config+0x40>)
 80005e8:	2207      	movs	r2, #7
 80005ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	e000e010 	.word	0xe000e010

080005fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ff2f 	bl	8000468 <NVIC_SetPriorityGrouping>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000612:	b580      	push	{r7, lr}
 8000614:	b086      	sub	sp, #24
 8000616:	af00      	add	r7, sp, #0
 8000618:	4603      	mov	r3, r0
 800061a:	60b9      	str	r1, [r7, #8]
 800061c:	607a      	str	r2, [r7, #4]
 800061e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000624:	f7ff ff44 	bl	80004b0 <NVIC_GetPriorityGrouping>
 8000628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	68b9      	ldr	r1, [r7, #8]
 800062e:	6978      	ldr	r0, [r7, #20]
 8000630:	f7ff ff90 	bl	8000554 <NVIC_EncodePriority>
 8000634:	4602      	mov	r2, r0
 8000636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff5f 	bl	8000500 <NVIC_SetPriority>
}
 8000642:	bf00      	nop
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff37 	bl	80004cc <NVIC_EnableIRQ>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ffa2 	bl	80005b8 <SysTick_Config>
 8000674:	4603      	mov	r3, r0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000682:	f002 ff95 	bl	80035b0 <HAL_SYSTICK_Callback>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000698:	f7ff febc 	bl	8000414 <HAL_GetTick>
 800069c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	e099      	b.n	80007dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2202      	movs	r2, #2
 80006b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	6812      	ldr	r2, [r2, #0]
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	f022 0201 	bic.w	r2, r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006c8:	e00f      	b.n	80006ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80006ca:	f7ff fea3 	bl	8000414 <HAL_GetTick>
 80006ce:	4602      	mov	r2, r0
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	2b05      	cmp	r3, #5
 80006d6:	d908      	bls.n	80006ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2220      	movs	r2, #32
 80006dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2203      	movs	r2, #3
 80006e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80006e6:	2303      	movs	r3, #3
 80006e8:	e078      	b.n	80007dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1e8      	bne.n	80006ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	4b38      	ldr	r3, [pc, #224]	; (80007e4 <HAL_DMA_Init+0x158>)
 8000704:	4013      	ands	r3, r2
 8000706:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	685a      	ldr	r2, [r3, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000716:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800072e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	4313      	orrs	r3, r2
 800073a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000740:	2b04      	cmp	r3, #4
 8000742:	d107      	bne.n	8000754 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	4313      	orrs	r3, r2
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	4313      	orrs	r3, r2
 8000752:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	f023 0307 	bic.w	r3, r3, #7
 800076a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	4313      	orrs	r3, r2
 8000774:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	2b04      	cmp	r3, #4
 800077c:	d117      	bne.n	80007ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000782:	697a      	ldr	r2, [r7, #20]
 8000784:	4313      	orrs	r3, r2
 8000786:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00e      	beq.n	80007ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 fa9f 	bl	8000cd4 <DMA_CheckFifoParam>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d008      	beq.n	80007ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2240      	movs	r2, #64	; 0x40
 80007a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80007aa:	2301      	movs	r3, #1
 80007ac:	e016      	b.n	80007dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 fa56 	bl	8000c68 <DMA_CalcBaseAndBitshift>
 80007bc:	4603      	mov	r3, r0
 80007be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007c4:	223f      	movs	r2, #63	; 0x3f
 80007c6:	409a      	lsls	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2201      	movs	r2, #1
 80007d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	f010803f 	.word	0xf010803f

080007e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
 80007f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000806:	2b01      	cmp	r3, #1
 8000808:	d101      	bne.n	800080e <HAL_DMA_Start_IT+0x26>
 800080a:	2302      	movs	r3, #2
 800080c:	e048      	b.n	80008a0 <HAL_DMA_Start_IT+0xb8>
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2201      	movs	r2, #1
 8000812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b01      	cmp	r3, #1
 8000820:	d137      	bne.n	8000892 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2202      	movs	r2, #2
 8000826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2200      	movs	r2, #0
 800082e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68b9      	ldr	r1, [r7, #8]
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f000 f9e8 	bl	8000c0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000840:	223f      	movs	r2, #63	; 0x3f
 8000842:	409a      	lsls	r2, r3
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	6812      	ldr	r2, [r2, #0]
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	f042 0216 	orr.w	r2, r2, #22
 8000856:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	6812      	ldr	r2, [r2, #0]
 8000860:	6952      	ldr	r2, [r2, #20]
 8000862:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000866:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	2b00      	cmp	r3, #0
 800086e:	d007      	beq.n	8000880 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	6812      	ldr	r2, [r2, #0]
 800087a:	f042 0208 	orr.w	r2, r2, #8
 800087e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	6812      	ldr	r2, [r2, #0]
 8000888:	6812      	ldr	r2, [r2, #0]
 800088a:	f042 0201 	orr.w	r2, r2, #1
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	e005      	b.n	800089e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800089a:	2302      	movs	r3, #2
 800089c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800089e:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d004      	beq.n	80008c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00c      	b.n	80008e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2205      	movs	r2, #5
 80008ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	6812      	ldr	r2, [r2, #0]
 80008d6:	6812      	ldr	r2, [r2, #0]
 80008d8:	f022 0201 	bic.w	r2, r2, #1
 80008dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80008f8:	4b93      	ldr	r3, [pc, #588]	; (8000b48 <HAL_DMA_IRQHandler+0x25c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a93      	ldr	r2, [pc, #588]	; (8000b4c <HAL_DMA_IRQHandler+0x260>)
 80008fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000902:	0a9b      	lsrs	r3, r3, #10
 8000904:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000916:	2208      	movs	r2, #8
 8000918:	409a      	lsls	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4013      	ands	r3, r2
 800091e:	2b00      	cmp	r3, #0
 8000920:	d01a      	beq.n	8000958 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	2b00      	cmp	r3, #0
 800092e:	d013      	beq.n	8000958 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	6812      	ldr	r2, [r2, #0]
 800093a:	f022 0204 	bic.w	r2, r2, #4
 800093e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000944:	2208      	movs	r2, #8
 8000946:	409a      	lsls	r2, r3
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000950:	f043 0201 	orr.w	r2, r3, #1
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800095c:	4a7c      	ldr	r2, [pc, #496]	; (8000b50 <HAL_DMA_IRQHandler+0x264>)
 800095e:	409a      	lsls	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4013      	ands	r3, r2
 8000964:	2b00      	cmp	r3, #0
 8000966:	d012      	beq.n	800098e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00b      	beq.n	800098e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800097a:	4a75      	ldr	r2, [pc, #468]	; (8000b50 <HAL_DMA_IRQHandler+0x264>)
 800097c:	409a      	lsls	r2, r3
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000986:	f043 0202 	orr.w	r2, r3, #2
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000992:	4a70      	ldr	r2, [pc, #448]	; (8000b54 <HAL_DMA_IRQHandler+0x268>)
 8000994:	409a      	lsls	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4013      	ands	r3, r2
 800099a:	2b00      	cmp	r3, #0
 800099c:	d012      	beq.n	80009c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d00b      	beq.n	80009c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009b0:	4a68      	ldr	r2, [pc, #416]	; (8000b54 <HAL_DMA_IRQHandler+0x268>)
 80009b2:	409a      	lsls	r2, r3
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009bc:	f043 0204 	orr.w	r2, r3, #4
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c8:	2210      	movs	r2, #16
 80009ca:	409a      	lsls	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4013      	ands	r3, r2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d043      	beq.n	8000a5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d03c      	beq.n	8000a5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009e6:	2210      	movs	r2, #16
 80009e8:	409a      	lsls	r2, r3
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d018      	beq.n	8000a2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d108      	bne.n	8000a1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d024      	beq.n	8000a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	4798      	blx	r3
 8000a1a:	e01f      	b.n	8000a5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d01b      	beq.n	8000a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	4798      	blx	r3
 8000a2c:	e016      	b.n	8000a5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	6812      	ldr	r2, [r2, #0]
 8000a44:	6812      	ldr	r2, [r2, #0]
 8000a46:	f022 0208 	bic.w	r2, r2, #8
 8000a4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a60:	2220      	movs	r2, #32
 8000a62:	409a      	lsls	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4013      	ands	r3, r2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f000 8094 	beq.w	8000b96 <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	f000 808c 	beq.w	8000b96 <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a82:	2220      	movs	r2, #32
 8000a84:	409a      	lsls	r2, r3
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b05      	cmp	r3, #5
 8000a94:	d137      	bne.n	8000b06 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	6812      	ldr	r2, [r2, #0]
 8000a9e:	6812      	ldr	r2, [r2, #0]
 8000aa0:	f022 0216 	bic.w	r2, r2, #22
 8000aa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	6952      	ldr	r2, [r2, #20]
 8000ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ab4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d103      	bne.n	8000ac6 <HAL_DMA_IRQHandler+0x1da>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d007      	beq.n	8000ad6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	6812      	ldr	r2, [r2, #0]
 8000ace:	6812      	ldr	r2, [r2, #0]
 8000ad0:	f022 0208 	bic.w	r2, r2, #8
 8000ad4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ada:	223f      	movs	r2, #63	; 0x3f
 8000adc:	409a      	lsls	r2, r3
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2201      	movs	r2, #1
 8000aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 8083 	beq.w	8000c02 <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	4798      	blx	r3
        }
        return;
 8000b04:	e07d      	b.n	8000c02 <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d021      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d108      	bne.n	8000b34 <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d035      	beq.n	8000b96 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	4798      	blx	r3
 8000b32:	e030      	b.n	8000b96 <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d02c      	beq.n	8000b96 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	4798      	blx	r3
 8000b44:	e027      	b.n	8000b96 <HAL_DMA_IRQHandler+0x2aa>
 8000b46:	bf00      	nop
 8000b48:	2000007c 	.word	0x2000007c
 8000b4c:	1b4e81b5 	.word	0x1b4e81b5
 8000b50:	00800001 	.word	0x00800001
 8000b54:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10f      	bne.n	8000b86 <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	6812      	ldr	r2, [r2, #0]
 8000b70:	f022 0210 	bic.w	r2, r2, #16
 8000b74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2201      	movs	r2, #1
 8000b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d032      	beq.n	8000c04 <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d022      	beq.n	8000bf0 <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2205      	movs	r2, #5
 8000bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	f022 0201 	bic.w	r2, r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d807      	bhi.n	8000bde <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f2      	bne.n	8000bc2 <HAL_DMA_IRQHandler+0x2d6>
 8000bdc:	e000      	b.n	8000be0 <HAL_DMA_IRQHandler+0x2f4>
          break;
 8000bde:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2201      	movs	r2, #1
 8000bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d005      	beq.n	8000c04 <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	4798      	blx	r3
 8000c00:	e000      	b.n	8000c04 <HAL_DMA_IRQHandler+0x318>
        return;
 8000c02:	bf00      	nop
    }
  }
}
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop

08000c0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b40      	cmp	r3, #64	; 0x40
 8000c38:	d108      	bne.n	8000c4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000c4a:	e007      	b.n	8000c5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	60da      	str	r2, [r3, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	3b10      	subs	r3, #16
 8000c78:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <DMA_CalcBaseAndBitshift+0x64>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <DMA_CalcBaseAndBitshift+0x68>)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d909      	bls.n	8000caa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000c9e:	f023 0303 	bic.w	r3, r3, #3
 8000ca2:	1d1a      	adds	r2, r3, #4
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	659a      	str	r2, [r3, #88]	; 0x58
 8000ca8:	e007      	b.n	8000cba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000cb2:	f023 0303 	bic.w	r3, r3, #3
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	aaaaaaab 	.word	0xaaaaaaab
 8000cd0:	08003e2c 	.word	0x08003e2c

08000cd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d11f      	bne.n	8000d2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d855      	bhi.n	8000da0 <DMA_CheckFifoParam+0xcc>
 8000cf4:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <DMA_CheckFifoParam+0x28>)
 8000cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfa:	bf00      	nop
 8000cfc:	08000d0d 	.word	0x08000d0d
 8000d00:	08000d1f 	.word	0x08000d1f
 8000d04:	08000d0d 	.word	0x08000d0d
 8000d08:	08000da1 	.word	0x08000da1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d045      	beq.n	8000da4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d1c:	e042      	b.n	8000da4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d26:	d13f      	bne.n	8000da8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d2c:	e03c      	b.n	8000da8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d36:	d121      	bne.n	8000d7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d836      	bhi.n	8000dac <DMA_CheckFifoParam+0xd8>
 8000d3e:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <DMA_CheckFifoParam+0x70>)
 8000d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d44:	08000d55 	.word	0x08000d55
 8000d48:	08000d5b 	.word	0x08000d5b
 8000d4c:	08000d55 	.word	0x08000d55
 8000d50:	08000d6d 	.word	0x08000d6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
      break;
 8000d58:	e02f      	b.n	8000dba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d024      	beq.n	8000db0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d6a:	e021      	b.n	8000db0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d74:	d11e      	bne.n	8000db4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000d7a:	e01b      	b.n	8000db4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d902      	bls.n	8000d88 <DMA_CheckFifoParam+0xb4>
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d003      	beq.n	8000d8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000d86:	e018      	b.n	8000dba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8000d8c:	e015      	b.n	8000dba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00e      	beq.n	8000db8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8000d9e:	e00b      	b.n	8000db8 <DMA_CheckFifoParam+0xe4>
      break;
 8000da0:	bf00      	nop
 8000da2:	e00a      	b.n	8000dba <DMA_CheckFifoParam+0xe6>
      break;
 8000da4:	bf00      	nop
 8000da6:	e008      	b.n	8000dba <DMA_CheckFifoParam+0xe6>
      break;
 8000da8:	bf00      	nop
 8000daa:	e006      	b.n	8000dba <DMA_CheckFifoParam+0xe6>
      break;
 8000dac:	bf00      	nop
 8000dae:	e004      	b.n	8000dba <DMA_CheckFifoParam+0xe6>
      break;
 8000db0:	bf00      	nop
 8000db2:	e002      	b.n	8000dba <DMA_CheckFifoParam+0xe6>
      break;   
 8000db4:	bf00      	nop
 8000db6:	e000      	b.n	8000dba <DMA_CheckFifoParam+0xe6>
      break;
 8000db8:	bf00      	nop
    }
  } 
  
  return status; 
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	e159      	b.n	8001098 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de4:	2201      	movs	r2, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	f040 8148 	bne.w	8001092 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x4a>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b12      	cmp	r3, #18
 8000e10:	d123      	bne.n	8000e5a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	08da      	lsrs	r2, r3, #3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3208      	adds	r2, #8
 8000e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	691a      	ldr	r2, [r3, #16]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3208      	adds	r2, #8
 8000e54:	69b9      	ldr	r1, [r7, #24]
 8000e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2203      	movs	r2, #3
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0203 	and.w	r2, r3, #3
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d00b      	beq.n	8000eae <HAL_GPIO_Init+0xe6>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea2:	2b11      	cmp	r3, #17
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b12      	cmp	r3, #18
 8000eac:	d130      	bne.n	8000f10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	f003 0201 	and.w	r2, r3, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 80a2 	beq.w	8001092 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4a56      	ldr	r2, [pc, #344]	; (80010ac <HAL_GPIO_Init+0x2e4>)
 8000f54:	4b55      	ldr	r3, [pc, #340]	; (80010ac <HAL_GPIO_Init+0x2e4>)
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b53      	ldr	r3, [pc, #332]	; (80010ac <HAL_GPIO_Init+0x2e4>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f6a:	4a51      	ldr	r2, [pc, #324]	; (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a48      	ldr	r2, [pc, #288]	; (80010b4 <HAL_GPIO_Init+0x2ec>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0x202>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a47      	ldr	r2, [pc, #284]	; (80010b8 <HAL_GPIO_Init+0x2f0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x1fe>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a46      	ldr	r2, [pc, #280]	; (80010bc <HAL_GPIO_Init+0x2f4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x1fa>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a45      	ldr	r2, [pc, #276]	; (80010c0 <HAL_GPIO_Init+0x2f8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x1f6>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a44      	ldr	r2, [pc, #272]	; (80010c4 <HAL_GPIO_Init+0x2fc>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x1f2>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e008      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fba:	2307      	movs	r3, #7
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e004      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e002      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	f002 0203 	and.w	r2, r2, #3
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fdc:	4934      	ldr	r1, [pc, #208]	; (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800100e:	4a2e      	ldr	r2, [pc, #184]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001014:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001038:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <HAL_GPIO_Init+0x300>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001062:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_GPIO_Init+0x300>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_GPIO_Init+0x300>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3301      	adds	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	f67f aea2 	bls.w	8000de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a0:	bf00      	nop
 80010a2:	3724      	adds	r7, #36	; 0x24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40013c00 	.word	0x40013c00

080010cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e001      	b.n	80010ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	405a      	eors	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	615a      	str	r2, [r3, #20]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001160:	695a      	ldr	r2, [r3, #20]
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	4013      	ands	r3, r2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fa34 	bl	80035e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40013c00 	.word	0x40013c00

08001184 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8001190:	4910      	ldr	r1, [pc, #64]	; (80011d4 <HAL_PWR_EnterSTOPMode+0x50>)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_PWR_EnterSTOPMode+0x50>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f023 0203 	bic.w	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <HAL_PWR_EnterSTOPMode+0x54>)
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_PWR_EnterSTOPMode+0x54>)
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d101      	bne.n	80011b6 <HAL_PWR_EnterSTOPMode+0x32>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80011b2:	bf30      	wfi
 80011b4:	e002      	b.n	80011bc <HAL_PWR_EnterSTOPMode+0x38>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 80011b6:	bf40      	sev
  __ASM volatile ("wfe");
 80011b8:	bf20      	wfe
 80011ba:	bf20      	wfe
    __SEV();
    __WFE();
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80011bc:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_PWR_EnterSTOPMode+0x54>)
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_PWR_EnterSTOPMode+0x54>)
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	f023 0304 	bic.w	r3, r3, #4
 80011c6:	6113      	str	r3, [r2, #16]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40007000 	.word	0x40007000
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e6:	607b      	str	r3, [r7, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011f0:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 80011f2:	fab3 f383 	clz	r3, r3
 80011f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011fa:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	461a      	mov	r2, r3
 8001202:	2301      	movs	r3, #1
 8001204:	6013      	str	r3, [r2, #0]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	; 0x38
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d075      	beq.n	8001318 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122c:	4ba4      	ldr	r3, [pc, #656]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b04      	cmp	r3, #4
 8001236:	d00c      	beq.n	8001252 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001238:	4ba1      	ldr	r3, [pc, #644]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001240:	2b08      	cmp	r3, #8
 8001242:	d112      	bne.n	800126a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001244:	4b9e      	ldr	r3, [pc, #632]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001250:	d10b      	bne.n	800126a <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001252:	4b9b      	ldr	r3, [pc, #620]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d05b      	beq.n	8001316 <HAL_RCC_OscConfig+0x102>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d157      	bne.n	8001316 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e224      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x6e>
 8001274:	4a92      	ldr	r2, [pc, #584]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001276:	4b92      	ldr	r3, [pc, #584]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e01d      	b.n	80012be <HAL_RCC_OscConfig+0xaa>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128a:	d10c      	bne.n	80012a6 <HAL_RCC_OscConfig+0x92>
 800128c:	4a8c      	ldr	r2, [pc, #560]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	4b8c      	ldr	r3, [pc, #560]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4a89      	ldr	r2, [pc, #548]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800129a:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e00b      	b.n	80012be <HAL_RCC_OscConfig+0xaa>
 80012a6:	4a86      	ldr	r2, [pc, #536]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4a83      	ldr	r2, [pc, #524]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	4b82      	ldr	r3, [pc, #520]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d013      	beq.n	80012ee <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c6:	f7ff f8a5 	bl	8000414 <HAL_GetTick>
 80012ca:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ce:	f7ff f8a1 	bl	8000414 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b64      	cmp	r3, #100	; 0x64
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1e9      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e0:	4b77      	ldr	r3, [pc, #476]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0xba>
 80012ec:	e014      	b.n	8001318 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ee:	f7ff f891 	bl	8000414 <HAL_GetTick>
 80012f2:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f6:	f7ff f88d 	bl	8000414 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b64      	cmp	r3, #100	; 0x64
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e1d5      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001308:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0xe2>
 8001314:	e000      	b.n	8001318 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d077      	beq.n	8001414 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001324:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001330:	4b63      	ldr	r3, [pc, #396]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001338:	2b08      	cmp	r3, #8
 800133a:	d126      	bne.n	800138a <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133c:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d120      	bne.n	800138a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001348:	4b5d      	ldr	r3, [pc, #372]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_RCC_OscConfig+0x14c>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d001      	beq.n	8001360 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e1a9      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4857      	ldr	r0, [pc, #348]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	4b57      	ldr	r3, [pc, #348]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6919      	ldr	r1, [r3, #16]
 800136e:	23f8      	movs	r3, #248	; 0xf8
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800137a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137c:	fab3 f383 	clz	r3, r3
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001388:	e044      	b.n	8001414 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d02a      	beq.n	80013e8 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001392:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <HAL_RCC_OscConfig+0x2b0>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff f83c 	bl	8000414 <HAL_GetTick>
 800139c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff f838 	bl	8000414 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e180      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b2:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4840      	ldr	r0, [pc, #256]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6919      	ldr	r1, [r3, #16]
 80013cc:	23f8      	movs	r3, #248	; 0xf8
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	fa93 f3a3 	rbit	r3, r3
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	6003      	str	r3, [r0, #0]
 80013e6:	e015      	b.n	8001414 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e8:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <HAL_RCC_OscConfig+0x2b0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ee:	f7ff f811 	bl	8000414 <HAL_GetTick>
 80013f2:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f6:	f7ff f80d 	bl	8000414 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e155      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001408:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	2b00      	cmp	r3, #0
 800141e:	d030      	beq.n	8001482 <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d016      	beq.n	8001456 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142e:	f7fe fff1 	bl	8000414 <HAL_GetTick>
 8001432:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001436:	f7fe ffed 	bl	8000414 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e135      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x222>
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145c:	f7fe ffda 	bl	8000414 <HAL_GetTick>
 8001460:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001464:	f7fe ffd6 	bl	8000414 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e11e      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8086 	beq.w	800159c <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80014b8:	f7fe ffac 	bl	8000414 <HAL_GetTick>
 80014bc:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014be:	e010      	b.n	80014e2 <HAL_RCC_OscConfig+0x2ce>
 80014c0:	40023800 	.word	0x40023800
 80014c4:	42470000 	.word	0x42470000
 80014c8:	42470e80 	.word	0x42470e80
 80014cc:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014d0:	f7fe ffa0 	bl	8000414 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e0e8      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014e2:	4b76      	ldr	r3, [pc, #472]	; (80016bc <HAL_RCC_OscConfig+0x4a8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x2f0>
 80014f6:	4a72      	ldr	r2, [pc, #456]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 80014f8:	4b71      	ldr	r3, [pc, #452]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6713      	str	r3, [r2, #112]	; 0x70
 8001502:	e01c      	b.n	800153e <HAL_RCC_OscConfig+0x32a>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d10c      	bne.n	8001526 <HAL_RCC_OscConfig+0x312>
 800150c:	4a6c      	ldr	r2, [pc, #432]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 800150e:	4b6c      	ldr	r3, [pc, #432]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 8001510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	4a69      	ldr	r2, [pc, #420]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 800151a:	4b69      	ldr	r3, [pc, #420]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	e00b      	b.n	800153e <HAL_RCC_OscConfig+0x32a>
 8001526:	4a66      	ldr	r2, [pc, #408]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 8001528:	4b65      	ldr	r3, [pc, #404]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	4a63      	ldr	r2, [pc, #396]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 8001534:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d015      	beq.n	8001572 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001546:	f7fe ff65 	bl	8000414 <HAL_GetTick>
 800154a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7fe ff61 	bl	8000414 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e0a7      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0ee      	beq.n	800154e <HAL_RCC_OscConfig+0x33a>
 8001570:	e014      	b.n	800159c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001572:	f7fe ff4f 	bl	8000414 <HAL_GetTick>
 8001576:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7fe ff4b 	bl	8000414 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	; 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e091      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001590:	4b4b      	ldr	r3, [pc, #300]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1ee      	bne.n	800157a <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8086 	beq.w	80016b2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a6:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d07d      	beq.n	80016ae <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d162      	bne.n	8001680 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <HAL_RCC_OscConfig+0x4b0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7fe ff28 	bl	8000414 <HAL_GetTick>
 80015c4:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c8:	f7fe ff24 	bl	8000414 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e06c      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e6:	4836      	ldr	r0, [pc, #216]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80015f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	60fb      	str	r3, [r7, #12]
  return(result);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	1e59      	subs	r1, r3, #1
 8001618:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800161c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	617b      	str	r3, [r7, #20]
  return(result);
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001636:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 800163a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	61fb      	str	r3, [r7, #28]
  return(result);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <HAL_RCC_OscConfig+0x4b0>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7fe fedc 	bl	8000414 <HAL_GetTick>
 800165c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001660:	f7fe fed8 	bl	8000414 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e020      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x44c>
 800167e:	e018      	b.n	80016b2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001680:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_OscConfig+0x4b0>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7fe fec5 	bl	8000414 <HAL_GetTick>
 800168a:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168e:	f7fe fec1 	bl	8000414 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e009      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <HAL_RCC_OscConfig+0x4ac>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x47a>
 80016ac:	e001      	b.n	80016b2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3738      	adds	r7, #56	; 0x38
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40007000 	.word	0x40007000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	42470060 	.word	0x42470060

080016c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016d6:	4b81      	ldr	r3, [pc, #516]	; (80018dc <HAL_RCC_ClockConfig+0x214>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 020f 	and.w	r2, r3, #15
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d20c      	bcs.n	80016fe <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e4:	4b7d      	ldr	r3, [pc, #500]	; (80018dc <HAL_RCC_ClockConfig+0x214>)
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016ec:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <HAL_RCC_ClockConfig+0x214>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 020f 	and.w	r2, r3, #15
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0ea      	b.n	80018d4 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170a:	4975      	ldr	r1, [pc, #468]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 800170c:	4b74      	ldr	r3, [pc, #464]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 8086 	beq.w	8001836 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d119      	bne.n	8001772 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0c8      	b.n	80018d4 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d003      	beq.n	8001752 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800174e:	2b03      	cmp	r3, #3
 8001750:	d107      	bne.n	8001762 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e0b8      	b.n	80018d4 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001762:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0b0      	b.n	80018d4 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001772:	495b      	ldr	r1, [pc, #364]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 8001774:	4b5a      	ldr	r3, [pc, #360]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f023 0203 	bic.w	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001784:	f7fe fe46 	bl	8000414 <HAL_GetTick>
 8001788:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d112      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001794:	f7fe fe3e 	bl	8000414 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e094      	b.n	80018d4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017aa:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d1ee      	bne.n	8001794 <HAL_RCC_ClockConfig+0xcc>
 80017b6:	e03e      	b.n	8001836 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d112      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c2:	f7fe fe27 	bl	8000414 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e07d      	b.n	80018d4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d1ee      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xfa>
 80017e4:	e027      	b.n	8001836 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d11d      	bne.n	800182a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7fe fe10 	bl	8000414 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e066      	b.n	80018d4 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001806:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d1ee      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x128>
 8001812:	e010      	b.n	8001836 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001814:	f7fe fdfe 	bl	8000414 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e054      	b.n	80018d4 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800182a:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ee      	bne.n	8001814 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001836:	4b29      	ldr	r3, [pc, #164]	; (80018dc <HAL_RCC_ClockConfig+0x214>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 020f 	and.w	r2, r3, #15
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d90c      	bls.n	800185e <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_RCC_ClockConfig+0x214>)
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_RCC_ClockConfig+0x214>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 020f 	and.w	r2, r3, #15
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d001      	beq.n	800185e <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e03a      	b.n	80018d4 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186a:	491d      	ldr	r1, [pc, #116]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001888:	4915      	ldr	r1, [pc, #84]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800189c:	f000 f826 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018a0:	4601      	mov	r1, r0
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_RCC_ClockConfig+0x218>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018aa:	23f0      	movs	r3, #240	; 0xf0
 80018ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	fab3 f383 	clz	r3, r3
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
 80018c0:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <HAL_RCC_ClockConfig+0x21c>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	fa21 f303 	lsr.w	r3, r1, r3
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_RCC_ClockConfig+0x220>)
 80018ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7fe fd77 	bl	80003c0 <HAL_InitTick>
  
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	08003e34 	.word	0x08003e34
 80018e8:	2000007c 	.word	0x2000007c

080018ec <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b08b      	sub	sp, #44	; 0x2c
 80018f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001902:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf0>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b04      	cmp	r3, #4
 800190c:	d006      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x30>
 800190e:	2b08      	cmp	r3, #8
 8001910:	d007      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x36>
 8001912:	2b00      	cmp	r3, #0
 8001914:	d158      	bne.n	80019c8 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001916:	4b32      	ldr	r3, [pc, #200]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001918:	623b      	str	r3, [r7, #32]
       break;
 800191a:	e058      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800191c:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800191e:	623b      	str	r3, [r7, #32]
      break;
 8001920:	e055      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001922:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf0>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800192a:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf0>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d017      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001938:	4a2a      	ldr	r2, [pc, #168]	; (80019e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001940:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf0>)
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001948:	400b      	ands	r3, r1
 800194a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800194e:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	6979      	ldr	r1, [r7, #20]
 8001952:	fa91 f1a1 	rbit	r1, r1
 8001956:	6139      	str	r1, [r7, #16]
  return(result);
 8001958:	6939      	ldr	r1, [r7, #16]
 800195a:	fab1 f181 	clz	r1, r1
 800195e:	40cb      	lsrs	r3, r1
 8001960:	fb03 f302 	mul.w	r3, r3, r2
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e016      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf0>)
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001978:	400b      	ands	r3, r1
 800197a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800197e:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	68f9      	ldr	r1, [r7, #12]
 8001982:	fa91 f1a1 	rbit	r1, r1
 8001986:	60b9      	str	r1, [r7, #8]
  return(result);
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	fab1 f181 	clz	r1, r1
 800198e:	40cb      	lsrs	r3, r1
 8001990:	fb03 f302 	mul.w	r3, r3, r2
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_RCC_GetSysClockFreq+0xf0>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800199e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80019a2:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	603b      	str	r3, [r7, #0]
  return(result);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	fa22 f303 	lsr.w	r3, r2, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 80019bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c4:	623b      	str	r3, [r7, #32]
      break;
 80019c6:	e002      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80019ca:	623b      	str	r3, [r7, #32]
      break;
 80019cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ce:	6a3b      	ldr	r3, [r7, #32]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	372c      	adds	r7, #44	; 0x2c
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40023800 	.word	0x40023800
 80019e0:	00f42400 	.word	0x00f42400
 80019e4:	017d7840 	.word	0x017d7840

080019e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	2000007c 	.word	0x2000007c

08001a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001a06:	f7ff ffef 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a0a:	4601      	mov	r1, r0
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a18:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	603b      	str	r3, [r7, #0]
  return(result);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	08003e44 	.word	0x08003e44

08001a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001a4a:	f7ff ffcd 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a4e:	4601      	mov	r1, r0
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8001a58:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a5c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	603b      	str	r3, [r7, #0]
  return(result);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001a72:	5cd3      	ldrb	r3, [r2, r3]
 8001a74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	08003e44 	.word	0x08003e44

08001a88 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b08b      	sub	sp, #44	; 0x2c
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	220f      	movs	r2, #15
 8001a94:	601a      	str	r2, [r3, #0]
  
  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001a96:	4b5a      	ldr	r3, [pc, #360]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001aa2:	d104      	bne.n	8001aae <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	e00e      	b.n	8001acc <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8001aae:	4b54      	ldr	r3, [pc, #336]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aba:	d104      	bne.n	8001ac6 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	e002      	b.n	8001acc <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
  }
  
  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8001acc:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d103      	bne.n	8001ae0 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC_CR_HSITRIM));
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 8001aee:	23f8      	movs	r3, #248	; 0xf8
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	623b      	str	r3, [r7, #32]
  return(result);
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	40da      	lsrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	611a      	str	r2, [r3, #16]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8001b06:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d103      	bne.n	8001b1a <HAL_RCC_GetOscConfig+0x92>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2205      	movs	r2, #5
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e00c      	b.n	8001b34 <HAL_RCC_GetOscConfig+0xac>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8001b1a:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d103      	bne.n	8001b2e <HAL_RCC_GetOscConfig+0xa6>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	e002      	b.n	8001b34 <HAL_RCC_GetOscConfig+0xac>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d103      	bne.n	8001b48 <HAL_RCC_GetOscConfig+0xc0>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	615a      	str	r2, [r3, #20]
 8001b46:	e002      	b.n	8001b4e <HAL_RCC_GetOscConfig+0xc6>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
  }
  
  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5a:	d103      	bne.n	8001b64 <HAL_RCC_GetOscConfig+0xdc>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	619a      	str	r2, [r3, #24]
 8001b62:	e002      	b.n	8001b6a <HAL_RCC_GetOscConfig+0xe2>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8001b76:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001b90:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	fa92 f2a2 	rbit	r2, r2
 8001b98:	60ba      	str	r2, [r7, #8]
  return(result);
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	fab2 f282 	clz	r2, r2
 8001ba0:	fa23 f202 	lsr.w	r2, r3, r2
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> POSITION_VAL(RCC_PLLCFGR_PLLP));
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001bb4:	005a      	lsls	r2, r3, #1
 8001bb6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	613b      	str	r3, [r7, #16]
  return(result);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	40da      	lsrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PLLCFGR_PLLQ));
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_RCC_GetOscConfig+0x178>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	61bb      	str	r3, [r7, #24]
  return(result);
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	40da      	lsrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001bf2:	bf00      	nop
 8001bf4:	372c      	adds	r7, #44	; 0x2c
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800

08001c04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	220f      	movs	r2, #15
 8001c12:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0203 	and.w	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	08db      	lsrs	r3, r3, #3
 8001c3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_RCC_GetClockConfig+0x60>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 020f 	and.w	r2, r3, #15
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <HAL_RTC_Init>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06d      	b.n	8001d56 <HAL_RTC_Init+0xee>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7f5b      	ldrb	r3, [r3, #29]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	771a      	strb	r2, [r3, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f867 	bl	8001d5e <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	22ca      	movs	r2, #202	; 0xca
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2253      	movs	r2, #83	; 0x53
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f863 	bl	8001d72 <RTC_EnterInitMode>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	22ff      	movs	r2, #255	; 0xff
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e048      	b.n	8001d56 <HAL_RTC_Init+0xee>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cd6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	6891      	ldr	r1, [r2, #8]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6850      	ldr	r0, [r2, #4]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6912      	ldr	r2, [r2, #16]
 8001cea:	4310      	orrs	r0, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6952      	ldr	r2, [r2, #20]
 8001cf0:	4302      	orrs	r2, r0
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68d2      	ldr	r2, [r2, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	6911      	ldr	r1, [r2, #16]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6892      	ldr	r2, [r2, #8]
 8001d0e:	0412      	lsls	r2, r2, #16
 8001d10:	430a      	orrs	r2, r1
 8001d12:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	68d2      	ldr	r2, [r2, #12]
 8001d1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d22:	60da      	str	r2, [r3, #12]
    
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6992      	ldr	r2, [r2, #24]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	22ff      	movs	r2, #255	; 0xff
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
  }
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_RTC_MspInit>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.  
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U; 
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d119      	bne.n	8001dc0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d96:	f7fe fb3d 	bl	8000414 <HAL_GetTick>
 8001d9a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001d9c:	e009      	b.n	8001db2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d9e:	f7fe fb39 	bl	8000414 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dac:	d901      	bls.n	8001db2 <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e007      	b.n	8001dc2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ee      	beq.n	8001d9e <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter: Wake up counter
  * @param  WakeUpClock: Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	7f1b      	ldrb	r3, [r3, #28]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e0a6      	b.n	8001f32 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2202      	movs	r2, #2
 8001dee:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	22ca      	movs	r2, #202	; 0xca
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2253      	movs	r2, #83	; 0x53
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d022      	beq.n	8001e54 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8001e0e:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a4c      	ldr	r2, [pc, #304]	; (8001f44 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	0adb      	lsrs	r3, r3, #11
 8001e1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	1e5a      	subs	r2, r3, #1
 8001e28:	617a      	str	r2, [r7, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10b      	bne.n	8001e46 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	22ff      	movs	r2, #255	; 0xff
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e075      	b.n	8001f32 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1e7      	bne.n	8001e24 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	6892      	ldr	r2, [r2, #8]
 8001e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e62:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a36      	ldr	r2, [pc, #216]	; (8001f44 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	0adb      	lsrs	r3, r3, #11
 8001e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	617a      	str	r2, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10b      	bne.n	8001e9c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	22ff      	movs	r2, #255	; 0xff
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2203      	movs	r2, #3
 8001e90:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e04a      	b.n	8001f32 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0e7      	beq.n	8001e7a <HAL_RTCEx_SetWakeUpTimer_IT+0xae>
        
  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	6892      	ldr	r2, [r2, #8]
 8001ebc:	f022 0207 	bic.w	r2, r2, #7
 8001ec0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	6891      	ldr	r1, [r2, #8]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8001ed2:	4a1d      	ldr	r2, [pc, #116]	; (8001f48 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001edc:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8001ede:	4a1a      	ldr	r2, [pc, #104]	; (8001f48 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ee8:	6093      	str	r3, [r2, #8]
  
  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	68d2      	ldr	r2, [r2, #12]
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001efa:	60da      	str	r2, [r3, #12]
  
  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	6892      	ldr	r2, [r2, #8]
 8001f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f0a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	6892      	ldr	r2, [r2, #8]
 8001f16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f1a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	22ff      	movs	r2, #255	; 0xff
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	2000007c 	.word	0x2000007c
 8001f44:	10624dd3 	.word	0x10624dd3
 8001f48:	40013c00 	.word	0x40013c00

08001f4c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC. 
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	7f1b      	ldrb	r3, [r3, #28]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e047      	b.n	8001ff4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	771a      	strb	r2, [r3, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	775a      	strb	r2, [r3, #29]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	22ca      	movs	r2, #202	; 0xca
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2253      	movs	r2, #83	; 0x53
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	6892      	ldr	r2, [r2, #8]
 8001f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8e:	609a      	str	r2, [r3, #8]
  
  /* In case of interrupt mode is used, the interrupt source must disabled */ 
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	6892      	ldr	r2, [r2, #8]
 8001f9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f9e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa0:	f7fe fa38 	bl	8000414 <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8001fa6:	e013      	b.n	8001fd0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001fa8:	f7fe fa34 	bl	8000414 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fb6:	d90b      	bls.n	8001fd0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	22ff      	movs	r2, #255	; 0xff
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24
      
      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	775a      	strb	r2, [r3, #29]
      
      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
      
      return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e011      	b.n	8001ff4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0e4      	beq.n	8001fa8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }   
  }
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	22ff      	movs	r2, #255	; 0xff
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
  
  hrtc->State = HAL_RTC_STATE_READY;   
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	775a      	strb	r2, [r3, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	771a      	strb	r2, [r3, #28]
  
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_WAKEUPTIMER_GET_IT(hrtc, RTC_IT_WUT))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200e:	2b00      	cmp	r3, #0
 8002010:	d012      	beq.n	8002038 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_WUT) != (uint32_t)RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00b      	beq.n	8002038 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>
    {
      /* WAKEUPTIMER callback */ 
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f001 facb 	bl	80035bc <HAL_RTCEx_WakeUpTimerEventCallback>
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	68d2      	ldr	r2, [r2, #12]
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002036:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RTCEx_WakeUpTimerIRQHandler+0x54>)
 800203a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800203e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	775a      	strb	r2, [r3, #29]
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10e      	bne.n	8002094 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d004      	beq.n	8002094 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4798      	blx	r3
    return;
 8002092:	e0b1      	b.n	80021f8 <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_SPI_IRQHandler+0x5e>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d004      	beq.n	80020b2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
    return;
 80020b0:	e0a2      	b.n	80021f8 <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	f403 73b0 	and.w	r3, r3, #352	; 0x160
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 809d 	beq.w	80021f8 <HAL_SPI_IRQHandler+0x1a4>
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8097 	beq.w	80021f8 <HAL_SPI_IRQHandler+0x1a4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d023      	beq.n	800211c <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d011      	beq.n	8002104 <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	f043 0204 	orr.w	r2, r3, #4
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	e00b      	b.n	800211c <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
        return;
 800211a:	e06d      	b.n	80021f8 <HAL_SPI_IRQHandler+0x1a4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d014      	beq.n	8002150 <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00c      	beq.n	8002174 <HAL_SPI_IRQHandler+0x120>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215e:	f043 0208 	orr.w	r2, r3, #8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	2b00      	cmp	r3, #0
 800217a:	d03c      	beq.n	80021f6 <HAL_SPI_IRQHandler+0x1a2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	6852      	ldr	r2, [r2, #4]
 8002186:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800218a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d104      	bne.n	80021a8 <HAL_SPI_IRQHandler+0x154>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d022      	beq.n	80021ee <HAL_SPI_IRQHandler+0x19a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	6852      	ldr	r2, [r2, #4]
 80021b2:	f022 0203 	bic.w	r2, r2, #3
 80021b6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_SPI_IRQHandler+0x17e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <HAL_SPI_IRQHandler+0x1ac>)
 80021c6:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe fb6b 	bl	80008a8 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00c      	beq.n	80021f4 <HAL_SPI_IRQHandler+0x1a0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <HAL_SPI_IRQHandler+0x1ac>)
 80021e0:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe fb5e 	bl	80008a8 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 80021ec:	e002      	b.n	80021f4 <HAL_SPI_IRQHandler+0x1a0>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f808 	bl	8002204 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
  }
}
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	08002219 	.word	0x08002219

08002204 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7ff ffe6 	bl	8002204 <HAL_SPI_ErrorCallback>
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e03f      	b.n	80022d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f001 fba6 	bl	80039b8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002282:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fd03 	bl	8002c90 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	6912      	ldr	r2, [r2, #16]
 8002294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	6952      	ldr	r2, [r2, #20]
 80022a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022a8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	68d2      	ldr	r2, [r2, #12]
 80022b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022b8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b088      	sub	sp, #32
 80022de:	af02      	add	r7, sp, #8
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	f040 8082 	bne.w	8002400 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_UART_Transmit+0x2e>
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e07a      	b.n	8002402 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_UART_Transmit+0x40>
 8002316:	2302      	movs	r3, #2
 8002318:	e073      	b.n	8002402 <HAL_UART_Transmit+0x128>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2221      	movs	r2, #33	; 0x21
 800232c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002330:	f7fe f870 	bl	8000414 <HAL_GetTick>
 8002334:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	88fa      	ldrh	r2, [r7, #6]
 800233a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	88fa      	ldrh	r2, [r7, #6]
 8002340:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002342:	e041      	b.n	80023c8 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002348:	b29b      	uxth	r3, r3
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235a:	d121      	bne.n	80023a0 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2200      	movs	r2, #0
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 fb19 	bl	800299e <UART_WaitOnFlagUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e045      	b.n	8002402 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	8812      	ldrh	r2, [r2, #0]
 8002382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002386:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d103      	bne.n	8002398 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	3302      	adds	r3, #2
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	e017      	b.n	80023c8 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	3301      	adds	r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	e013      	b.n	80023c8 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2200      	movs	r2, #0
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 faf7 	bl	800299e <UART_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e023      	b.n	8002402 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1c59      	adds	r1, r3, #1
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1b8      	bne.n	8002344 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2200      	movs	r2, #0
 80023da:	2140      	movs	r1, #64	; 0x40
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fade 	bl	800299e <UART_WaitOnFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e00a      	b.n	8002402 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e000      	b.n	8002402 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002400:	2302      	movs	r3, #2
  }
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b20      	cmp	r3, #32
 8002424:	d153      	bne.n	80024ce <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <HAL_UART_Transmit_DMA+0x26>
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e04c      	b.n	80024d0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_UART_Transmit_DMA+0x38>
 8002440:	2302      	movs	r3, #2
 8002442:	e045      	b.n	80024d0 <HAL_UART_Transmit_DMA+0xc4>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	88fa      	ldrh	r2, [r7, #6]
 8002456:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2221      	movs	r2, #33	; 0x21
 8002468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <HAL_UART_Transmit_DMA+0xcc>)
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a18      	ldr	r2, [pc, #96]	; (80024dc <HAL_UART_Transmit_DMA+0xd0>)
 800247a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <HAL_UART_Transmit_DMA+0xd4>)
 8002482:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	2200      	movs	r2, #0
 800248a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3304      	adds	r3, #4
 80024a0:	461a      	mov	r2, r3
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	f7fe f9a0 	bl	80007e8 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024b0:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	6952      	ldr	r2, [r2, #20]
 80024c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024c8:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80024ce:	2302      	movs	r3, #2
  }
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	08002819 	.word	0x08002819
 80024dc:	0800286b 	.word	0x0800286b
 80024e0:	0800290b 	.word	0x0800290b

080024e4 <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	4613      	mov	r3, r2
 80024f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d166      	bne.n	80025cc <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_UART_Receive_DMA+0x26>
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e05f      	b.n	80025ce <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_UART_Receive_DMA+0x38>
 8002518:	2302      	movs	r3, #2
 800251a:	e058      	b.n	80025ce <HAL_UART_Receive_DMA+0xea>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	88fa      	ldrh	r2, [r7, #6]
 800252e:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2222      	movs	r2, #34	; 0x22
 800253a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <HAL_UART_Receive_DMA+0xf4>)
 8002544:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	4a24      	ldr	r2, [pc, #144]	; (80025dc <HAL_UART_Receive_DMA+0xf8>)
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002552:	4a23      	ldr	r2, [pc, #140]	; (80025e0 <HAL_UART_Receive_DMA+0xfc>)
 8002554:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255a:	2200      	movs	r2, #0
 800255c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3304      	adds	r3, #4
 800256e:	4619      	mov	r1, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	f7fe f937 	bl	80007e8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	68d2      	ldr	r2, [r2, #12]
 80025a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	6952      	ldr	r2, [r2, #20]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	6952      	ldr	r2, [r2, #20]
 80025c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e000      	b.n	80025ce <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 80025cc:	2302      	movs	r3, #2
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	08002887 	.word	0x08002887
 80025dc:	080028ef 	.word	0x080028ef
 80025e0:	0800290b 	.word	0x0800290b

080025e4 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10d      	bne.n	8002636 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_UART_IRQHandler+0x52>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fab4 	bl	8002b9c <UART_Receive_IT>
      return;
 8002634:	e0cc      	b.n	80027d0 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80ab 	beq.w	8002794 <HAL_UART_IRQHandler+0x1b0>
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_UART_IRQHandler+0x70>
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80a0 	beq.w	8002794 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_UART_IRQHandler+0x90>
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_UART_IRQHandler+0xb0>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	f043 0202 	orr.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_UART_IRQHandler+0xd0>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	f043 0204 	orr.w	r2, r3, #4
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_UART_IRQHandler+0xf0>
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	f043 0208 	orr.w	r2, r3, #8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d078      	beq.n	80027ce <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <HAL_UART_IRQHandler+0x112>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fa53 	bl	8002b9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf14      	ite	ne
 8002704:	2301      	movne	r3, #1
 8002706:	2300      	moveq	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <HAL_UART_IRQHandler+0x13a>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d031      	beq.n	8002782 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f99d 	bl	8002a5e <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d023      	beq.n	800277a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	6952      	ldr	r2, [r2, #20]
 800273c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002740:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002746:	2b00      	cmp	r3, #0
 8002748:	d013      	beq.n	8002772 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <HAL_UART_IRQHandler+0x1f4>)
 8002750:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe f8a6 	bl	80008a8 <HAL_DMA_Abort_IT>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800276c:	4610      	mov	r0, r2
 800276e:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002770:	e00e      	b.n	8002790 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f846 	bl	8002804 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002778:	e00a      	b.n	8002790 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f842 	bl	8002804 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002780:	e006      	b.n	8002790 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f83e 	bl	8002804 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800278e:	e01e      	b.n	80027ce <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002790:	bf00      	nop
    return;
 8002792:	e01c      	b.n	80027ce <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_UART_IRQHandler+0x1cc>
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f98a 	bl	8002ac2 <UART_Transmit_IT>
    return;
 80027ae:	e00f      	b.n	80027d0 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_UART_IRQHandler+0x1ec>
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f9d1 	bl	8002b6c <UART_EndTransmit_IT>
    return;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <HAL_UART_IRQHandler+0x1ec>
    return;
 80027ce:	bf00      	nop
  }
}
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	08002a9b 	.word	0x08002a9b

080027dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002824:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d113      	bne.n	800285c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	6952      	ldr	r2, [r2, #20]
 8002844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002848:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	68d2      	ldr	r2, [r2, #12]
 8002854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002858:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 800285a:	e002      	b.n	8002862 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fd0f 	bl	8003280 <HAL_UART_TxCpltCallback>
}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f7ff ffaf 	bl	80027dc <HAL_UART_TxHalfCpltCallback>
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002892:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d11e      	bne.n	80028e0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	68d2      	ldr	r2, [r2, #12]
 80028b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	6952      	ldr	r2, [r2, #20]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	6952      	ldr	r2, [r2, #20]
 80028d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d6:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fd05 	bl	80032f0 <HAL_UART_RxCpltCallback>
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff ff77 	bl	80027f0 <HAL_UART_RxHalfCpltCallback>
}
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b21      	cmp	r3, #33	; 0x21
 800293c:	d108      	bne.n	8002950 <UART_DMAError+0x46>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2200      	movs	r2, #0
 8002948:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800294a:	68b8      	ldr	r0, [r7, #8]
 800294c:	f000 f871 	bl	8002a32 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b22      	cmp	r3, #34	; 0x22
 8002970:	d108      	bne.n	8002984 <UART_DMAError+0x7a>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2200      	movs	r2, #0
 800297c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800297e:	68b8      	ldr	r0, [r7, #8]
 8002980:	f000 f86d 	bl	8002a5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	f043 0210 	orr.w	r2, r3, #16
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002990:	68b8      	ldr	r0, [r7, #8]
 8002992:	f7ff ff37 	bl	8002804 <HAL_UART_ErrorCallback>
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80029ae:	e02c      	b.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d028      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x30>
 80029be:	f7fd fd29 	bl	8000414 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	1ad2      	subs	r2, r2, r3
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d91d      	bls.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	68d2      	ldr	r2, [r2, #12]
 80029d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	6952      	ldr	r2, [r2, #20]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e00f      	b.n	8002a2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	401a      	ands	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d0c3      	beq.n	80029b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	68d2      	ldr	r2, [r2, #12]
 8002a44:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002a48:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	68d2      	ldr	r2, [r2, #12]
 8002a70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a74:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	6952      	ldr	r2, [r2, #20]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7ff fea5 	bl	8002804 <HAL_UART_ErrorCallback>
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b21      	cmp	r3, #33	; 0x21
 8002ad4:	d143      	bne.n	8002b5e <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ade:	d119      	bne.n	8002b14 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af2:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	1c9a      	adds	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	621a      	str	r2, [r3, #32]
 8002b06:	e00e      	b.n	8002b26 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	621a      	str	r2, [r3, #32]
 8002b12:	e008      	b.n	8002b26 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	1c58      	adds	r0, r3, #1
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	6208      	str	r0, [r1, #32]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4619      	mov	r1, r3
 8002b34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	68d2      	ldr	r2, [r2, #12]
 8002b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	68d2      	ldr	r2, [r2, #12]
 8002b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
  }
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b82:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fb77 	bl	8003280 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b22      	cmp	r3, #34	; 0x22
 8002bae:	d169      	bne.n	8002c84 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb8:	d123      	bne.n	8002c02 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10e      	bne.n	8002be6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	1c9a      	adds	r2, r3, #2
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
 8002be4:	e029      	b.n	8002c3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8002c00:	e01b      	b.n	8002c3a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	1c59      	adds	r1, r3, #1
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6291      	str	r1, [r2, #40]	; 0x28
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	6852      	ldr	r2, [r2, #4]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	e00c      	b.n	8002c3a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	1c59      	adds	r1, r3, #1
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6291      	str	r1, [r2, #40]	; 0x28
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	6852      	ldr	r2, [r2, #4]
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4619      	mov	r1, r3
 8002c48:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d118      	bne.n	8002c80 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	68d2      	ldr	r2, [r2, #12]
 8002c58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	6952      	ldr	r2, [r2, #20]
 8002c68:	f022 0201 	bic.w	r2, r2, #1
 8002c6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fb3a 	bl	80032f0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e002      	b.n	8002c86 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002c84:	2302      	movs	r3, #2
  }
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002ccc:	f023 030c 	bic.w	r3, r3, #12
 8002cd0:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d04:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d20:	f040 80e4 	bne.w	8002eec <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4aab      	ldr	r2, [pc, #684]	; (8002fd8 <UART_SetConfig+0x348>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d004      	beq.n	8002d38 <UART_SetConfig+0xa8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4aaa      	ldr	r2, [pc, #680]	; (8002fdc <UART_SetConfig+0x34c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d16c      	bne.n	8002e12 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681c      	ldr	r4, [r3, #0]
 8002d3c:	f7fe fe82 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	009a      	lsls	r2, r3, #2
 8002d4a:	441a      	add	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d56:	4aa2      	ldr	r2, [pc, #648]	; (8002fe0 <UART_SetConfig+0x350>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	011d      	lsls	r5, r3, #4
 8002d60:	f7fe fe70 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009a      	lsls	r2, r3, #2
 8002d6e:	441a      	add	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fbb2 f6f3 	udiv	r6, r2, r3
 8002d7a:	f7fe fe63 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009a      	lsls	r2, r3, #2
 8002d88:	441a      	add	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	4a92      	ldr	r2, [pc, #584]	; (8002fe0 <UART_SetConfig+0x350>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2264      	movs	r2, #100	; 0x64
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	1af3      	subs	r3, r6, r3
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	3332      	adds	r3, #50	; 0x32
 8002da8:	4a8d      	ldr	r2, [pc, #564]	; (8002fe0 <UART_SetConfig+0x350>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002db6:	441d      	add	r5, r3
 8002db8:	f7fe fe44 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009a      	lsls	r2, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	fbb2 f6f3 	udiv	r6, r2, r3
 8002dd2:	f7fe fe37 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	009a      	lsls	r2, r3, #2
 8002de0:	441a      	add	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	4a7c      	ldr	r2, [pc, #496]	; (8002fe0 <UART_SetConfig+0x350>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	2264      	movs	r2, #100	; 0x64
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	1af3      	subs	r3, r6, r3
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	3332      	adds	r3, #50	; 0x32
 8002e00:	4a77      	ldr	r2, [pc, #476]	; (8002fe0 <UART_SetConfig+0x350>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	442b      	add	r3, r5
 8002e0e:	60a3      	str	r3, [r4, #8]
 8002e10:	e154      	b.n	80030bc <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681c      	ldr	r4, [r3, #0]
 8002e16:	f7fe fdf3 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	009a      	lsls	r2, r3, #2
 8002e24:	441a      	add	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	4a6b      	ldr	r2, [pc, #428]	; (8002fe0 <UART_SetConfig+0x350>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	011d      	lsls	r5, r3, #4
 8002e3a:	f7fe fde1 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009a      	lsls	r2, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fbb2 f6f3 	udiv	r6, r2, r3
 8002e54:	f7fe fdd4 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009a      	lsls	r2, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	4a5c      	ldr	r2, [pc, #368]	; (8002fe0 <UART_SetConfig+0x350>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	2264      	movs	r2, #100	; 0x64
 8002e78:	fb02 f303 	mul.w	r3, r2, r3
 8002e7c:	1af3      	subs	r3, r6, r3
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	3332      	adds	r3, #50	; 0x32
 8002e82:	4a57      	ldr	r2, [pc, #348]	; (8002fe0 <UART_SetConfig+0x350>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e90:	441d      	add	r5, r3
 8002e92:	f7fe fdb5 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8002e96:	4602      	mov	r2, r0
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009a      	lsls	r2, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fbb2 f6f3 	udiv	r6, r2, r3
 8002eac:	f7fe fda8 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009a      	lsls	r2, r3, #2
 8002eba:	441a      	add	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec6:	4a46      	ldr	r2, [pc, #280]	; (8002fe0 <UART_SetConfig+0x350>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	2264      	movs	r2, #100	; 0x64
 8002ed0:	fb02 f303 	mul.w	r3, r2, r3
 8002ed4:	1af3      	subs	r3, r6, r3
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	3332      	adds	r3, #50	; 0x32
 8002eda:	4a41      	ldr	r2, [pc, #260]	; (8002fe0 <UART_SetConfig+0x350>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	442b      	add	r3, r5
 8002ee8:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002eea:	e0e7      	b.n	80030bc <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a39      	ldr	r2, [pc, #228]	; (8002fd8 <UART_SetConfig+0x348>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <UART_SetConfig+0x270>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a38      	ldr	r2, [pc, #224]	; (8002fdc <UART_SetConfig+0x34c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d171      	bne.n	8002fe4 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681c      	ldr	r4, [r3, #0]
 8002f04:	f7fe fd9e 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009a      	lsls	r2, r3, #2
 8002f12:	441a      	add	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	4a30      	ldr	r2, [pc, #192]	; (8002fe0 <UART_SetConfig+0x350>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	011d      	lsls	r5, r3, #4
 8002f28:	f7fe fd8c 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009a      	lsls	r2, r3, #2
 8002f36:	441a      	add	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f42:	f7fe fd7f 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002f46:	4602      	mov	r2, r0
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009a      	lsls	r2, r3, #2
 8002f50:	441a      	add	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	4a20      	ldr	r2, [pc, #128]	; (8002fe0 <UART_SetConfig+0x350>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2264      	movs	r2, #100	; 0x64
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	1af3      	subs	r3, r6, r3
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	3332      	adds	r3, #50	; 0x32
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <UART_SetConfig+0x350>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f7c:	441d      	add	r5, r3
 8002f7e:	f7fe fd61 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009a      	lsls	r2, r3, #2
 8002f8c:	441a      	add	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fbb2 f6f3 	udiv	r6, r2, r3
 8002f98:	f7fe fd54 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009a      	lsls	r2, r3, #2
 8002fa6:	441a      	add	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <UART_SetConfig+0x350>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	2264      	movs	r2, #100	; 0x64
 8002fbc:	fb02 f303 	mul.w	r3, r2, r3
 8002fc0:	1af3      	subs	r3, r6, r3
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	3332      	adds	r3, #50	; 0x32
 8002fc6:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <UART_SetConfig+0x350>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	442b      	add	r3, r5
 8002fd4:	60a3      	str	r3, [r4, #8]
 8002fd6:	e071      	b.n	80030bc <UART_SetConfig+0x42c>
 8002fd8:	40011000 	.word	0x40011000
 8002fdc:	40011400 	.word	0x40011400
 8002fe0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681c      	ldr	r4, [r3, #0]
 8002fe8:	f7fe fd0a 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009a      	lsls	r2, r3, #2
 8002ff6:	441a      	add	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	4a30      	ldr	r2, [pc, #192]	; (80030c4 <UART_SetConfig+0x434>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	011d      	lsls	r5, r3, #4
 800300c:	f7fe fcf8 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8003010:	4602      	mov	r2, r0
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	009a      	lsls	r2, r3, #2
 800301a:	441a      	add	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	fbb2 f6f3 	udiv	r6, r2, r3
 8003026:	f7fe fceb 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 800302a:	4602      	mov	r2, r0
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009a      	lsls	r2, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <UART_SetConfig+0x434>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	2264      	movs	r2, #100	; 0x64
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	1af3      	subs	r3, r6, r3
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	3332      	adds	r3, #50	; 0x32
 8003054:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <UART_SetConfig+0x434>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003060:	441d      	add	r5, r3
 8003062:	f7fe fccd 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8003066:	4602      	mov	r2, r0
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	009a      	lsls	r2, r3, #2
 8003070:	441a      	add	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	fbb2 f6f3 	udiv	r6, r2, r3
 800307c:	f7fe fcc0 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 8003080:	4602      	mov	r2, r0
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	009a      	lsls	r2, r3, #2
 800308a:	441a      	add	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <UART_SetConfig+0x434>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	2264      	movs	r2, #100	; 0x64
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	1af3      	subs	r3, r6, r3
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	3332      	adds	r3, #50	; 0x32
 80030aa:	4a06      	ldr	r2, [pc, #24]	; (80030c4 <UART_SetConfig+0x434>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	442b      	add	r3, r5
 80030b8:	60a3      	str	r3, [r4, #8]
}
 80030ba:	e7ff      	b.n	80030bc <UART_SetConfig+0x42c>
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c4:	51eb851f 	.word	0x51eb851f

080030c8 <send_ATCommand_DMA>:
	if (HAL_UART_Transmit(&huart1, (uint8_t *) cmd, cmd_len, esp_timeout) != HAL_OK) {
//		imprimir("Error");
	}
}

void send_ATCommand_DMA(char *cmd) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	uint16_t cmd_len = strlen(cmd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7fd f881 	bl	80001d8 <strlen>
 80030d6:	4603      	mov	r3, r0
 80030d8:	81fb      	strh	r3, [r7, #14]

	if (HAL_UART_Transmit_DMA(&huart1, (uint8_t *) cmd, cmd_len) != HAL_OK) {
 80030da:	89fb      	ldrh	r3, [r7, #14]
 80030dc:	461a      	mov	r2, r3
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	480a      	ldr	r0, [pc, #40]	; (800310c <send_ATCommand_DMA+0x44>)
 80030e2:	f7ff f993 	bl	800240c <HAL_UART_Transmit_DMA>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <send_ATCommand_DMA+0x2a>
		imprimir("Error Send");
 80030ec:	4808      	ldr	r0, [pc, #32]	; (8003110 <send_ATCommand_DMA+0x48>)
 80030ee:	f000 fbb5 	bl	800385c <imprimir>
	}
	while (Uart1Ready != SET) {}
 80030f2:	bf00      	nop
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <send_ATCommand_DMA+0x4c>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d1fa      	bne.n	80030f4 <send_ATCommand_DMA+0x2c>
	Uart1Ready = RESET;
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <send_ATCommand_DMA+0x4c>)
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20013268 	.word	0x20013268
 8003110:	08003dc4 	.word	0x08003dc4
 8003114:	200000a1 	.word	0x200000a1

08003118 <read_buffer>:
//}

uint8_t RXBUFFERSIZE = 5;
uint8_t aRxBuffer[5];

void read_buffer() {
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
	while (HAL_UART_Receive_DMA(&huart1, (uint8_t *) aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 800311c:	e002      	b.n	8003124 <read_buffer+0xc>
	{
		imprimir("Error Read");
 800311e:	4809      	ldr	r0, [pc, #36]	; (8003144 <read_buffer+0x2c>)
 8003120:	f000 fb9c 	bl	800385c <imprimir>
	while (HAL_UART_Receive_DMA(&huart1, (uint8_t *) aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <read_buffer+0x30>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	4907      	ldr	r1, [pc, #28]	; (800314c <read_buffer+0x34>)
 800312e:	4808      	ldr	r0, [pc, #32]	; (8003150 <read_buffer+0x38>)
 8003130:	f7ff f9d8 	bl	80024e4 <HAL_UART_Receive_DMA>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f1      	bne.n	800311e <read_buffer+0x6>
	}
//	while (Uart1Ready != SET) {}
//	Uart1Ready = RESET;
	imprimir(aRxBuffer);
 800313a:	4804      	ldr	r0, [pc, #16]	; (800314c <read_buffer+0x34>)
 800313c:	f000 fb8e 	bl	800385c <imprimir>
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}
 8003144:	08003dd0 	.word	0x08003dd0
 8003148:	20000008 	.word	0x20000008
 800314c:	200000ac 	.word	0x200000ac
 8003150:	20013268 	.word	0x20013268

08003154 <inicializar_gps>:

__IO ITStatus UartReady = RESET;
__IO ITStatus Uart1Ready = RESET;

void inicializar_gps(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_DMA(&huart6, (uint8_t *) parsing, 80) != HAL_OK) {
 8003158:	2250      	movs	r2, #80	; 0x50
 800315a:	4930      	ldr	r1, [pc, #192]	; (800321c <inicializar_gps+0xc8>)
 800315c:	4830      	ldr	r0, [pc, #192]	; (8003220 <inicializar_gps+0xcc>)
 800315e:	f7ff f9c1 	bl	80024e4 <HAL_UART_Receive_DMA>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <inicializar_gps+0x18>
		Error_Handler();
 8003168:	f000 fbea 	bl	8003940 <Error_Handler>
	}
	while (UartReady != SET) {}
 800316c:	bf00      	nop
 800316e:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <inicializar_gps+0xd0>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d1fa      	bne.n	800316e <inicializar_gps+0x1a>
	UartReady = RESET;
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <inicializar_gps+0xd0>)
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GSV, sizeof(deinit_GSV)) != HAL_OK) {
 800317e:	221a      	movs	r2, #26
 8003180:	4929      	ldr	r1, [pc, #164]	; (8003228 <inicializar_gps+0xd4>)
 8003182:	4827      	ldr	r0, [pc, #156]	; (8003220 <inicializar_gps+0xcc>)
 8003184:	f7ff f942 	bl	800240c <HAL_UART_Transmit_DMA>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <inicializar_gps+0x3e>
		Error_Handler();
 800318e:	f000 fbd7 	bl	8003940 <Error_Handler>
	}
	while (UartReady != SET) {}
 8003192:	bf00      	nop
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <inicializar_gps+0xd0>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d1fa      	bne.n	8003194 <inicializar_gps+0x40>
	UartReady = RESET;
 800319e:	4b21      	ldr	r3, [pc, #132]	; (8003224 <inicializar_gps+0xd0>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GSA, sizeof(deinit_GSA)) != HAL_OK) {
 80031a4:	221a      	movs	r2, #26
 80031a6:	4921      	ldr	r1, [pc, #132]	; (800322c <inicializar_gps+0xd8>)
 80031a8:	481d      	ldr	r0, [pc, #116]	; (8003220 <inicializar_gps+0xcc>)
 80031aa:	f7ff f92f 	bl	800240c <HAL_UART_Transmit_DMA>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <inicializar_gps+0x64>
		Error_Handler();
 80031b4:	f000 fbc4 	bl	8003940 <Error_Handler>
	}
	while (UartReady != SET) {}
 80031b8:	bf00      	nop
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <inicializar_gps+0xd0>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d1fa      	bne.n	80031ba <inicializar_gps+0x66>
	UartReady = RESET;
 80031c4:	4b17      	ldr	r3, [pc, #92]	; (8003224 <inicializar_gps+0xd0>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GGA, sizeof(deinit_GGA)) != HAL_OK) {
 80031ca:	221a      	movs	r2, #26
 80031cc:	4918      	ldr	r1, [pc, #96]	; (8003230 <inicializar_gps+0xdc>)
 80031ce:	4814      	ldr	r0, [pc, #80]	; (8003220 <inicializar_gps+0xcc>)
 80031d0:	f7ff f91c 	bl	800240c <HAL_UART_Transmit_DMA>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <inicializar_gps+0x8a>
		Error_Handler();
 80031da:	f000 fbb1 	bl	8003940 <Error_Handler>
	}
	while (UartReady != SET) {}
 80031de:	bf00      	nop
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <inicializar_gps+0xd0>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d1fa      	bne.n	80031e0 <inicializar_gps+0x8c>
	UartReady = RESET;
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <inicializar_gps+0xd0>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) init_RMC, sizeof(init_RMC)) != HAL_OK) {
 80031f0:	221a      	movs	r2, #26
 80031f2:	4910      	ldr	r1, [pc, #64]	; (8003234 <inicializar_gps+0xe0>)
 80031f4:	480a      	ldr	r0, [pc, #40]	; (8003220 <inicializar_gps+0xcc>)
 80031f6:	f7ff f909 	bl	800240c <HAL_UART_Transmit_DMA>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <inicializar_gps+0xb0>
		Error_Handler();
 8003200:	f000 fb9e 	bl	8003940 <Error_Handler>
	}
	while (UartReady != SET) {}
 8003204:	bf00      	nop
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <inicializar_gps+0xd0>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d1fa      	bne.n	8003206 <inicializar_gps+0xb2>
	UartReady = RESET;
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <inicializar_gps+0xd0>)
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	200131bc 	.word	0x200131bc
 8003220:	200132bc 	.word	0x200132bc
 8003224:	200000a0 	.word	0x200000a0
 8003228:	20000044 	.word	0x20000044
 800322c:	20000028 	.word	0x20000028
 8003230:	2000000c 	.word	0x2000000c
 8003234:	20000060 	.word	0x20000060

08003238 <guardar_coordenadas>:
  * @brief  Las tramas obtenidas se guardan en un struct
  * @param  None
  * @retval None
  */
void guardar_coordenadas(char buffer[])
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	strcpy(mibuffer[c].datos, buffer);
 8003240:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <guardar_coordenadas+0x40>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	22c8      	movs	r2, #200	; 0xc8
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	4a0c      	ldr	r2, [pc, #48]	; (800327c <guardar_coordenadas+0x44>)
 800324c:	4413      	add	r3, r2
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fda3 	bl	8003d9c <strcpy>
	c++;
 8003256:	4b08      	ldr	r3, [pc, #32]	; (8003278 <guardar_coordenadas+0x40>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <guardar_coordenadas+0x40>)
 800325e:	6013      	str	r3, [r2, #0]
	if (c == 199)
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <guardar_coordenadas+0x40>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2bc7      	cmp	r3, #199	; 0xc7
 8003266:	d102      	bne.n	800326e <guardar_coordenadas+0x36>
	{
		c = 0;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <guardar_coordenadas+0x40>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
	}
//	obtener_coordenadas();
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	2000009c 	.word	0x2000009c
 800327c:	20009530 	.word	0x20009530

08003280 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
 {
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1) {
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <HAL_UART_TxCpltCallback+0x58>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10b      	bne.n	80032aa <HAL_UART_TxCpltCallback+0x2a>
		(&huart1)->gState = HAL_UART_STATE_READY;
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_UART_TxCpltCallback+0x5c>)
 8003294:	2220      	movs	r2, #32
 8003296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		Uart1Ready = SET;
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_UART_TxCpltCallback+0x60>)
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
		(&huart6)->RxState = HAL_UART_STATE_READY;
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <HAL_UART_TxCpltCallback+0x64>)
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	else if (UartHandle->Instance == USART6) {
		(&huart6)->gState = HAL_UART_STATE_READY;
		UartReady = SET;
		(&huart6)->RxState = HAL_UART_STATE_READY;
	}
}
 80032a8:	e00f      	b.n	80032ca <HAL_UART_TxCpltCallback+0x4a>
	else if (UartHandle->Instance == USART6) {
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a0e      	ldr	r2, [pc, #56]	; (80032e8 <HAL_UART_TxCpltCallback+0x68>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10a      	bne.n	80032ca <HAL_UART_TxCpltCallback+0x4a>
		(&huart6)->gState = HAL_UART_STATE_READY;
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_UART_TxCpltCallback+0x64>)
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		UartReady = SET;
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_UART_TxCpltCallback+0x6c>)
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
		(&huart6)->RxState = HAL_UART_STATE_READY;
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_UART_TxCpltCallback+0x64>)
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40011000 	.word	0x40011000
 80032dc:	20013268 	.word	0x20013268
 80032e0:	200000a1 	.word	0x200000a1
 80032e4:	200132bc 	.word	0x200132bc
 80032e8:	40011400 	.word	0x40011400
 80032ec:	200000a0 	.word	0x200000a0

080032f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1) {
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a10      	ldr	r2, [pc, #64]	; (8003340 <HAL_UART_RxCpltCallback+0x50>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d107      	bne.n	8003312 <HAL_UART_RxCpltCallback+0x22>
		(&huart1)->RxState = HAL_UART_STATE_READY;
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <HAL_UART_RxCpltCallback+0x54>)
 8003304:	2220      	movs	r2, #32
 8003306:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		Uart1Ready = SET;
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_UART_RxCpltCallback+0x58>)
 800330c:	2201      	movs	r2, #1
 800330e:	701a      	strb	r2, [r3, #0]
		(&huart6)->RxState = HAL_UART_STATE_READY;
		imprimir(parsing);
		guardar_coordenadas(parsing);
		UartReady = SET;
	}
}
 8003310:	e011      	b.n	8003336 <HAL_UART_RxCpltCallback+0x46>
	else if (UartHandle->Instance == USART6) {
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a0d      	ldr	r2, [pc, #52]	; (800334c <HAL_UART_RxCpltCallback+0x5c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d10c      	bne.n	8003336 <HAL_UART_RxCpltCallback+0x46>
		(&huart6)->RxState = HAL_UART_STATE_READY;
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_UART_RxCpltCallback+0x60>)
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		imprimir(parsing);
 8003324:	480b      	ldr	r0, [pc, #44]	; (8003354 <HAL_UART_RxCpltCallback+0x64>)
 8003326:	f000 fa99 	bl	800385c <imprimir>
		guardar_coordenadas(parsing);
 800332a:	480a      	ldr	r0, [pc, #40]	; (8003354 <HAL_UART_RxCpltCallback+0x64>)
 800332c:	f7ff ff84 	bl	8003238 <guardar_coordenadas>
		UartReady = SET;
 8003330:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_UART_RxCpltCallback+0x68>)
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40011000 	.word	0x40011000
 8003344:	20013268 	.word	0x20013268
 8003348:	200000a1 	.word	0x200000a1
 800334c:	40011400 	.word	0x40011400
 8003350:	200132bc 	.word	0x200132bc
 8003354:	200131bc 	.word	0x200131bc
 8003358:	200000a0 	.word	0x200000a0

0800335c <GPIO_Init>:


/** Pinout Configuration
*/
void GPIO_Init(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <GPIO_Init+0x68>)
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <GPIO_Init+0x68>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <GPIO_Init+0x68>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
  __GPIOC_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <GPIO_Init+0x68>)
 8003384:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <GPIO_Init+0x68>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <GPIO_Init+0x68>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <GPIO_Init+0x68>)
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <GPIO_Init+0x68>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <GPIO_Init+0x68>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]

}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800

080033c8 <UART1_Init>:

/* USART1 init function */
void UART1_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80033cc:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <UART1_Init+0x40>)
 80033ce:	4a0f      	ldr	r2, [pc, #60]	; (800340c <UART1_Init+0x44>)
 80033d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033d2:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <UART1_Init+0x40>)
 80033d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <UART1_Init+0x40>)
 80033dc:	2200      	movs	r2, #0
 80033de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <UART1_Init+0x40>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <UART1_Init+0x40>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <UART1_Init+0x40>)
 80033ee:	220c      	movs	r2, #12
 80033f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <UART1_Init+0x40>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <UART1_Init+0x40>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 80033fe:	4802      	ldr	r0, [pc, #8]	; (8003408 <UART1_Init+0x40>)
 8003400:	f7fe ff1e 	bl	8002240 <HAL_UART_Init>

}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20013268 	.word	0x20013268
 800340c:	40011000 	.word	0x40011000

08003410 <UART2_Init>:

/* USART2 init function */
void UART2_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <UART2_Init+0x40>)
 8003416:	4a0f      	ldr	r2, [pc, #60]	; (8003454 <UART2_Init+0x44>)
 8003418:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <UART2_Init+0x40>)
 800341c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003420:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <UART2_Init+0x40>)
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <UART2_Init+0x40>)
 800342a:	2200      	movs	r2, #0
 800342c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <UART2_Init+0x40>)
 8003430:	2200      	movs	r2, #0
 8003432:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <UART2_Init+0x40>)
 8003436:	220c      	movs	r2, #12
 8003438:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <UART2_Init+0x40>)
 800343c:	2200      	movs	r2, #0
 800343e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <UART2_Init+0x40>)
 8003442:	2200      	movs	r2, #0
 8003444:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 8003446:	4802      	ldr	r0, [pc, #8]	; (8003450 <UART2_Init+0x40>)
 8003448:	f7fe fefa 	bl	8002240 <HAL_UART_Init>

}
 800344c:	bf00      	nop
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20013354 	.word	0x20013354
 8003454:	40004400 	.word	0x40004400

08003458 <UART6_Init>:

/* USART1 init function */
void UART6_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0

	huart6.Instance = USART6;
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <UART6_Init+0x40>)
 800345e:	4a0f      	ldr	r2, [pc, #60]	; (800349c <UART6_Init+0x44>)
 8003460:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8003462:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <UART6_Init+0x40>)
 8003464:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003468:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <UART6_Init+0x40>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <UART6_Init+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <UART6_Init+0x40>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <UART6_Init+0x40>)
 800347e:	220c      	movs	r2, #12
 8003480:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <UART6_Init+0x40>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <UART6_Init+0x40>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart6);
 800348e:	4802      	ldr	r0, [pc, #8]	; (8003498 <UART6_Init+0x40>)
 8003490:	f7fe fed6 	bl	8002240 <HAL_UART_Init>

}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}
 8003498:	200132bc 	.word	0x200132bc
 800349c:	40011400 	.word	0x40011400

080034a0 <DMA_Init>:

/**
  * Enable DMA controller clock
  */
void DMA_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __DMA2_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	4a18      	ldr	r2, [pc, #96]	; (800350c <DMA_Init+0x6c>)
 80034ac:	4b17      	ldr	r3, [pc, #92]	; (800350c <DMA_Init+0x6c>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <DMA_Init+0x6c>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2100      	movs	r1, #0
 80034c6:	203a      	movs	r0, #58	; 0x3a
 80034c8:	f7fd f8a3 	bl	8000612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80034cc:	203a      	movs	r0, #58	; 0x3a
 80034ce:	f7fd f8bc 	bl	800064a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	2044      	movs	r0, #68	; 0x44
 80034d8:	f7fd f89b 	bl	8000612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80034dc:	2044      	movs	r0, #68	; 0x44
 80034de:	f7fd f8b4 	bl	800064a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2100      	movs	r1, #0
 80034e6:	2045      	movs	r0, #69	; 0x45
 80034e8:	f7fd f893 	bl	8000612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80034ec:	2045      	movs	r0, #69	; 0x45
 80034ee:	f7fd f8ac 	bl	800064a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2100      	movs	r1, #0
 80034f6:	2046      	movs	r0, #70	; 0x46
 80034f8:	f7fd f88b 	bl	8000612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80034fc:	2046      	movs	r0, #70	; 0x46
 80034fe:	f7fd f8a4 	bl	800064a <HAL_NVIC_EnableIRQ>

}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <LP_Init>:


__IO uint32_t uwCounter = 0;

void LP_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
	/* Enable Power Clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <LP_Init+0x94>)
 800351c:	4b21      	ldr	r3, [pc, #132]	; (80035a4 <LP_Init+0x94>)
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <LP_Init+0x94>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]

	/* Check and handle if the system was resumed from Standby mode */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8003532:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <LP_Init+0x98>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b02      	cmp	r3, #2
 800353c:	d10c      	bne.n	8003558 <LP_Init+0x48>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800353e:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <LP_Init+0x98>)
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <LP_Init+0x98>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f043 0308 	orr.w	r3, r3, #8
 8003548:	6013      	str	r3, [r2, #0]

		/* Infinite loop */
		while (1) {
			/* Toggle LED2 */
			BSP_LED_Toggle(LED2);
 800354a:	2000      	movs	r0, #0
 800354c:	f7fc fe96 	bl	800027c <BSP_LED_Toggle>

			/* Insert a 100ms delay */
			HAL_Delay(100);
 8003550:	2064      	movs	r0, #100	; 0x64
 8003552:	f7fc ff6b 	bl	800042c <HAL_Delay>
			BSP_LED_Toggle(LED2);
 8003556:	e7f8      	b.n	800354a <LP_Init+0x3a>
		}
	}

	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8003558:	2100      	movs	r1, #0
 800355a:	2000      	movs	r0, #0
 800355c:	f7fc fea2 	bl	80002a4 <BSP_PB_Init>

	/* Wait until USER button is pressed to enter the Low Power mode */
	while (BSP_PB_GetState(BUTTON_KEY) != RESET) {
 8003560:	e006      	b.n	8003570 <LP_Init+0x60>
		/* Toggle LED2 */
		BSP_LED_Toggle(LED2);
 8003562:	2000      	movs	r0, #0
 8003564:	f7fc fe8a 	bl	800027c <BSP_LED_Toggle>

		/* Insert 1s Delay */
		HAL_Delay(1000);
 8003568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800356c:	f7fc ff5e 	bl	800042c <HAL_Delay>
	while (BSP_PB_GetState(BUTTON_KEY) != RESET) {
 8003570:	2000      	movs	r0, #0
 8003572:	f7fc feed 	bl	8000350 <BSP_PB_GetState>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f2      	bne.n	8003562 <LP_Init+0x52>
	}

	/* Loop while USER Button is maintained pressed */
	while (BSP_PB_GetState(BUTTON_KEY) == RESET) {
 800357c:	bf00      	nop
 800357e:	2000      	movs	r0, #0
 8003580:	f7fc fee6 	bl	8000350 <BSP_PB_GetState>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f9      	beq.n	800357e <LP_Init+0x6e>
      - HSI, HSE OFF and LSI OFF if not used as RTC Clock source
      - No IWDG
      - FLASH in deep power down mode
      - Automatic Wake-up using RTC clocked by LSI (after ~20s)
   */
  StopMode_Measure();
 800358a:	f000 f843 	bl	8003614 <StopMode_Measure>
      - Automatic Wake-up using RTC clocked by LSI (after ~20s)
  */
  StandbyRTCBKPSRAMMode_Measure();
#endif

	if (uwCounter != 0) {
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <LP_Init+0x9c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <LP_Init+0x8c>
		BSP_LED_Init(LED2);
 8003596:	2000      	movs	r0, #0
 8003598:	f7fc fe26 	bl	80001e8 <BSP_LED_Init>
	}

}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40007000 	.word	0x40007000
 80035ac:	200000a4 	.word	0x200000a4

080035b0 <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80035b4:	f7fc ff20 	bl	80003f8 <HAL_IncTick>
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback
  * @param  hrtc : hrtc handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* NOTE : add the specific code to handle the RTC wake up interrupt */
  uwCounter = 1;
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
  imprimir("RTC callback");
 80035ca:	4804      	ldr	r0, [pc, #16]	; (80035dc <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 80035cc:	f000 f946 	bl	800385c <imprimir>
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200000a4 	.word	0x200000a4
 80035dc:	08003dec 	.word	0x08003dec

080035e0 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
  /* Configure LED2 */
  BSP_LED_Init(LED2);
 80035ea:	2000      	movs	r0, #0
 80035ec:	f7fc fdfc 	bl	80001e8 <BSP_LED_Init>
  /* NOTE : add the specific code to handle the wake up button interrupt */
  if(GPIO_Pin == KEY_BUTTON_PIN)
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f6:	d105      	bne.n	8003604 <HAL_GPIO_EXTI_Callback+0x24>
  {
    uwCounter = 2;
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <HAL_GPIO_EXTI_Callback+0x2c>)
 80035fa:	2202      	movs	r2, #2
 80035fc:	601a      	str	r2, [r3, #0]
    imprimir("GPIO callback");
 80035fe:	4804      	ldr	r0, [pc, #16]	; (8003610 <HAL_GPIO_EXTI_Callback+0x30>)
 8003600:	f000 f92c 	bl	800385c <imprimir>
  }
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	200000a4 	.word	0x200000a4
 8003610:	08003dfc 	.word	0x08003dfc

08003614 <StopMode_Measure>:
  *           - Automatic Wakeup using RTC clocked by LSE/LSI (~20s)
  * @param  None
  * @retval None
  */
void StopMode_Measure(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	4a55      	ldr	r2, [pc, #340]	; (8003774 <StopMode_Measure+0x160>)
 8003620:	4b54      	ldr	r3, [pc, #336]	; (8003774 <StopMode_Measure+0x160>)
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b52      	ldr	r3, [pc, #328]	; (8003774 <StopMode_Measure+0x160>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4a4e      	ldr	r2, [pc, #312]	; (8003774 <StopMode_Measure+0x160>)
 800363c:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <StopMode_Measure+0x160>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	6313      	str	r3, [r2, #48]	; 0x30
 8003646:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <StopMode_Measure+0x160>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	4a47      	ldr	r2, [pc, #284]	; (8003774 <StopMode_Measure+0x160>)
 8003658:	4b46      	ldr	r3, [pc, #280]	; (8003774 <StopMode_Measure+0x160>)
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b44      	ldr	r3, [pc, #272]	; (8003774 <StopMode_Measure+0x160>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	4a40      	ldr	r2, [pc, #256]	; (8003774 <StopMode_Measure+0x160>)
 8003674:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <StopMode_Measure+0x160>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <StopMode_Measure+0x160>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368a:	2303      	movs	r3, #3
 800368c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800368e:	2303      	movs	r3, #3
 8003690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8003696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800369a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	4619      	mov	r1, r3
 80036a2:	4835      	ldr	r0, [pc, #212]	; (8003778 <StopMode_Measure+0x164>)
 80036a4:	f7fd fb90 	bl	8000dc8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	4619      	mov	r1, r3
 80036ae:	4833      	ldr	r0, [pc, #204]	; (800377c <StopMode_Measure+0x168>)
 80036b0:	f7fd fb8a 	bl	8000dc8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b4:	f107 0314 	add.w	r3, r7, #20
 80036b8:	4619      	mov	r1, r3
 80036ba:	4831      	ldr	r0, [pc, #196]	; (8003780 <StopMode_Measure+0x16c>)
 80036bc:	f7fd fb84 	bl	8000dc8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	4619      	mov	r1, r3
 80036c6:	482f      	ldr	r0, [pc, #188]	; (8003784 <StopMode_Measure+0x170>)
 80036c8:	f7fd fb7e 	bl	8000dc8 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80036cc:	4a29      	ldr	r2, [pc, #164]	; (8003774 <StopMode_Measure+0x160>)
 80036ce:	4b29      	ldr	r3, [pc, #164]	; (8003774 <StopMode_Measure+0x160>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80036d8:	4a26      	ldr	r2, [pc, #152]	; (8003774 <StopMode_Measure+0x160>)
 80036da:	4b26      	ldr	r3, [pc, #152]	; (8003774 <StopMode_Measure+0x160>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f023 0302 	bic.w	r3, r3, #2
 80036e2:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_DISABLE();
 80036e4:	4a23      	ldr	r2, [pc, #140]	; (8003774 <StopMode_Measure+0x160>)
 80036e6:	4b23      	ldr	r3, [pc, #140]	; (8003774 <StopMode_Measure+0x160>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f023 0304 	bic.w	r3, r3, #4
 80036ee:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80036f0:	4a20      	ldr	r2, [pc, #128]	; (8003774 <StopMode_Measure+0x160>)
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <StopMode_Measure+0x160>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fa:	6313      	str	r3, [r2, #48]	; 0x30
  - Asynch Prediv = Value according to source clock
  - Synch Prediv = Value according to source clock
  - OutPut = Output Disable
  - OutPutPolarity = High Polarity
  - OutPutType = Open Drain */
  RTCHandle.Instance = RTC;
 80036fc:	4b22      	ldr	r3, [pc, #136]	; (8003788 <StopMode_Measure+0x174>)
 80036fe:	4a23      	ldr	r2, [pc, #140]	; (800378c <StopMode_Measure+0x178>)
 8003700:	601a      	str	r2, [r3, #0]
  RTCHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8003702:	4b21      	ldr	r3, [pc, #132]	; (8003788 <StopMode_Measure+0x174>)
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]
  RTCHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 8003708:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <StopMode_Measure+0x174>)
 800370a:	227f      	movs	r2, #127	; 0x7f
 800370c:	609a      	str	r2, [r3, #8]
  RTCHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 800370e:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <StopMode_Measure+0x174>)
 8003710:	f44f 7298 	mov.w	r2, #304	; 0x130
 8003714:	60da      	str	r2, [r3, #12]
  RTCHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003716:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <StopMode_Measure+0x174>)
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
  RTCHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <StopMode_Measure+0x174>)
 800371e:	2200      	movs	r2, #0
 8003720:	615a      	str	r2, [r3, #20]
  RTCHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003722:	4b19      	ldr	r3, [pc, #100]	; (8003788 <StopMode_Measure+0x174>)
 8003724:	2200      	movs	r2, #0
 8003726:	619a      	str	r2, [r3, #24]

  if(HAL_RTC_Init(&RTCHandle) != HAL_OK)
 8003728:	4817      	ldr	r0, [pc, #92]	; (8003788 <StopMode_Measure+0x174>)
 800372a:	f7fe fa9d 	bl	8001c68 <HAL_RTC_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <StopMode_Measure+0x124>
  {
    /* Initialization Error */
    Error_Handler();
 8003734:	f000 f904 	bl	8003940 <Error_Handler>
        Wakeup Time Base = 16 /(~32.768KHz) = ~0,488 ms
        Wakeup Time = ~20s = 0,488ms  * WakeUpCounter
        ==> WakeUpCounter = ~20s/0,488ms = 40983 = 0xA017 */

  /* Disable Wake-up timer */
  HAL_RTCEx_DeactivateWakeUpTimer(&RTCHandle);
 8003738:	4813      	ldr	r0, [pc, #76]	; (8003788 <StopMode_Measure+0x174>)
 800373a:	f7fe fc07 	bl	8001f4c <HAL_RTCEx_DeactivateWakeUpTimer>

  /* Enable Wake-up timer */
  HAL_RTCEx_SetWakeUpTimer_IT(&RTCHandle, (0xA000-1), RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800373e:	2200      	movs	r2, #0
 8003740:	f649 71ff 	movw	r1, #40959	; 0x9fff
 8003744:	4810      	ldr	r0, [pc, #64]	; (8003788 <StopMode_Measure+0x174>)
 8003746:	f7fe fb41 	bl	8001dcc <HAL_RTCEx_SetWakeUpTimer_IT>

  /* FLASH Deep Power Down Mode enabled */
  HAL_PWREx_EnableFlashPowerDown();
 800374a:	f7fd fd47 	bl	80011dc <HAL_PWREx_EnableFlashPowerDown>

  /*## Enter Stop Mode #######################################################*/
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800374e:	2101      	movs	r1, #1
 8003750:	2001      	movs	r0, #1
 8003752:	f7fd fd17 	bl	8001184 <HAL_PWR_EnterSTOPMode>

  /* Configures system clock after wake-up from STOP: enable HSI, PLL and select
  PLL as system clock source (HSI and PLL are disabled in STOP mode) */
  SYSCLKConfig_STOP();
 8003756:	f000 f81b 	bl	8003790 <SYSCLKConfig_STOP>

  /* Disable Wake-up timer */
  if(HAL_RTCEx_DeactivateWakeUpTimer(&RTCHandle) != HAL_OK)
 800375a:	480b      	ldr	r0, [pc, #44]	; (8003788 <StopMode_Measure+0x174>)
 800375c:	f7fe fbf6 	bl	8001f4c <HAL_RTCEx_DeactivateWakeUpTimer>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <StopMode_Measure+0x156>
  {
    /* Initialization Error */
    Error_Handler();
 8003766:	f000 f8eb 	bl	8003940 <Error_Handler>
  }
}
 800376a:	bf00      	nop
 800376c:	3728      	adds	r7, #40	; 0x28
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	40020800 	.word	0x40020800
 800377c:	40021c00 	.word	0x40021c00
 8003780:	40020000 	.word	0x40020000
 8003784:	40020400 	.word	0x40020400
 8003788:	20013394 	.word	0x20013394
 800378c:	40002800 	.word	0x40002800

08003790 <SYSCLKConfig_STOP>:
  *         and select PLL as system clock source.
  * @param  None
  * @retval None
  */
static void SYSCLKConfig_STOP(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b092      	sub	sp, #72	; 0x48
 8003794:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  uint32_t pFLatency = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	603b      	str	r3, [r7, #0]

  /* Get the Oscillators configuration according to the internal RCC registers */
  HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe f973 	bl	8001a88 <HAL_RCC_GetOscConfig>

  /* After wake-up from STOP reconfigure the system clock: Enable HSI and PLL */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037a2:	2302      	movs	r3, #2
 80037a4:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037a6:	2301      	movs	r3, #1
 80037a8:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037aa:	2302      	movs	r3, #2
 80037ac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80037ae:	2310      	movs	r3, #16
 80037b0:	617b      	str	r3, [r7, #20]
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fd fd2d 	bl	8001214 <HAL_RCC_OscConfig>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <SYSCLKConfig_STOP+0x34>
  {
    Error_Handler();
 80037c0:	f000 f8be 	bl	8003940 <Error_Handler>
  }

  /* Get the Clocks configuration according to the internal RCC registers */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, &pFLatency);
 80037c4:	463a      	mov	r2, r7
 80037c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe fa19 	bl	8001c04 <HAL_RCC_GetClockConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80037d2:	2301      	movs	r3, #1
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d6:	2302      	movs	r3, #2
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, pFLatency) != HAL_OK)
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd ff70 	bl	80016c8 <HAL_RCC_ClockConfig>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <SYSCLKConfig_STOP+0x62>
  {
    Error_Handler();
 80037ee:	f000 f8a7 	bl	8003940 <Error_Handler>
  }
}
 80037f2:	bf00      	nop
 80037f4:	3748      	adds	r7, #72	; 0x48
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <main>:
char pars[80];
char parsingGPS[5] = "HOLII";

__attribute__((__section__(".user_data"))) const char userConfig[64];

int main(void) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0

	/* MCU Configuration----------------------------------------------------------*/
	uint32_t delay;

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003800:	f7fc fdbc 	bl	800037c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003804:	f000 f840 	bl	8003888 <SystemClock_Config>

	GPIO_Init();
 8003808:	f7ff fda8 	bl	800335c <GPIO_Init>
	BSP_LED_Init(LED2);
 800380c:	2000      	movs	r0, #0
 800380e:	f7fc fceb 	bl	80001e8 <BSP_LED_Init>

	UART2_Init();
 8003812:	f7ff fdfd 	bl	8003410 <UART2_Init>
	DMA_Init();
 8003816:	f7ff fe43 	bl	80034a0 <DMA_Init>
	UART6_Init();
 800381a:	f7ff fe1d 	bl	8003458 <UART6_Init>
	UART1_Init();
 800381e:	f7ff fdd3 	bl	80033c8 <UART1_Init>

	imprimir("\r\nCOMIENZO PROGRAMA\r\n");
 8003822:	480c      	ldr	r0, [pc, #48]	; (8003854 <main+0x58>)
 8003824:	f000 f81a 	bl	800385c <imprimir>

	inicializar_gps();
 8003828:	f7ff fc94 	bl	8003154 <inicializar_gps>

	read_buffer();
 800382c:	f7ff fc74 	bl	8003118 <read_buffer>

	send_ATCommand_DMA("AT\r\n");
 8003830:	4809      	ldr	r0, [pc, #36]	; (8003858 <main+0x5c>)
 8003832:	f7ff fc49 	bl	80030c8 <send_ATCommand_DMA>
	HAL_Delay(1000);
 8003836:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800383a:	f7fc fdf7 	bl	800042c <HAL_Delay>

	LP_Init();
 800383e:	f7ff fe67 	bl	8003510 <LP_Init>
//	delay = TimeoutCalculation((hwwdg.Init.Counter - hwwdg.Init.Window) + 1) +  1;


	while (1) {
		/* Toggle LED2 */
		BSP_LED_Toggle(LED2);
 8003842:	2000      	movs	r0, #0
 8003844:	f7fc fd1a 	bl	800027c <BSP_LED_Toggle>
		//HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)"HOLAAAA", (uint8_t *)pars, 7, 5000);
//		imprimir("main loop");
		/* Insert calculated delay */
//		HAL_Delay(delay);

		HAL_Delay(3000);
 8003848:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800384c:	f7fc fdee 	bl	800042c <HAL_Delay>
		BSP_LED_Toggle(LED2);
 8003850:	e7f7      	b.n	8003842 <main+0x46>
 8003852:	bf00      	nop
 8003854:	08003e0c 	.word	0x08003e0c
 8003858:	08003e24 	.word	0x08003e24

0800385c <imprimir>:
//	}
//	HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, (uint64_t)data);
//	HAL_FLASH_Lock();
}

void imprimir(char* msg){
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7fc fcb7 	bl	80001d8 <strlen>
 800386a:	4603      	mov	r3, r0
 800386c:	b29a      	uxth	r2, r3
 800386e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4803      	ldr	r0, [pc, #12]	; (8003884 <imprimir+0x28>)
 8003876:	f7fe fd30 	bl	80022da <HAL_UART_Transmit>

}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20013354 	.word	0x20013354

08003888 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b094      	sub	sp, #80	; 0x50
 800388c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	4a29      	ldr	r2, [pc, #164]	; (8003938 <SystemClock_Config+0xb0>)
 8003894:	4b28      	ldr	r3, [pc, #160]	; (8003938 <SystemClock_Config+0xb0>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b26      	ldr	r3, [pc, #152]	; (8003938 <SystemClock_Config+0xb0>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	4a23      	ldr	r2, [pc, #140]	; (800393c <SystemClock_Config+0xb4>)
 80038b0:	4b22      	ldr	r3, [pc, #136]	; (800393c <SystemClock_Config+0xb4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80038b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b1f      	ldr	r3, [pc, #124]	; (800393c <SystemClock_Config+0xb4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038c6:	607b      	str	r3, [r7, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038ca:	2302      	movs	r3, #2
 80038cc:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038ce:	2301      	movs	r3, #1
 80038d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80038d2:	2310      	movs	r3, #16
 80038d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038d6:	2302      	movs	r3, #2
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038da:	2300      	movs	r3, #0
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 80038de:	2310      	movs	r3, #16
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80038e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80038e8:	2304      	movs	r3, #4
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80038ec:	2307      	movs	r3, #7
 80038ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038f0:	f107 030c 	add.w	r3, r7, #12
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd fc8d 	bl	8001214 <HAL_RCC_OscConfig>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003900:	f000 f81e 	bl	8003940 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003904:	230f      	movs	r3, #15
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003908:	2302      	movs	r3, #2
 800390a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800390c:	2300      	movs	r3, #0
 800390e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003916:	2300      	movs	r3, #0
 8003918:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800391a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800391e:	2103      	movs	r1, #3
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd fed1 	bl	80016c8 <HAL_RCC_ClockConfig>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800392c:	f000 f808 	bl	8003940 <Error_Handler>
//
//  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
//
//  /* SysTick_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}
 8003930:	bf00      	nop
 8003932:	3750      	adds	r7, #80	; 0x50
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40023800 	.word	0x40023800
 800393c:	40007000 	.word	0x40007000

08003940 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Turn LED3 on */
  BSP_LED_On(LED2);
 8003944:	2000      	movs	r0, #0
 8003946:	f7fc fc85 	bl	8000254 <BSP_LED_On>

  while(1)
 800394a:	e7fe      	b.n	800394a <Error_Handler+0xa>

0800394c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800394c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003984 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003950:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003952:	e003      	b.n	800395c <LoopCopyDataInit>

08003954 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003956:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003958:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800395a:	3104      	adds	r1, #4

0800395c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800395c:	480b      	ldr	r0, [pc, #44]	; (800398c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003960:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003962:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003964:	d3f6      	bcc.n	8003954 <CopyDataInit>
  ldr  r2, =_sbss
 8003966:	4a0b      	ldr	r2, [pc, #44]	; (8003994 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003968:	e002      	b.n	8003970 <LoopFillZerobss>

0800396a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800396a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800396c:	f842 3b04 	str.w	r3, [r2], #4

08003970 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003972:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003974:	d3f9      	bcc.n	800396a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003976:	f000 f9b7 	bl	8003ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800397a:	f000 f9eb 	bl	8003d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800397e:	f7ff ff3d 	bl	80037fc <main>
  bx  lr    
 8003982:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003984:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003988:	08003e54 	.word	0x08003e54
  ldr  r0, =_sdata
 800398c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003990:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8003994:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003998:	20013534 	.word	0x20013534

0800399c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800399c:	e7fe      	b.n	800399c <ADC_IRQHandler>

0800399e <HAL_MspInit>:

/**
 * Initializes the Global MSP.
 */

void HAL_MspInit(void) {
 800399e:	b580      	push	{r7, lr}
 80039a0:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a2:	2003      	movs	r0, #3
 80039a4:	f7fc fe2a 	bl	80005fc <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2100      	movs	r1, #0
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	f7fc fe2f 	bl	8000612 <HAL_NVIC_SetPriority>
}
 80039b4:	bf00      	nop
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	; 0x28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	if (huart->Instance == USART1) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a8f      	ldr	r2, [pc, #572]	; (8003c04 <HAL_UART_MspInit+0x24c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d173      	bne.n	8003ab2 <HAL_UART_MspInit+0xfa>
		/* Peripheral clock enable */
		__USART1_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	4a8e      	ldr	r2, [pc, #568]	; (8003c08 <HAL_UART_MspInit+0x250>)
 80039d0:	4b8d      	ldr	r3, [pc, #564]	; (8003c08 <HAL_UART_MspInit+0x250>)
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	f043 0310 	orr.w	r3, r3, #16
 80039d8:	6453      	str	r3, [r2, #68]	; 0x44
 80039da:	4b8b      	ldr	r3, [pc, #556]	; (8003c08 <HAL_UART_MspInit+0x250>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	693b      	ldr	r3, [r7, #16]

		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80039e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039ea:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ec:	2302      	movs	r3, #2
 80039ee:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039f0:	2301      	movs	r3, #1
 80039f2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80039f4:	2303      	movs	r3, #3
 80039f6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039f8:	2307      	movs	r3, #7
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	4619      	mov	r1, r3
 8003a02:	4882      	ldr	r0, [pc, #520]	; (8003c0c <HAL_UART_MspInit+0x254>)
 8003a04:	f7fd f9e0 	bl	8000dc8 <HAL_GPIO_Init>

	    /* Peripheral DMA init*/

	    hdma_usart1_rx.Instance = DMA2_Stream5;
 8003a08:	4b81      	ldr	r3, [pc, #516]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a0a:	4a82      	ldr	r2, [pc, #520]	; (8003c14 <HAL_UART_MspInit+0x25c>)
 8003a0c:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003a0e:	4b80      	ldr	r3, [pc, #512]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a14:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a16:	4b7e      	ldr	r3, [pc, #504]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a1c:	4b7c      	ldr	r3, [pc, #496]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a22:	4b7b      	ldr	r3, [pc, #492]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a28:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a2a:	4b79      	ldr	r3, [pc, #484]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a30:	4b77      	ldr	r3, [pc, #476]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003a36:	4b76      	ldr	r3, [pc, #472]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3c:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a3e:	4b74      	ldr	r3, [pc, #464]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a44:	4b72      	ldr	r3, [pc, #456]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
	    HAL_DMA_Init(&hdma_usart1_rx);
 8003a4a:	4871      	ldr	r0, [pc, #452]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a4c:	f7fc fe1e 	bl	800068c <HAL_DMA_Init>

	    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a6f      	ldr	r2, [pc, #444]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34
 8003a56:	4a6e      	ldr	r2, [pc, #440]	; (8003c10 <HAL_UART_MspInit+0x258>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6393      	str	r3, [r2, #56]	; 0x38

	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003a5c:	4b6e      	ldr	r3, [pc, #440]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003a5e:	4a6f      	ldr	r2, [pc, #444]	; (8003c1c <HAL_UART_MspInit+0x264>)
 8003a60:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003a62:	4b6d      	ldr	r3, [pc, #436]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003a64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a68:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a6a:	4b6b      	ldr	r3, [pc, #428]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003a6c:	2240      	movs	r2, #64	; 0x40
 8003a6e:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a70:	4b69      	ldr	r3, [pc, #420]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a76:	4b68      	ldr	r3, [pc, #416]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a7c:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a7e:	4b66      	ldr	r3, [pc, #408]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a84:	4b64      	ldr	r3, [pc, #400]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8003a8a:	4b63      	ldr	r3, [pc, #396]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a90:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a92:	4b61      	ldr	r3, [pc, #388]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a98:	4b5f      	ldr	r3, [pc, #380]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24
	    HAL_DMA_Init(&hdma_usart1_tx);
 8003a9e:	485e      	ldr	r0, [pc, #376]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003aa0:	f7fc fdf4 	bl	800068c <HAL_DMA_Init>

	    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a5c      	ldr	r2, [pc, #368]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003aa8:	631a      	str	r2, [r3, #48]	; 0x30
 8003aaa:	4a5b      	ldr	r2, [pc, #364]	; (8003c18 <HAL_UART_MspInit+0x260>)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6393      	str	r3, [r2, #56]	; 0x38

//		/* Peripheral interrupt init*/
//		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
//		HAL_NVIC_EnableIRQ(USART6_IRQn);
	}
}
 8003ab0:	e0a4      	b.n	8003bfc <HAL_UART_MspInit+0x244>
	} else if (huart->Instance == USART2) {
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a5a      	ldr	r2, [pc, #360]	; (8003c20 <HAL_UART_MspInit+0x268>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d128      	bne.n	8003b0e <HAL_UART_MspInit+0x156>
		__USART2_CLK_ENABLE();
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	4a51      	ldr	r2, [pc, #324]	; (8003c08 <HAL_UART_MspInit+0x250>)
 8003ac2:	4b51      	ldr	r3, [pc, #324]	; (8003c08 <HAL_UART_MspInit+0x250>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aca:	6413      	str	r3, [r2, #64]	; 0x40
 8003acc:	4b4e      	ldr	r3, [pc, #312]	; (8003c08 <HAL_UART_MspInit+0x250>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ad8:	2304      	movs	r3, #4
 8003ada:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003adc:	2302      	movs	r3, #2
 8003ade:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ae8:	2307      	movs	r3, #7
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	4619      	mov	r1, r3
 8003af2:	4846      	ldr	r0, [pc, #280]	; (8003c0c <HAL_UART_MspInit+0x254>)
 8003af4:	f7fd f968 	bl	8000dc8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003af8:	2308      	movs	r3, #8
 8003afa:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003afc:	2307      	movs	r3, #7
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	4619      	mov	r1, r3
 8003b06:	4841      	ldr	r0, [pc, #260]	; (8003c0c <HAL_UART_MspInit+0x254>)
 8003b08:	f7fd f95e 	bl	8000dc8 <HAL_GPIO_Init>
}
 8003b0c:	e076      	b.n	8003bfc <HAL_UART_MspInit+0x244>
	} else if (huart->Instance == USART6) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a44      	ldr	r2, [pc, #272]	; (8003c24 <HAL_UART_MspInit+0x26c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d171      	bne.n	8003bfc <HAL_UART_MspInit+0x244>
		__USART6_CLK_ENABLE();
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	4a3a      	ldr	r2, [pc, #232]	; (8003c08 <HAL_UART_MspInit+0x250>)
 8003b1e:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <HAL_UART_MspInit+0x250>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f043 0320 	orr.w	r3, r3, #32
 8003b26:	6453      	str	r3, [r2, #68]	; 0x44
 8003b28:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_UART_MspInit+0x250>)
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003b34:	23c0      	movs	r3, #192	; 0xc0
 8003b36:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL; //GPIO_PULLUP?
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003b40:	2303      	movs	r3, #3
 8003b42:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b44:	2308      	movs	r3, #8
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b48:	f107 0314 	add.w	r3, r7, #20
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4836      	ldr	r0, [pc, #216]	; (8003c28 <HAL_UART_MspInit+0x270>)
 8003b50:	f7fd f93a 	bl	8000dc8 <HAL_GPIO_Init>
		hdma_usart6_rx.Instance = DMA2_Stream2;
 8003b54:	4b35      	ldr	r3, [pc, #212]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003b56:	4a36      	ldr	r2, [pc, #216]	; (8003c30 <HAL_UART_MspInit+0x278>)
 8003b58:	601a      	str	r2, [r3, #0]
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003b5a:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003b5c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003b60:	605a      	str	r2, [r3, #4]
		hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b62:	4b32      	ldr	r3, [pc, #200]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	609a      	str	r2, [r3, #8]
		hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b68:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	60da      	str	r2, [r3, #12]
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b6e:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b74:	611a      	str	r2, [r3, #16]
		hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b76:	4b2d      	ldr	r3, [pc, #180]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	615a      	str	r2, [r3, #20]
		hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	619a      	str	r2, [r3, #24]
		hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003b82:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b88:	61da      	str	r2, [r3, #28]
		hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b8a:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	621a      	str	r2, [r3, #32]
		hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b90:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_DMA_Init(&hdma_usart6_rx);
 8003b96:	4825      	ldr	r0, [pc, #148]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003b98:	f7fc fd78 	bl	800068c <HAL_DMA_Init>
		__HAL_LINKDMA(huart, hdmarx, hdma_usart6_rx);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a23      	ldr	r2, [pc, #140]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003ba0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ba2:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <HAL_UART_MspInit+0x274>)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6393      	str	r3, [r2, #56]	; 0x38
		hdma_usart6_tx.Instance = DMA2_Stream6;
 8003ba8:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003baa:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <HAL_UART_MspInit+0x280>)
 8003bac:	601a      	str	r2, [r3, #0]
		hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003bb0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003bb4:	605a      	str	r2, [r3, #4]
		hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003bb8:	2240      	movs	r2, #64	; 0x40
 8003bba:	609a      	str	r2, [r3, #8]
		hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
		hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bc8:	611a      	str	r2, [r3, #16]
		hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bca:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	615a      	str	r2, [r3, #20]
		hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bd0:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	619a      	str	r2, [r3, #24]
		hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8003bd6:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bdc:	61da      	str	r2, [r3, #28]
		hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	621a      	str	r2, [r3, #32]
		hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003be4:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_DMA_Init(&hdma_usart6_tx);
 8003bea:	4812      	ldr	r0, [pc, #72]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003bec:	f7fc fd4e 	bl	800068c <HAL_DMA_Init>
		__HAL_LINKDMA(huart, hdmatx, hdma_usart6_tx);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a10      	ldr	r2, [pc, #64]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf6:	4a0f      	ldr	r2, [pc, #60]	; (8003c34 <HAL_UART_MspInit+0x27c>)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003bfc:	bf00      	nop
 8003bfe:	3728      	adds	r7, #40	; 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40011000 	.word	0x40011000
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40020000 	.word	0x40020000
 8003c10:	200134d4 	.word	0x200134d4
 8003c14:	40026488 	.word	0x40026488
 8003c18:	20013414 	.word	0x20013414
 8003c1c:	400264b8 	.word	0x400264b8
 8003c20:	40004400 	.word	0x40004400
 8003c24:	40011400 	.word	0x40011400
 8003c28:	40020800 	.word	0x40020800
 8003c2c:	200133b4 	.word	0x200133b4
 8003c30:	40026440 	.word	0x40026440
 8003c34:	20013474 	.word	0x20013474
 8003c38:	400264a0 	.word	0x400264a0

08003c3c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c40:	f7fc fbda 	bl	80003f8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003c44:	f7fc fd1b 	bl	800067e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c48:	bf00      	nop
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&RTCHandle);
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <RTC_WKUP_IRQHandler+0x10>)
 8003c52:	f7fe f9d3 	bl	8001ffc <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20013394 	.word	0x20013394

08003c60 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External line 15_10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* As the following address is invalid (not mapped), a Hardfault exception
  will be generated with an infinite loop and when the WWDG counter falls to 63
  the WWDG reset occurs */
//  *(__IO uint32_t *) 0xA0003000 = 0xFF;
	 HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8003c64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c68:	f7fd fa74 	bl	8001154 <HAL_GPIO_EXTI_IRQHandler>
}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <USART2_IRQHandler+0x10>)
 8003c76:	f7fe fcb5 	bl	80025e4 <HAL_UART_IRQHandler>
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20013354 	.word	0x20013354

08003c84 <DMA2_Stream2_IRQHandler>:

/**
* @brief This function handles DMA2 stream5 global interrupt.
*/
void DMA2_Stream2_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <DMA2_Stream2_IRQHandler+0x10>)
 8003c8a:	f7fc fe2f 	bl	80008ec <HAL_DMA_IRQHandler>
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200133b4 	.word	0x200133b4

08003c98 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream7 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <DMA2_Stream6_IRQHandler+0x10>)
 8003c9e:	f7fc fe25 	bl	80008ec <HAL_DMA_IRQHandler>
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20013474 	.word	0x20013474

08003cac <SPI1_IRQHandler>:

/**
* @brief This function handles SPI1 global interrupt.
*/
void SPI1_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <SPI1_IRQHandler+0x10>)
 8003cb2:	f7fe f9cf 	bl	8002054 <HAL_SPI_IRQHandler>
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	200132fc 	.word	0x200132fc

08003cc0 <DMA2_Stream5_IRQHandler>:

/**
* @brief This function handles DMA2 stream5 global interrupt.
*/
void DMA2_Stream5_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <DMA2_Stream5_IRQHandler+0x10>)
 8003cc6:	f7fc fe11 	bl	80008ec <HAL_DMA_IRQHandler>
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200134d4 	.word	0x200134d4

08003cd4 <DMA2_Stream7_IRQHandler>:

/**
* @brief This function handles DMA2 stream7 global interrupt.
*/
void DMA2_Stream7_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <DMA2_Stream7_IRQHandler+0x10>)
 8003cda:	f7fc fe07 	bl	80008ec <HAL_DMA_IRQHandler>

}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20013414 	.word	0x20013414

08003ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cec:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <SystemInit+0x60>)
 8003cee:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <SystemInit+0x60>)
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003cfc:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <SystemInit+0x64>)
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <SystemInit+0x64>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d08:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <SystemInit+0x64>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003d0e:	4a0f      	ldr	r2, [pc, #60]	; (8003d4c <SystemInit+0x64>)
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <SystemInit+0x64>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <SystemInit+0x64>)
 8003d20:	4a0b      	ldr	r2, [pc, #44]	; (8003d50 <SystemInit+0x68>)
 8003d22:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d24:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <SystemInit+0x64>)
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <SystemInit+0x64>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <SystemInit+0x64>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d36:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <SystemInit+0x60>)
 8003d38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d3c:	609a      	str	r2, [r3, #8]
#endif
}
 8003d3e:	bf00      	nop
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	e000ed00 	.word	0xe000ed00
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	24003010 	.word	0x24003010

08003d54 <__libc_init_array>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	4e0d      	ldr	r6, [pc, #52]	; (8003d8c <__libc_init_array+0x38>)
 8003d58:	4c0d      	ldr	r4, [pc, #52]	; (8003d90 <__libc_init_array+0x3c>)
 8003d5a:	1ba4      	subs	r4, r4, r6
 8003d5c:	10a4      	asrs	r4, r4, #2
 8003d5e:	2500      	movs	r5, #0
 8003d60:	42a5      	cmp	r5, r4
 8003d62:	d109      	bne.n	8003d78 <__libc_init_array+0x24>
 8003d64:	4e0b      	ldr	r6, [pc, #44]	; (8003d94 <__libc_init_array+0x40>)
 8003d66:	4c0c      	ldr	r4, [pc, #48]	; (8003d98 <__libc_init_array+0x44>)
 8003d68:	f000 f820 	bl	8003dac <_init>
 8003d6c:	1ba4      	subs	r4, r4, r6
 8003d6e:	10a4      	asrs	r4, r4, #2
 8003d70:	2500      	movs	r5, #0
 8003d72:	42a5      	cmp	r5, r4
 8003d74:	d105      	bne.n	8003d82 <__libc_init_array+0x2e>
 8003d76:	bd70      	pop	{r4, r5, r6, pc}
 8003d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d7c:	4798      	blx	r3
 8003d7e:	3501      	adds	r5, #1
 8003d80:	e7ee      	b.n	8003d60 <__libc_init_array+0xc>
 8003d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d86:	4798      	blx	r3
 8003d88:	3501      	adds	r5, #1
 8003d8a:	e7f2      	b.n	8003d72 <__libc_init_array+0x1e>
 8003d8c:	08003e4c 	.word	0x08003e4c
 8003d90:	08003e4c 	.word	0x08003e4c
 8003d94:	08003e4c 	.word	0x08003e4c
 8003d98:	08003e50 	.word	0x08003e50

08003d9c <strcpy>:
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003da2:	f803 2b01 	strb.w	r2, [r3], #1
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	d1f9      	bne.n	8003d9e <strcpy+0x2>
 8003daa:	4770      	bx	lr

08003dac <_init>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr

08003db8 <_fini>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	bf00      	nop
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr
