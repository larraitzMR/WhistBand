
WhistBand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018b0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001a48  08001a48  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a60  08001a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a64  08001a64  00011a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000124  20000004  08001a6c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000128  08001a6c  00020128  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fdcb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e5a  00000000  00000000  0002fdff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009e0  00000000  00000000  00031c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000908  00000000  00000000  00032640  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005018  00000000  00000000  00032f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002f96  00000000  00000000  00037f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003aef6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002868  00000000  00000000  0003af74  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0003d7dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001a30 	.word	0x08001a30

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08001a30 	.word	0x08001a30

080001d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001dc:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <HAL_Init+0x40>)
 80001de:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <HAL_Init+0x40>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001e8:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <HAL_Init+0x40>)
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_Init+0x40>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	4a08      	ldr	r2, [pc, #32]	; (8000218 <HAL_Init+0x40>)
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <HAL_Init+0x40>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 f8f1 	bl	80003e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f808 	bl	800021c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800020c:	f001 fae9 	bl	80017e2 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40023c00 	.word	0x40023c00

0800021c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <HAL_InitTick+0x30>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a09      	ldr	r2, [pc, #36]	; (8000250 <HAL_InitTick+0x34>)
 800022a:	fba2 2303 	umull	r2, r3, r2, r3
 800022e:	099b      	lsrs	r3, r3, #6
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f900 	bl	8000436 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000236:	2200      	movs	r2, #0
 8000238:	6879      	ldr	r1, [r7, #4]
 800023a:	f04f 30ff 	mov.w	r0, #4294967295
 800023e:	f000 f8de 	bl	80003fe <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000000 	.word	0x20000000
 8000250:	10624dd3 	.word	0x10624dd3

08000254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick++;
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <HAL_IncTick+0x18>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	3301      	adds	r3, #1
 800025e:	4a03      	ldr	r2, [pc, #12]	; (800026c <HAL_IncTick+0x18>)
 8000260:	6013      	str	r3, [r2, #0]
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	20000020 	.word	0x20000020

08000270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  return uwTick;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <HAL_GetTick+0x14>)
 8000276:	681b      	ldr	r3, [r3, #0]
}
 8000278:	4618      	mov	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20000020 	.word	0x20000020

08000288 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f003 0307 	and.w	r3, r3, #7
 8000296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000298:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <NVIC_SetPriorityGrouping+0x44>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002a4:	4013      	ands	r3, r2
 80002a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002ba:	4a04      	ldr	r2, [pc, #16]	; (80002cc <NVIC_SetPriorityGrouping+0x44>)
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	60d3      	str	r3, [r2, #12]
}
 80002c0:	bf00      	nop
 80002c2:	3714      	adds	r7, #20
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <NVIC_GetPriorityGrouping+0x18>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	0a1b      	lsrs	r3, r3, #8
 80002da:	f003 0307 	and.w	r3, r3, #7
}
 80002de:	4618      	mov	r0, r3
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	6039      	str	r1, [r7, #0]
 80002f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	da0b      	bge.n	8000318 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000300:	490d      	ldr	r1, [pc, #52]	; (8000338 <NVIC_SetPriority+0x4c>)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	3b04      	subs	r3, #4
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000316:	e009      	b.n	800032c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000318:	4908      	ldr	r1, [pc, #32]	; (800033c <NVIC_SetPriority+0x50>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	0112      	lsls	r2, r2, #4
 8000324:	b2d2      	uxtb	r2, r2
 8000326:	440b      	add	r3, r1
 8000328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00
 800033c:	e000e100 	.word	0xe000e100

08000340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000340:	b480      	push	{r7}
 8000342:	b089      	sub	sp, #36	; 0x24
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f003 0307 	and.w	r3, r3, #7
 8000352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000354:	69fb      	ldr	r3, [r7, #28]
 8000356:	f1c3 0307 	rsb	r3, r3, #7
 800035a:	2b04      	cmp	r3, #4
 800035c:	bf28      	it	cs
 800035e:	2304      	movcs	r3, #4
 8000360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	3304      	adds	r3, #4
 8000366:	2b06      	cmp	r3, #6
 8000368:	d902      	bls.n	8000370 <NVIC_EncodePriority+0x30>
 800036a:	69fb      	ldr	r3, [r7, #28]
 800036c:	3b03      	subs	r3, #3
 800036e:	e000      	b.n	8000372 <NVIC_EncodePriority+0x32>
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000374:	2201      	movs	r2, #1
 8000376:	69bb      	ldr	r3, [r7, #24]
 8000378:	fa02 f303 	lsl.w	r3, r2, r3
 800037c:	1e5a      	subs	r2, r3, #1
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	401a      	ands	r2, r3
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000386:	2101      	movs	r1, #1
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	1e59      	subs	r1, r3, #1
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	4313      	orrs	r3, r2
         );
}
 8000396:	4618      	mov	r0, r3
 8000398:	3724      	adds	r7, #36	; 0x24
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
	...

080003a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3b01      	subs	r3, #1
 80003b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b4:	d301      	bcc.n	80003ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003b6:	2301      	movs	r3, #1
 80003b8:	e00f      	b.n	80003da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ba:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <SysTick_Config+0x40>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c2:	210f      	movs	r1, #15
 80003c4:	f04f 30ff 	mov.w	r0, #4294967295
 80003c8:	f7ff ff90 	bl	80002ec <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <SysTick_Config+0x40>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <SysTick_Config+0x40>)
 80003d4:	2207      	movs	r2, #7
 80003d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003d8:	2300      	movs	r3, #0
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	e000e010 	.word	0xe000e010

080003e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f7ff ff49 	bl	8000288 <NVIC_SetPriorityGrouping>
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fe:	b580      	push	{r7, lr}
 8000400:	b086      	sub	sp, #24
 8000402:	af00      	add	r7, sp, #0
 8000404:	4603      	mov	r3, r0
 8000406:	60b9      	str	r1, [r7, #8]
 8000408:	607a      	str	r2, [r7, #4]
 800040a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000410:	f7ff ff5e 	bl	80002d0 <NVIC_GetPriorityGrouping>
 8000414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	68b9      	ldr	r1, [r7, #8]
 800041a:	6978      	ldr	r0, [r7, #20]
 800041c:	f7ff ff90 	bl	8000340 <NVIC_EncodePriority>
 8000420:	4602      	mov	r2, r0
 8000422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000426:	4611      	mov	r1, r2
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff5f 	bl	80002ec <NVIC_SetPriority>
}
 800042e:	bf00      	nop
 8000430:	3718      	adds	r7, #24
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f7ff ffb0 	bl	80003a4 <SysTick_Config>
 8000444:	4603      	mov	r3, r0
}
 8000446:	4618      	mov	r0, r3
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b04      	cmp	r3, #4
 800045c:	d106      	bne.n	800046c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800045e:	4a09      	ldr	r2, [pc, #36]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f043 0304 	orr.w	r3, r3, #4
 8000468:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800046a:	e005      	b.n	8000478 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800046c:	4a05      	ldr	r2, [pc, #20]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800046e:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f023 0304 	bic.w	r3, r3, #4
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	e000e010 	.word	0xe000e010

08000488 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800048c:	f000 f802 	bl	8000494 <HAL_SYSTICK_Callback>
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}

08000494 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
	...

080004a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b089      	sub	sp, #36	; 0x24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
 80004be:	e159      	b.n	8000774 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80004c0:	2201      	movs	r2, #1
 80004c2:	69fb      	ldr	r3, [r7, #28]
 80004c4:	fa02 f303 	lsl.w	r3, r2, r3
 80004c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	4013      	ands	r3, r2
 80004d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80004d4:	693a      	ldr	r2, [r7, #16]
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	429a      	cmp	r2, r3
 80004da:	f040 8148 	bne.w	800076e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d003      	beq.n	80004ee <HAL_GPIO_Init+0x4a>
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	2b12      	cmp	r3, #18
 80004ec:	d123      	bne.n	8000536 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	08da      	lsrs	r2, r3, #3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3208      	adds	r2, #8
 80004f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004fc:	69fb      	ldr	r3, [r7, #28]
 80004fe:	f003 0307 	and.w	r3, r3, #7
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	220f      	movs	r2, #15
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	43db      	mvns	r3, r3
 800050c:	69ba      	ldr	r2, [r7, #24]
 800050e:	4013      	ands	r3, r2
 8000510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	691a      	ldr	r2, [r3, #16]
 8000516:	69fb      	ldr	r3, [r7, #28]
 8000518:	f003 0307 	and.w	r3, r3, #7
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	69ba      	ldr	r2, [r7, #24]
 8000524:	4313      	orrs	r3, r2
 8000526:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	08da      	lsrs	r2, r3, #3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3208      	adds	r2, #8
 8000530:	69b9      	ldr	r1, [r7, #24]
 8000532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	2203      	movs	r2, #3
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	43db      	mvns	r3, r3
 8000548:	69ba      	ldr	r2, [r7, #24]
 800054a:	4013      	ands	r3, r2
 800054c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	f003 0203 	and.w	r2, r3, #3
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	fa02 f303 	lsl.w	r3, r2, r3
 800055e:	69ba      	ldr	r2, [r7, #24]
 8000560:	4313      	orrs	r3, r2
 8000562:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	69ba      	ldr	r2, [r7, #24]
 8000568:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d00b      	beq.n	800058a <HAL_GPIO_Init+0xe6>
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	2b02      	cmp	r3, #2
 8000578:	d007      	beq.n	800058a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800057e:	2b11      	cmp	r3, #17
 8000580:	d003      	beq.n	800058a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	2b12      	cmp	r3, #18
 8000588:	d130      	bne.n	80005ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	2203      	movs	r2, #3
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	43db      	mvns	r3, r3
 800059c:	69ba      	ldr	r2, [r7, #24]
 800059e:	4013      	ands	r3, r2
 80005a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	68da      	ldr	r2, [r3, #12]
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	69ba      	ldr	r2, [r7, #24]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	69ba      	ldr	r2, [r7, #24]
 80005b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005c0:	2201      	movs	r2, #1
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	43db      	mvns	r3, r3
 80005ca:	69ba      	ldr	r2, [r7, #24]
 80005cc:	4013      	ands	r3, r2
 80005ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	091b      	lsrs	r3, r3, #4
 80005d6:	f003 0201 	and.w	r2, r3, #1
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	69ba      	ldr	r2, [r7, #24]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	69ba      	ldr	r2, [r7, #24]
 80005ea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	2203      	movs	r2, #3
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	43db      	mvns	r3, r3
 80005fe:	69ba      	ldr	r2, [r7, #24]
 8000600:	4013      	ands	r3, r2
 8000602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	689a      	ldr	r2, [r3, #8]
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	69ba      	ldr	r2, [r7, #24]
 8000612:	4313      	orrs	r3, r2
 8000614:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	69ba      	ldr	r2, [r7, #24]
 800061a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	2b00      	cmp	r3, #0
 8000626:	f000 80a2 	beq.w	800076e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	4a56      	ldr	r2, [pc, #344]	; (8000788 <HAL_GPIO_Init+0x2e4>)
 8000630:	4b55      	ldr	r3, [pc, #340]	; (8000788 <HAL_GPIO_Init+0x2e4>)
 8000632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000638:	6453      	str	r3, [r2, #68]	; 0x44
 800063a:	4b53      	ldr	r3, [pc, #332]	; (8000788 <HAL_GPIO_Init+0x2e4>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800063e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000646:	4a51      	ldr	r2, [pc, #324]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	089b      	lsrs	r3, r3, #2
 800064c:	3302      	adds	r3, #2
 800064e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	f003 0303 	and.w	r3, r3, #3
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	220f      	movs	r2, #15
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	69ba      	ldr	r2, [r7, #24]
 8000666:	4013      	ands	r3, r2
 8000668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a48      	ldr	r2, [pc, #288]	; (8000790 <HAL_GPIO_Init+0x2ec>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d019      	beq.n	80006a6 <HAL_GPIO_Init+0x202>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a47      	ldr	r2, [pc, #284]	; (8000794 <HAL_GPIO_Init+0x2f0>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d013      	beq.n	80006a2 <HAL_GPIO_Init+0x1fe>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a46      	ldr	r2, [pc, #280]	; (8000798 <HAL_GPIO_Init+0x2f4>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d00d      	beq.n	800069e <HAL_GPIO_Init+0x1fa>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a45      	ldr	r2, [pc, #276]	; (800079c <HAL_GPIO_Init+0x2f8>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d007      	beq.n	800069a <HAL_GPIO_Init+0x1f6>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a44      	ldr	r2, [pc, #272]	; (80007a0 <HAL_GPIO_Init+0x2fc>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d101      	bne.n	8000696 <HAL_GPIO_Init+0x1f2>
 8000692:	2304      	movs	r3, #4
 8000694:	e008      	b.n	80006a8 <HAL_GPIO_Init+0x204>
 8000696:	2307      	movs	r3, #7
 8000698:	e006      	b.n	80006a8 <HAL_GPIO_Init+0x204>
 800069a:	2303      	movs	r3, #3
 800069c:	e004      	b.n	80006a8 <HAL_GPIO_Init+0x204>
 800069e:	2302      	movs	r3, #2
 80006a0:	e002      	b.n	80006a8 <HAL_GPIO_Init+0x204>
 80006a2:	2301      	movs	r3, #1
 80006a4:	e000      	b.n	80006a8 <HAL_GPIO_Init+0x204>
 80006a6:	2300      	movs	r3, #0
 80006a8:	69fa      	ldr	r2, [r7, #28]
 80006aa:	f002 0203 	and.w	r2, r2, #3
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	4093      	lsls	r3, r2
 80006b2:	69ba      	ldr	r2, [r7, #24]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006b8:	4934      	ldr	r1, [pc, #208]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	089b      	lsrs	r3, r3, #2
 80006be:	3302      	adds	r3, #2
 80006c0:	69ba      	ldr	r2, [r7, #24]
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <HAL_GPIO_Init+0x300>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	43db      	mvns	r3, r3
 80006d0:	69ba      	ldr	r2, [r7, #24]
 80006d2:	4013      	ands	r3, r2
 80006d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d003      	beq.n	80006ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80006e2:	69ba      	ldr	r2, [r7, #24]
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80006ea:	4a2e      	ldr	r2, [pc, #184]	; (80007a4 <HAL_GPIO_Init+0x300>)
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006f0:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <HAL_GPIO_Init+0x300>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	43db      	mvns	r3, r3
 80006fa:	69ba      	ldr	r2, [r7, #24]
 80006fc:	4013      	ands	r3, r2
 80006fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000708:	2b00      	cmp	r3, #0
 800070a:	d003      	beq.n	8000714 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	4313      	orrs	r3, r2
 8000712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000714:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <HAL_GPIO_Init+0x300>)
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <HAL_GPIO_Init+0x300>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	43db      	mvns	r3, r3
 8000724:	69ba      	ldr	r2, [r7, #24]
 8000726:	4013      	ands	r3, r2
 8000728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d003      	beq.n	800073e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000736:	69ba      	ldr	r2, [r7, #24]
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	4313      	orrs	r3, r2
 800073c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800073e:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <HAL_GPIO_Init+0x300>)
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <HAL_GPIO_Init+0x300>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	43db      	mvns	r3, r3
 800074e:	69ba      	ldr	r2, [r7, #24]
 8000750:	4013      	ands	r3, r2
 8000752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075c:	2b00      	cmp	r3, #0
 800075e:	d003      	beq.n	8000768 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000760:	69ba      	ldr	r2, [r7, #24]
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	4313      	orrs	r3, r2
 8000766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_GPIO_Init+0x300>)
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3301      	adds	r3, #1
 8000772:	61fb      	str	r3, [r7, #28]
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	2b0f      	cmp	r3, #15
 8000778:	f67f aea2 	bls.w	80004c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800077c:	bf00      	nop
 800077e:	3724      	adds	r7, #36	; 0x24
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40023800 	.word	0x40023800
 800078c:	40013800 	.word	0x40013800
 8000790:	40020000 	.word	0x40020000
 8000794:	40020400 	.word	0x40020400
 8000798:	40020800 	.word	0x40020800
 800079c:	40020c00 	.word	0x40020c00
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40013c00 	.word	0x40013c00

080007a8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d101      	bne.n	80007c2 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e0c8      	b.n	8000954 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d106      	bne.n	80007dc <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f001 f810 	bl	80017fc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2224      	movs	r2, #36	; 0x24
 80007e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	6812      	ldr	r2, [r2, #0]
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	f022 0201 	bic.w	r2, r2, #1
 80007f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80007f4:	f000 fcae 	bl	8001154 <HAL_RCC_GetPCLK1Freq>
 80007f8:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	4a57      	ldr	r2, [pc, #348]	; (800095c <HAL_I2C_Init+0x1b4>)
 80007fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000802:	0c9b      	lsrs	r3, r3, #18
 8000804:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	4952      	ldr	r1, [pc, #328]	; (8000960 <HAL_I2C_Init+0x1b8>)
 8000818:	428b      	cmp	r3, r1
 800081a:	d802      	bhi.n	8000822 <HAL_I2C_Init+0x7a>
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	e009      	b.n	8000836 <HAL_I2C_Init+0x8e>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000828:	fb01 f303 	mul.w	r3, r1, r3
 800082c:	494d      	ldr	r1, [pc, #308]	; (8000964 <HAL_I2C_Init+0x1bc>)
 800082e:	fba1 1303 	umull	r1, r3, r1, r3
 8000832:	099b      	lsrs	r3, r3, #6
 8000834:	3301      	adds	r3, #1
 8000836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6819      	ldr	r1, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	4a47      	ldr	r2, [pc, #284]	; (8000960 <HAL_I2C_Init+0x1b8>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d812      	bhi.n	800086c <HAL_I2C_Init+0xc4>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000856:	2b03      	cmp	r3, #3
 8000858:	d906      	bls.n	8000868 <HAL_I2C_Init+0xc0>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	e045      	b.n	80008f4 <HAL_I2C_Init+0x14c>
 8000868:	2304      	movs	r3, #4
 800086a:	e043      	b.n	80008f4 <HAL_I2C_Init+0x14c>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d10f      	bne.n	8000894 <HAL_I2C_Init+0xec>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	fbb2 f3f3 	udiv	r3, r2, r3
 8000884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf0c      	ite	eq
 800088c:	2301      	moveq	r3, #1
 800088e:	2300      	movne	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	e010      	b.n	80008b6 <HAL_I2C_Init+0x10e>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	685a      	ldr	r2, [r3, #4]
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	009a      	lsls	r2, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf0c      	ite	eq
 80008b0:	2301      	moveq	r3, #1
 80008b2:	2300      	movne	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_I2C_Init+0x116>
 80008ba:	2301      	movs	r3, #1
 80008bc:	e01a      	b.n	80008f4 <HAL_I2C_Init+0x14c>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10a      	bne.n	80008dc <HAL_I2C_Init+0x134>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	4613      	mov	r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	4413      	add	r3, r2
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008da:	e00b      	b.n	80008f4 <HAL_I2C_Init+0x14c>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685a      	ldr	r2, [r3, #4]
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	009a      	lsls	r2, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f4:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	69d1      	ldr	r1, [r2, #28]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	6a12      	ldr	r2, [r2, #32]
 8000902:	430a      	orrs	r2, r1
 8000904:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	6911      	ldr	r1, [r2, #16]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	68d2      	ldr	r2, [r2, #12]
 8000912:	430a      	orrs	r2, r1
 8000914:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	6951      	ldr	r1, [r2, #20]
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	6992      	ldr	r2, [r2, #24]
 8000922:	430a      	orrs	r2, r1
 8000924:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	6812      	ldr	r2, [r2, #0]
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	f042 0201 	orr.w	r2, r2, #1
 8000934:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2220      	movs	r2, #32
 8000940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	431bde83 	.word	0x431bde83
 8000960:	000186a0 	.word	0x000186a0
 8000964:	10624dd3 	.word	0x10624dd3

08000968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	; 0x38
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8000970:	2300      	movs	r3, #0
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d075      	beq.n	8000a6c <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000980:	4ba4      	ldr	r3, [pc, #656]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f003 030c 	and.w	r3, r3, #12
 8000988:	2b04      	cmp	r3, #4
 800098a:	d00c      	beq.n	80009a6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800098c:	4ba1      	ldr	r3, [pc, #644]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000994:	2b08      	cmp	r3, #8
 8000996:	d112      	bne.n	80009be <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000998:	4b9e      	ldr	r3, [pc, #632]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80009a4:	d10b      	bne.n	80009be <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009a6:	4b9b      	ldr	r3, [pc, #620]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d05b      	beq.n	8000a6a <HAL_RCC_OscConfig+0x102>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d157      	bne.n	8000a6a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e224      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009c6:	d106      	bne.n	80009d6 <HAL_RCC_OscConfig+0x6e>
 80009c8:	4a92      	ldr	r2, [pc, #584]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 80009ca:	4b92      	ldr	r3, [pc, #584]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	e01d      	b.n	8000a12 <HAL_RCC_OscConfig+0xaa>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009de:	d10c      	bne.n	80009fa <HAL_RCC_OscConfig+0x92>
 80009e0:	4a8c      	ldr	r2, [pc, #560]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 80009e2:	4b8c      	ldr	r3, [pc, #560]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ea:	6013      	str	r3, [r2, #0]
 80009ec:	4a89      	ldr	r2, [pc, #548]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 80009ee:	4b89      	ldr	r3, [pc, #548]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	e00b      	b.n	8000a12 <HAL_RCC_OscConfig+0xaa>
 80009fa:	4a86      	ldr	r2, [pc, #536]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 80009fc:	4b85      	ldr	r3, [pc, #532]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	4a83      	ldr	r2, [pc, #524]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000a08:	4b82      	ldr	r3, [pc, #520]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a10:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d013      	beq.n	8000a42 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a1a:	f7ff fc29 	bl	8000270 <HAL_GetTick>
 8000a1e:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a20:	e008      	b.n	8000a34 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a22:	f7ff fc25 	bl	8000270 <HAL_GetTick>
 8000a26:	4602      	mov	r2, r0
 8000a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	2b64      	cmp	r3, #100	; 0x64
 8000a2e:	d901      	bls.n	8000a34 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8000a30:	2303      	movs	r3, #3
 8000a32:	e1e9      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a34:	4b77      	ldr	r3, [pc, #476]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0f0      	beq.n	8000a22 <HAL_RCC_OscConfig+0xba>
 8000a40:	e014      	b.n	8000a6c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a42:	f7ff fc15 	bl	8000270 <HAL_GetTick>
 8000a46:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a48:	e008      	b.n	8000a5c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a4a:	f7ff fc11 	bl	8000270 <HAL_GetTick>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	2b64      	cmp	r3, #100	; 0x64
 8000a56:	d901      	bls.n	8000a5c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	e1d5      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a5c:	4b6d      	ldr	r3, [pc, #436]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1f0      	bne.n	8000a4a <HAL_RCC_OscConfig+0xe2>
 8000a68:	e000      	b.n	8000a6c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d077      	beq.n	8000b68 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a78:	4b66      	ldr	r3, [pc, #408]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	f003 030c 	and.w	r3, r3, #12
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00b      	beq.n	8000a9c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a84:	4b63      	ldr	r3, [pc, #396]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	d126      	bne.n	8000ade <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a90:	4b60      	ldr	r3, [pc, #384]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d120      	bne.n	8000ade <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a9c:	4b5d      	ldr	r3, [pc, #372]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d005      	beq.n	8000ab4 <HAL_RCC_OscConfig+0x14c>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d001      	beq.n	8000ab4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e1a9      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ab4:	4857      	ldr	r0, [pc, #348]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000ab6:	4b57      	ldr	r3, [pc, #348]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6919      	ldr	r1, [r3, #16]
 8000ac2:	23f8      	movs	r3, #248	; 0xf8
 8000ac4:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac8:	fa93 f3a3 	rbit	r3, r3
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad0:	fab3 f383 	clz	r3, r3
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000adc:	e044      	b.n	8000b68 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d02a      	beq.n	8000b3c <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ae6:	4b4c      	ldr	r3, [pc, #304]	; (8000c18 <HAL_RCC_OscConfig+0x2b0>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000aec:	f7ff fbc0 	bl	8000270 <HAL_GetTick>
 8000af0:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000af2:	e008      	b.n	8000b06 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000af4:	f7ff fbbc 	bl	8000270 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d901      	bls.n	8000b06 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000b02:	2303      	movs	r3, #3
 8000b04:	e180      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b06:	4b43      	ldr	r3, [pc, #268]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0f0      	beq.n	8000af4 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b12:	4840      	ldr	r0, [pc, #256]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000b14:	4b3f      	ldr	r3, [pc, #252]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6919      	ldr	r1, [r3, #16]
 8000b20:	23f8      	movs	r3, #248	; 0xf8
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b26:	fa93 f3a3 	rbit	r3, r3
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	fab3 f383 	clz	r3, r3
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	6003      	str	r3, [r0, #0]
 8000b3a:	e015      	b.n	8000b68 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b3c:	4b36      	ldr	r3, [pc, #216]	; (8000c18 <HAL_RCC_OscConfig+0x2b0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b42:	f7ff fb95 	bl	8000270 <HAL_GetTick>
 8000b46:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b48:	e008      	b.n	8000b5c <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b4a:	f7ff fb91 	bl	8000270 <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d901      	bls.n	8000b5c <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e155      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1f0      	bne.n	8000b4a <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d030      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d016      	beq.n	8000baa <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <HAL_RCC_OscConfig+0x2b4>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b82:	f7ff fb75 	bl	8000270 <HAL_GetTick>
 8000b86:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b88:	e008      	b.n	8000b9c <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b8a:	f7ff fb71 	bl	8000270 <HAL_GetTick>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d901      	bls.n	8000b9c <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e135      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f0      	beq.n	8000b8a <HAL_RCC_OscConfig+0x222>
 8000ba8:	e015      	b.n	8000bd6 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <HAL_RCC_OscConfig+0x2b4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bb0:	f7ff fb5e 	bl	8000270 <HAL_GetTick>
 8000bb4:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bb6:	e008      	b.n	8000bca <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bb8:	f7ff fb5a 	bl	8000270 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d901      	bls.n	8000bca <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e11e      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f0      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 8086 	beq.w	8000cf0 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <HAL_RCC_OscConfig+0x2ac>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_RCC_OscConfig+0x2b8>)
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_RCC_OscConfig+0x2b8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000c0c:	f7ff fb30 	bl	8000270 <HAL_GetTick>
 8000c10:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000c12:	e010      	b.n	8000c36 <HAL_RCC_OscConfig+0x2ce>
 8000c14:	40023800 	.word	0x40023800
 8000c18:	42470000 	.word	0x42470000
 8000c1c:	42470e80 	.word	0x42470e80
 8000c20:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000c24:	f7ff fb24 	bl	8000270 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e0e8      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000c36:	4b76      	ldr	r3, [pc, #472]	; (8000e10 <HAL_RCC_OscConfig+0x4a8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f0      	beq.n	8000c24 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d106      	bne.n	8000c58 <HAL_RCC_OscConfig+0x2f0>
 8000c4a:	4a72      	ldr	r2, [pc, #456]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000c4c:	4b71      	ldr	r3, [pc, #452]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6713      	str	r3, [r2, #112]	; 0x70
 8000c56:	e01c      	b.n	8000c92 <HAL_RCC_OscConfig+0x32a>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2b05      	cmp	r3, #5
 8000c5e:	d10c      	bne.n	8000c7a <HAL_RCC_OscConfig+0x312>
 8000c60:	4a6c      	ldr	r2, [pc, #432]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000c62:	4b6c      	ldr	r3, [pc, #432]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8000c6c:	4a69      	ldr	r2, [pc, #420]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000c6e:	4b69      	ldr	r3, [pc, #420]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6713      	str	r3, [r2, #112]	; 0x70
 8000c78:	e00b      	b.n	8000c92 <HAL_RCC_OscConfig+0x32a>
 8000c7a:	4a66      	ldr	r2, [pc, #408]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000c7c:	4b65      	ldr	r3, [pc, #404]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6713      	str	r3, [r2, #112]	; 0x70
 8000c86:	4a63      	ldr	r2, [pc, #396]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000c88:	4b62      	ldr	r3, [pc, #392]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c8c:	f023 0304 	bic.w	r3, r3, #4
 8000c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d015      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c9a:	f7ff fae9 	bl	8000270 <HAL_GetTick>
 8000c9e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ca0:	e00a      	b.n	8000cb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ca2:	f7ff fae5 	bl	8000270 <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d901      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e0a7      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cb8:	4b56      	ldr	r3, [pc, #344]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0ee      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x33a>
 8000cc4:	e014      	b.n	8000cf0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cc6:	f7ff fad3 	bl	8000270 <HAL_GetTick>
 8000cca:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ccc:	e00a      	b.n	8000ce4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cce:	f7ff facf 	bl	8000270 <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d901      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e091      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ce4:	4b4b      	ldr	r3, [pc, #300]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1ee      	bne.n	8000cce <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 8086 	beq.w	8000e06 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000cfa:	4b46      	ldr	r3, [pc, #280]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d07d      	beq.n	8000e02 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d162      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d0e:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <HAL_RCC_OscConfig+0x4b0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d14:	f7ff faac 	bl	8000270 <HAL_GetTick>
 8000d18:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d1c:	f7ff faa8 	bl	8000270 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e06c      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d2e:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f0      	bne.n	8000d1c <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d3a:	4836      	ldr	r0, [pc, #216]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69da      	ldr	r2, [r3, #28]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	431a      	orrs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	60fb      	str	r3, [r7, #12]
  return(result);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	fab3 f383 	clz	r3, r3
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	085b      	lsrs	r3, r3, #1
 8000d6a:	1e59      	subs	r1, r3, #1
 8000d6c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000d70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	fa93 f3a3 	rbit	r3, r3
 8000d78:	617b      	str	r3, [r7, #20]
  return(result);
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fab3 f383 	clz	r3, r3
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d8a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	fa93 f3a3 	rbit	r3, r3
 8000d96:	61fb      	str	r3, [r7, #28]
  return(result);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	fab3 f383 	clz	r3, r3
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_RCC_OscConfig+0x4b0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dac:	f7ff fa60 	bl	8000270 <HAL_GetTick>
 8000db0:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db4:	f7ff fa5c 	bl	8000270 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e020      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0x44c>
 8000dd2:	e018      	b.n	8000e06 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <HAL_RCC_OscConfig+0x4b0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dda:	f7ff fa49 	bl	8000270 <HAL_GetTick>
 8000dde:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de2:	f7ff fa45 	bl	8000270 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e009      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_RCC_OscConfig+0x4ac>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1f0      	bne.n	8000de2 <HAL_RCC_OscConfig+0x47a>
 8000e00:	e001      	b.n	8000e06 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3738      	adds	r7, #56	; 0x38
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40007000 	.word	0x40007000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	42470060 	.word	0x42470060

08000e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e2a:	4b81      	ldr	r3, [pc, #516]	; (8001030 <HAL_RCC_ClockConfig+0x214>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 020f 	and.w	r2, r3, #15
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d20c      	bcs.n	8000e52 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e38:	4b7d      	ldr	r3, [pc, #500]	; (8001030 <HAL_RCC_ClockConfig+0x214>)
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e40:	4b7b      	ldr	r3, [pc, #492]	; (8001030 <HAL_RCC_ClockConfig+0x214>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 020f 	and.w	r2, r3, #15
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d001      	beq.n	8000e52 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0ea      	b.n	8001028 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d008      	beq.n	8000e70 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e5e:	4975      	ldr	r1, [pc, #468]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000e60:	4b74      	ldr	r3, [pc, #464]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 8086 	beq.w	8000f8a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d107      	bne.n	8000e96 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e86:	4b6b      	ldr	r3, [pc, #428]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d119      	bne.n	8000ec6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e0c8      	b.n	8001028 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d003      	beq.n	8000ea6 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d107      	bne.n	8000eb6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ea6:	4b63      	ldr	r3, [pc, #396]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d109      	bne.n	8000ec6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e0b8      	b.n	8001028 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb6:	4b5f      	ldr	r3, [pc, #380]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e0b0      	b.n	8001028 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ec6:	495b      	ldr	r1, [pc, #364]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000ec8:	4b5a      	ldr	r3, [pc, #360]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f023 0203 	bic.w	r2, r3, #3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000ed8:	f7ff f9ca 	bl	8000270 <HAL_GetTick>
 8000edc:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d112      	bne.n	8000f0c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee6:	e00a      	b.n	8000efe <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ee8:	f7ff f9c2 	bl	8000270 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e094      	b.n	8001028 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000efe:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d1ee      	bne.n	8000ee8 <HAL_RCC_ClockConfig+0xcc>
 8000f0a:	e03e      	b.n	8000f8a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d112      	bne.n	8000f3a <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f14:	e00a      	b.n	8000f2c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f16:	f7ff f9ab 	bl	8000270 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e07d      	b.n	8001028 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f2c:	4b41      	ldr	r3, [pc, #260]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d1ee      	bne.n	8000f16 <HAL_RCC_ClockConfig+0xfa>
 8000f38:	e027      	b.n	8000f8a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d11d      	bne.n	8000f7e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000f42:	e00a      	b.n	8000f5a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f44:	f7ff f994 	bl	8000270 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e066      	b.n	8001028 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000f5a:	4b36      	ldr	r3, [pc, #216]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b0c      	cmp	r3, #12
 8000f64:	d1ee      	bne.n	8000f44 <HAL_RCC_ClockConfig+0x128>
 8000f66:	e010      	b.n	8000f8a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f68:	f7ff f982 	bl	8000270 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e054      	b.n	8001028 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1ee      	bne.n	8000f68 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <HAL_RCC_ClockConfig+0x214>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 020f 	and.w	r2, r3, #15
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d90c      	bls.n	8000fb2 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f98:	4b25      	ldr	r3, [pc, #148]	; (8001030 <HAL_RCC_ClockConfig+0x214>)
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <HAL_RCC_ClockConfig+0x214>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 020f 	and.w	r2, r3, #15
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d001      	beq.n	8000fb2 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e03a      	b.n	8001028 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d008      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fbe:	491d      	ldr	r1, [pc, #116]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d009      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fdc:	4915      	ldr	r1, [pc, #84]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000ff0:	f000 f826 	bl	8001040 <HAL_RCC_GetSysClockFreq>
 8000ff4:	4601      	mov	r1, r0
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_RCC_ClockConfig+0x218>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000ffe:	23f0      	movs	r3, #240	; 0xf0
 8001000:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	60fb      	str	r3, [r7, #12]
  return(result);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	fab3 f383 	clz	r3, r3
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_RCC_ClockConfig+0x21c>)
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_RCC_ClockConfig+0x220>)
 800101e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff f8fb 	bl	800021c <HAL_InitTick>
  
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40023c00 	.word	0x40023c00
 8001034:	40023800 	.word	0x40023800
 8001038:	08001a48 	.word	0x08001a48
 800103c:	20000000 	.word	0x20000000

08001040 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b08b      	sub	sp, #44	; 0x2c
 8001044:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001056:	4b36      	ldr	r3, [pc, #216]	; (8001130 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b04      	cmp	r3, #4
 8001060:	d006      	beq.n	8001070 <HAL_RCC_GetSysClockFreq+0x30>
 8001062:	2b08      	cmp	r3, #8
 8001064:	d007      	beq.n	8001076 <HAL_RCC_GetSysClockFreq+0x36>
 8001066:	2b00      	cmp	r3, #0
 8001068:	d158      	bne.n	800111c <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <HAL_RCC_GetSysClockFreq+0xf4>)
 800106c:	623b      	str	r3, [r7, #32]
       break;
 800106e:	e058      	b.n	8001122 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001070:	4b31      	ldr	r3, [pc, #196]	; (8001138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001072:	623b      	str	r3, [r7, #32]
      break;
 8001074:	e055      	b.n	8001122 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800107e:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d017      	beq.n	80010bc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800108c:	4a2a      	ldr	r2, [pc, #168]	; (8001138 <HAL_RCC_GetSysClockFreq+0xf8>)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fbb2 f2f3 	udiv	r2, r2, r3
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001096:	6859      	ldr	r1, [r3, #4]
 8001098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800109c:	400b      	ands	r3, r1
 800109e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80010a2:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a4:	6979      	ldr	r1, [r7, #20]
 80010a6:	fa91 f1a1 	rbit	r1, r1
 80010aa:	6139      	str	r1, [r7, #16]
  return(result);
 80010ac:	6939      	ldr	r1, [r7, #16]
 80010ae:	fab1 f181 	clz	r1, r1
 80010b2:	40cb      	lsrs	r3, r1
 80010b4:	fb03 f302 	mul.w	r3, r3, r2
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ba:	e016      	b.n	80010ea <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80010bc:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_RCC_GetSysClockFreq+0xf4>)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <HAL_RCC_GetSysClockFreq+0xf0>)
 80010c6:	6859      	ldr	r1, [r3, #4]
 80010c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010cc:	400b      	ands	r3, r1
 80010ce:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80010d2:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	fa91 f1a1 	rbit	r1, r1
 80010da:	60b9      	str	r1, [r7, #8]
  return(result);
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	fab1 f181 	clz	r1, r1
 80010e2:	40cb      	lsrs	r3, r1
 80010e4:	fb03 f302 	mul.w	r3, r3, r2
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_RCC_GetSysClockFreq+0xf0>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010f2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010f6:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	603b      	str	r3, [r7, #0]
  return(result);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	fab3 f383 	clz	r3, r3
 8001106:	fa22 f303 	lsr.w	r3, r2, r3
 800110a:	3301      	adds	r3, #1
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8001110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	fbb2 f3f3 	udiv	r3, r2, r3
 8001118:	623b      	str	r3, [r7, #32]
      break;
 800111a:	e002      	b.n	8001122 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <HAL_RCC_GetSysClockFreq+0xf4>)
 800111e:	623b      	str	r3, [r7, #32]
      break;
 8001120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001122:	6a3b      	ldr	r3, [r7, #32]
}
 8001124:	4618      	mov	r0, r3
 8001126:	372c      	adds	r7, #44	; 0x2c
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40023800 	.word	0x40023800
 8001134:	00f42400 	.word	0x00f42400
 8001138:	017d7840 	.word	0x017d7840

0800113c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_RCC_GetHCLKFreq+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000000 	.word	0x20000000

08001154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800115a:	f7ff ffef 	bl	800113c <HAL_RCC_GetHCLKFreq>
 800115e:	4601      	mov	r1, r0
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001168:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800116c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	603b      	str	r3, [r7, #0]
  return(result);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	fa22 f303 	lsr.w	r3, r2, r3
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001182:	5cd3      	ldrb	r3, [r2, r3]
 8001184:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	08001a58 	.word	0x08001a58

08001198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800119e:	f7ff ffcd 	bl	800113c <HAL_RCC_GetHCLKFreq>
 80011a2:	4601      	mov	r1, r0
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80011ac:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011b0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	fa93 f3a3 	rbit	r3, r3
 80011b8:	603b      	str	r3, [r7, #0]
  return(result);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	fab3 f383 	clz	r3, r3
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	08001a58 	.word	0x08001a58

080011dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e055      	b.n	800129a <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d106      	bne.n	800120e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 fb29 	bl	8001860 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2202      	movs	r2, #2
 8001212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001224:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6851      	ldr	r1, [r2, #4]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6892      	ldr	r2, [r2, #8]
 8001232:	4311      	orrs	r1, r2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	68d2      	ldr	r2, [r2, #12]
 8001238:	4311      	orrs	r1, r2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6912      	ldr	r2, [r2, #16]
 800123e:	4311      	orrs	r1, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6952      	ldr	r2, [r2, #20]
 8001244:	4311      	orrs	r1, r2
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6992      	ldr	r2, [r2, #24]
 800124a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800124e:	4311      	orrs	r1, r2
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	69d2      	ldr	r2, [r2, #28]
 8001254:	4311      	orrs	r1, r2
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6a12      	ldr	r2, [r2, #32]
 800125a:	4311      	orrs	r1, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001260:	430a      	orrs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6992      	ldr	r2, [r2, #24]
 800126c:	0c12      	lsrs	r2, r2, #16
 800126e:	f002 0104 	and.w	r1, r2, #4
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001276:	430a      	orrs	r2, r1
 8001278:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	69d2      	ldr	r2, [r2, #28]
 8001284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001288:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_USART_Init>:
  * @param  husart: pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if(husart == NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e033      	b.n	800131c <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if(husart->State == HAL_USART_STATE_RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_USART_MspInit(husart);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fafb 	bl	80018c4 <HAL_USART_MspInit>
  }

  husart->State = HAL_USART_STATE_BUSY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2202      	movs	r2, #2
 80012d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f824 	bl	8001324 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	6912      	ldr	r2, [r2, #16]
 80012e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	6952      	ldr	r2, [r2, #20]
 80012f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012fa:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	68d2      	ldr	r2, [r2, #12]
 8001306:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800130a:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State= HAL_USART_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <USART_SetConfig>:
  * @param  husart: pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	68d2      	ldr	r2, [r2, #12]
 800133a:	f022 020c 	bic.w	r2, r2, #12
 800133e:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800134e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase| husart->Init.CLKLastBit | husart->Init.StopBits);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 8001358:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase| husart->Init.CLKLastBit | husart->Init.StopBits);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 8001364:	431a      	orrs	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800136e:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001386:	f023 030c 	bic.w	r3, r3, #12
 800138a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	431a      	orrs	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	6952      	ldr	r2, [r2, #20]
 80013b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013bc:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
#if defined(USART6) 
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a46      	ldr	r2, [pc, #280]	; (80014dc <USART_SetConfig+0x1b8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d004      	beq.n	80013d2 <USART_SetConfig+0xae>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a44      	ldr	r2, [pc, #272]	; (80014e0 <USART_SetConfig+0x1bc>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d140      	bne.n	8001454 <USART_SetConfig+0x130>
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681c      	ldr	r4, [r3, #0]
 80013d6:	f7ff fedf 	bl	8001198 <HAL_RCC_GetPCLK2Freq>
 80013da:	4602      	mov	r2, r0
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	009a      	lsls	r2, r3, #2
 80013e4:	441a      	add	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f0:	4a3c      	ldr	r2, [pc, #240]	; (80014e4 <USART_SetConfig+0x1c0>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	011d      	lsls	r5, r3, #4
 80013fa:	f7ff fecd 	bl	8001198 <HAL_RCC_GetPCLK2Freq>
 80013fe:	4602      	mov	r2, r0
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	009a      	lsls	r2, r3, #2
 8001408:	441a      	add	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fbb2 f6f3 	udiv	r6, r2, r3
 8001414:	f7ff fec0 	bl	8001198 <HAL_RCC_GetPCLK2Freq>
 8001418:	4602      	mov	r2, r0
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	009a      	lsls	r2, r3, #2
 8001422:	441a      	add	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4a2d      	ldr	r2, [pc, #180]	; (80014e4 <USART_SetConfig+0x1c0>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	095b      	lsrs	r3, r3, #5
 8001436:	2264      	movs	r2, #100	; 0x64
 8001438:	fb02 f303 	mul.w	r3, r2, r3
 800143c:	1af3      	subs	r3, r6, r3
 800143e:	011b      	lsls	r3, r3, #4
 8001440:	3332      	adds	r3, #50	; 0x32
 8001442:	4a28      	ldr	r2, [pc, #160]	; (80014e4 <USART_SetConfig+0x1c0>)
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	095b      	lsrs	r3, r3, #5
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	432b      	orrs	r3, r5
 8001450:	60a3      	str	r3, [r4, #8]
 8001452:	e03f      	b.n	80014d4 <USART_SetConfig+0x1b0>
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
  }	
#endif /* USART6 */	
  else
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681c      	ldr	r4, [r3, #0]
 8001458:	f7ff fe7c 	bl	8001154 <HAL_RCC_GetPCLK1Freq>
 800145c:	4602      	mov	r2, r0
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009a      	lsls	r2, r3, #2
 8001466:	441a      	add	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <USART_SetConfig+0x1c0>)
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	095b      	lsrs	r3, r3, #5
 800147a:	011d      	lsls	r5, r3, #4
 800147c:	f7ff fe6a 	bl	8001154 <HAL_RCC_GetPCLK1Freq>
 8001480:	4602      	mov	r2, r0
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	009a      	lsls	r2, r3, #2
 800148a:	441a      	add	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fbb2 f6f3 	udiv	r6, r2, r3
 8001496:	f7ff fe5d 	bl	8001154 <HAL_RCC_GetPCLK1Freq>
 800149a:	4602      	mov	r2, r0
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	009a      	lsls	r2, r3, #2
 80014a4:	441a      	add	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b0:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <USART_SetConfig+0x1c0>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2264      	movs	r2, #100	; 0x64
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	1af3      	subs	r3, r6, r3
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	3332      	adds	r3, #50	; 0x32
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <USART_SetConfig+0x1c0>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	432b      	orrs	r3, r5
 80014d2:	60a3      	str	r3, [r4, #8]
  }
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014dc:	40011000 	.word	0x40011000
 80014e0:	40011400 	.word	0x40011400
 80014e4:	51eb851f 	.word	0x51eb851f

080014e8 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e015      	b.n	8001526 <HAL_WWDG_Init+0x3e>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fa14 	bl	8001928 <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	68d2      	ldr	r2, [r2, #12]
 8001508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800150c:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6911      	ldr	r1, [r2, #16]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6852      	ldr	r2, [r2, #4]
 800151a:	4311      	orrs	r1, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6892      	ldr	r2, [r2, #8]
 8001520:	430a      	orrs	r2, r1
 8001522:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <I2C1_Init>:
WWDG_HandleTypeDef hwwdg;


/* I2C1 init function */
void I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <I2C1_Init+0x48>)
 8001536:	4a11      	ldr	r2, [pc, #68]	; (800157c <I2C1_Init+0x4c>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <I2C1_Init+0x48>)
 800153c:	4a10      	ldr	r2, [pc, #64]	; (8001580 <I2C1_Init+0x50>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <I2C1_Init+0x48>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <I2C1_Init+0x48>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <I2C1_Init+0x48>)
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <I2C1_Init+0x48>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <I2C1_Init+0x48>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <I2C1_Init+0x48>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <I2C1_Init+0x48>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <I2C1_Init+0x48>)
 800156e:	f7ff f91b 	bl	80007a8 <HAL_I2C_Init>

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000024 	.word	0x20000024
 800157c:	40005400 	.word	0x40005400
 8001580:	000186a0 	.word	0x000186a0

08001584 <SPI1_Init>:

/* SPI1 init function */
void SPI1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <SPI1_Init+0x5c>)
 800158a:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <SPI1_Init+0x60>)
 800158c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <SPI1_Init+0x5c>)
 8001590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001594:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <SPI1_Init+0x5c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <SPI1_Init+0x5c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <SPI1_Init+0x5c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <SPI1_Init+0x5c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <SPI1_Init+0x5c>)
 80015b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <SPI1_Init+0x5c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <SPI1_Init+0x5c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <SPI1_Init+0x5c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SPI1_Init+0x5c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SPI1_Init+0x5c>)
 80015d0:	220a      	movs	r2, #10
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_SPI_Init(&hspi1);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <SPI1_Init+0x5c>)
 80015d6:	f7ff fe01 	bl	80011dc <HAL_SPI_Init>

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000008c 	.word	0x2000008c
 80015e4:	40013000 	.word	0x40013000

080015e8 <USART1_Init>:

/* USART1 init function */
void USART1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

  husart1.Instance = USART1;
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <USART1_Init+0x48>)
 80015ee:	4a11      	ldr	r2, [pc, #68]	; (8001634 <USART1_Init+0x4c>)
 80015f0:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <USART1_Init+0x48>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <USART1_Init+0x48>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <USART1_Init+0x48>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <USART1_Init+0x48>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <USART1_Init+0x48>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <USART1_Init+0x48>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <USART1_Init+0x48>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <USART1_Init+0x48>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  HAL_USART_Init(&husart1);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <USART1_Init+0x48>)
 8001626:	f7ff fe3c 	bl	80012a2 <HAL_USART_Init>

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200000e4 	.word	0x200000e4
 8001634:	40011000 	.word	0x40011000

08001638 <WWDG_Init>:

/* WWDG init function */
void WWDG_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <WWDG_Init+0x28>)
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <WWDG_Init+0x2c>)
 8001640:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <WWDG_Init+0x28>)
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <WWDG_Init+0x28>)
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <WWDG_Init+0x28>)
 8001650:	2240      	movs	r2, #64	; 0x40
 8001652:	60da      	str	r2, [r3, #12]
  HAL_WWDG_Init(&hwwdg);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <WWDG_Init+0x28>)
 8001656:	f7ff ff47 	bl	80014e8 <HAL_WWDG_Init>

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000078 	.word	0x20000078
 8001664:	40002c00 	.word	0x40002c00

08001668 <GPIO_Init>:

/** Pinout Configuration
*/
void GPIO_Init(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <GPIO_Init+0x4c>)
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <GPIO_Init+0x4c>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <GPIO_Init+0x4c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __GPIOB_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <GPIO_Init+0x4c>)
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <GPIO_Init+0x4c>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <GPIO_Init+0x4c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <main>:
void SystemClock_Config(void);

/* Private function prototypes -----------------------------------------------*/

int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016bc:	f7fe fd8c 	bl	80001d8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80016c0:	f000 f80c 	bl	80016dc <SystemClock_Config>

  /* Initialize all configured peripherals */
  GPIO_Init();
 80016c4:	f7ff ffd0 	bl	8001668 <GPIO_Init>
  I2C1_Init();
 80016c8:	f7ff ff32 	bl	8001530 <I2C1_Init>
  SPI1_Init();
 80016cc:	f7ff ff5a 	bl	8001584 <SPI1_Init>
  USART1_Init();
 80016d0:	f7ff ff8a 	bl	80015e8 <USART1_Init>
  WWDG_Init();
 80016d4:	f7ff ffb0 	bl	8001638 <WWDG_Init>

  while (1)
 80016d8:	e7fe      	b.n	80016d8 <main+0x20>
	...

080016dc <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	; 0x50
 80016e0:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __PWR_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4a27      	ldr	r2, [pc, #156]	; (8001784 <SystemClock_Config+0xa8>)
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <SystemClock_Config+0xa8>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <SystemClock_Config+0xa8>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4a21      	ldr	r2, [pc, #132]	; (8001788 <SystemClock_Config+0xac>)
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <SystemClock_Config+0xac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <SystemClock_Config+0xac>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800171a:	2302      	movs	r3, #2
 800171c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800171e:	2301      	movs	r3, #1
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001722:	2310      	movs	r3, #16
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001726:	2300      	movs	r3, #0
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f91a 	bl	8000968 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001734:	230f      	movs	r3, #15
 8001736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb64 	bl	8000e1c <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001754:	f7ff fcf2 	bl	800113c <HAL_RCC_GetHCLKFreq>
 8001758:	4602      	mov	r2, r0
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <SystemClock_Config+0xb0>)
 800175c:	fba3 2302 	umull	r2, r3, r3, r2
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fe67 	bl	8000436 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001768:	2004      	movs	r0, #4
 800176a:	f7fe fe71 	bl	8000450 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	f04f 30ff 	mov.w	r0, #4294967295
 8001776:	f7fe fe42 	bl	80003fe <HAL_NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3750      	adds	r7, #80	; 0x50
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	40007000 	.word	0x40007000
 800178c:	10624dd3 	.word	0x10624dd3

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001794:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001796:	e003      	b.n	80017a0 <LoopCopyDataInit>

08001798 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800179a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800179c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800179e:	3104      	adds	r1, #4

080017a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017a0:	480b      	ldr	r0, [pc, #44]	; (80017d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017a8:	d3f6      	bcc.n	8001798 <CopyDataInit>
  ldr  r2, =_sbss
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017ac:	e002      	b.n	80017b4 <LoopFillZerobss>

080017ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017b0:	f842 3b04 	str.w	r3, [r2], #4

080017b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017b8:	d3f9      	bcc.n	80017ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ba:	f000 f8df 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017be:	f000 f913 	bl	80019e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c2:	f7ff ff79 	bl	80016b8 <main>
  bx  lr    
 80017c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017cc:	08001a68 	.word	0x08001a68
  ldr  r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017d4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80017d8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80017dc:	20000128 	.word	0x20000128

080017e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC_IRQHandler>

080017e2 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e6:	2003      	movs	r0, #3
 80017e8:	f7fe fdfe 	bl	80003e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7fe fe03 	bl	80003fe <HAL_NVIC_SetPriority>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <HAL_I2C_MspInit+0x58>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d11d      	bne.n	800184a <HAL_I2C_MspInit+0x4e>
  {
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800180e:	23c0      	movs	r3, #192	; 0xc0
 8001810:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001812:	2312      	movs	r3, #18
 8001814:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800181e:	2304      	movs	r3, #4
 8001820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	4619      	mov	r1, r3
 8001828:	480b      	ldr	r0, [pc, #44]	; (8001858 <HAL_I2C_MspInit+0x5c>)
 800182a:	f7fe fe3b 	bl	80004a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __I2C1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_I2C_MspInit+0x60>)
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_I2C_MspInit+0x60>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_I2C_MspInit+0x60>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  }
}
 800184a:	bf00      	nop
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40005400 	.word	0x40005400
 8001858:	40020400 	.word	0x40020400
 800185c:	40023800 	.word	0x40023800

08001860 <HAL_SPI_MspInit>:

  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <HAL_SPI_MspInit+0x58>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d11d      	bne.n	80018ae <HAL_SPI_MspInit+0x4e>
  {
    /* Peripheral clock enable */
    __SPI1_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	4a11      	ldr	r2, [pc, #68]	; (80018bc <HAL_SPI_MspInit+0x5c>)
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_SPI_MspInit+0x5c>)
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_SPI_MspInit+0x5c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800188e:	23e0      	movs	r3, #224	; 0xe0
 8001890:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800189e:	2305      	movs	r3, #5
 80018a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_SPI_MspInit+0x60>)
 80018aa:	f7fe fdfb 	bl	80004a4 <HAL_GPIO_Init>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40013000 	.word	0x40013000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000

080018c4 <HAL_USART_MspInit>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
  }
}

void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(husart->Instance==USART1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_USART_MspInit+0x58>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d11e      	bne.n	8001914 <HAL_USART_MspInit+0x50>
  {
    /* Peripheral clock enable */
    __USART1_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	4a11      	ldr	r2, [pc, #68]	; (8001920 <HAL_USART_MspInit+0x5c>)
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_USART_MspInit+0x5c>)
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	f043 0310 	orr.w	r3, r3, #16
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_USART_MspInit+0x5c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80018f2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001904:	2307      	movs	r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4619      	mov	r1, r3
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <HAL_USART_MspInit+0x60>)
 8001910:	f7fe fdc8 	bl	80004a4 <HAL_GPIO_Init>
  }
}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40011000 	.word	0x40011000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <HAL_WWDG_MspInit>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10);
  }
}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <HAL_WWDG_MspInit+0x3c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10d      	bne.n	8001956 <HAL_WWDG_MspInit+0x2e>
  {
    /* Peripheral clock enable */
    __WWDG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_WWDG_MspInit+0x40>)
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_WWDG_MspInit+0x40>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_WWDG_MspInit+0x40>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  }

}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40002c00 	.word	0x40002c00
 8001968:	40023800 	.word	0x40023800

0800196c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f7fe fc70 	bl	8000254 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001974:	f7fe fd88 	bl	8000488 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4a16      	ldr	r2, [pc, #88]	; (80019dc <SystemInit+0x60>)
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <SystemInit+0x60>)
 8001984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001990:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <SystemInit+0x64>)
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <SystemInit+0x64>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <SystemInit+0x64>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <SystemInit+0x64>)
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <SystemInit+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <SystemInit+0x64>)
 80019b4:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <SystemInit+0x68>)
 80019b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019b8:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <SystemInit+0x64>)
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <SystemInit+0x64>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <SystemInit+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <SystemInit+0x60>)
 80019cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d0:	609a      	str	r2, [r3, #8]
#endif
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00
 80019e0:	40023800 	.word	0x40023800
 80019e4:	24003010 	.word	0x24003010

080019e8 <__libc_init_array>:
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	4e0d      	ldr	r6, [pc, #52]	; (8001a20 <__libc_init_array+0x38>)
 80019ec:	4c0d      	ldr	r4, [pc, #52]	; (8001a24 <__libc_init_array+0x3c>)
 80019ee:	1ba4      	subs	r4, r4, r6
 80019f0:	10a4      	asrs	r4, r4, #2
 80019f2:	2500      	movs	r5, #0
 80019f4:	42a5      	cmp	r5, r4
 80019f6:	d109      	bne.n	8001a0c <__libc_init_array+0x24>
 80019f8:	4e0b      	ldr	r6, [pc, #44]	; (8001a28 <__libc_init_array+0x40>)
 80019fa:	4c0c      	ldr	r4, [pc, #48]	; (8001a2c <__libc_init_array+0x44>)
 80019fc:	f000 f818 	bl	8001a30 <_init>
 8001a00:	1ba4      	subs	r4, r4, r6
 8001a02:	10a4      	asrs	r4, r4, #2
 8001a04:	2500      	movs	r5, #0
 8001a06:	42a5      	cmp	r5, r4
 8001a08:	d105      	bne.n	8001a16 <__libc_init_array+0x2e>
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}
 8001a0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a10:	4798      	blx	r3
 8001a12:	3501      	adds	r5, #1
 8001a14:	e7ee      	b.n	80019f4 <__libc_init_array+0xc>
 8001a16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a1a:	4798      	blx	r3
 8001a1c:	3501      	adds	r5, #1
 8001a1e:	e7f2      	b.n	8001a06 <__libc_init_array+0x1e>
 8001a20:	08001a60 	.word	0x08001a60
 8001a24:	08001a60 	.word	0x08001a60
 8001a28:	08001a60 	.word	0x08001a60
 8001a2c:	08001a64 	.word	0x08001a64

08001a30 <_init>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	bf00      	nop
 8001a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a36:	bc08      	pop	{r3}
 8001a38:	469e      	mov	lr, r3
 8001a3a:	4770      	bx	lr

08001a3c <_fini>:
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	bf00      	nop
 8001a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a42:	bc08      	pop	{r3}
 8001a44:	469e      	mov	lr, r3
 8001a46:	4770      	bx	lr
