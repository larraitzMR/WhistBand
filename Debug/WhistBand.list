
WhistBand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006844  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  080069e0  080069e0  000169e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .user_data    00000040  08040000  08040000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .init_array   00000004  08006e28  08006e28  00016e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000294  20000000  08006e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000137d0  20000294  080070c4  00020294  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20013a64  080070c4  00023a64  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 10 .debug_info   000172e2  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002d2f  00000000  00000000  00047352  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c70  00000000  00000000  0004a088  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b48  00000000  00000000  0004acf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000062da  00000000  00000000  0004b840  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003d43  00000000  00000000  00051b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005585d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003cd8  00000000  00000000  000558dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000595b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000294 	.word	0x20000294
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080069c4 	.word	0x080069c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000298 	.word	0x20000298
 80001d4:	080069c4 	.word	0x080069c4

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800033a:	f1a4 0401 	sub.w	r4, r4, #1
 800033e:	d1e9      	bne.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f092 0f00 	teq	r2, #0
 80004e6:	bf14      	ite	ne
 80004e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	e720      	b.n	8000340 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_ul2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	e00a      	b.n	8000526 <__aeabi_l2d+0x16>

08000510 <__aeabi_l2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051e:	d502      	bpl.n	8000526 <__aeabi_l2d+0x16>
 8000520:	4240      	negs	r0, r0
 8000522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000526:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000532:	f43f aedc 	beq.w	80002ee <__adddf3+0xe6>
 8000536:	f04f 0203 	mov.w	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	fa00 fc03 	lsl.w	ip, r0, r3
 8000556:	fa20 f002 	lsr.w	r0, r0, r2
 800055a:	fa01 fe03 	lsl.w	lr, r1, r3
 800055e:	ea40 000e 	orr.w	r0, r0, lr
 8000562:	fa21 f102 	lsr.w	r1, r1, r2
 8000566:	4414      	add	r4, r2
 8000568:	e6c1      	b.n	80002ee <__adddf3+0xe6>
 800056a:	bf00      	nop

0800056c <__aeabi_dmul>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000572:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000576:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057a:	bf1d      	ittte	ne
 800057c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000580:	ea94 0f0c 	teqne	r4, ip
 8000584:	ea95 0f0c 	teqne	r5, ip
 8000588:	f000 f8de 	bleq	8000748 <__aeabi_dmul+0x1dc>
 800058c:	442c      	add	r4, r5
 800058e:	ea81 0603 	eor.w	r6, r1, r3
 8000592:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000596:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059e:	bf18      	it	ne
 80005a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ac:	d038      	beq.n	8000620 <__aeabi_dmul+0xb4>
 80005ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c2:	f04f 0600 	mov.w	r6, #0
 80005c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ca:	f09c 0f00 	teq	ip, #0
 80005ce:	bf18      	it	ne
 80005d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e0:	d204      	bcs.n	80005ec <__aeabi_dmul+0x80>
 80005e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e6:	416d      	adcs	r5, r5
 80005e8:	eb46 0606 	adc.w	r6, r6, r6
 80005ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000600:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000604:	bf88      	it	hi
 8000606:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060a:	d81e      	bhi.n	800064a <__aeabi_dmul+0xde>
 800060c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000624:	ea46 0101 	orr.w	r1, r6, r1
 8000628:	ea40 0002 	orr.w	r0, r0, r2
 800062c:	ea81 0103 	eor.w	r1, r1, r3
 8000630:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000634:	bfc2      	ittt	gt
 8000636:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063e:	bd70      	popgt	{r4, r5, r6, pc}
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f04f 0e00 	mov.w	lr, #0
 8000648:	3c01      	subs	r4, #1
 800064a:	f300 80ab 	bgt.w	80007a4 <__aeabi_dmul+0x238>
 800064e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000652:	bfde      	ittt	le
 8000654:	2000      	movle	r0, #0
 8000656:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065a:	bd70      	pople	{r4, r5, r6, pc}
 800065c:	f1c4 0400 	rsb	r4, r4, #0
 8000660:	3c20      	subs	r4, #32
 8000662:	da35      	bge.n	80006d0 <__aeabi_dmul+0x164>
 8000664:	340c      	adds	r4, #12
 8000666:	dc1b      	bgt.n	80006a0 <__aeabi_dmul+0x134>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f305 	lsl.w	r3, r0, r5
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f205 	lsl.w	r2, r1, r5
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	fa21 f604 	lsr.w	r6, r1, r4
 8000690:	eb42 0106 	adc.w	r1, r2, r6
 8000694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000698:	bf08      	it	eq
 800069a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f1c4 040c 	rsb	r4, r4, #12
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ac:	fa20 f005 	lsr.w	r0, r0, r5
 80006b0:	fa01 f204 	lsl.w	r2, r1, r4
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	f141 0100 	adc.w	r1, r1, #0
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f205 	lsl.w	r2, r0, r5
 80006d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006dc:	fa20 f304 	lsr.w	r3, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea43 0302 	orr.w	r3, r3, r2
 80006e8:	fa21 f004 	lsr.w	r0, r1, r4
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	fa21 f204 	lsr.w	r2, r1, r4
 80006f4:	ea20 0002 	bic.w	r0, r0, r2
 80006f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f094 0f00 	teq	r4, #0
 800070c:	d10f      	bne.n	800072e <__aeabi_dmul+0x1c2>
 800070e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000712:	0040      	lsls	r0, r0, #1
 8000714:	eb41 0101 	adc.w	r1, r1, r1
 8000718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3c01      	subeq	r4, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1a6>
 8000722:	ea41 0106 	orr.w	r1, r1, r6
 8000726:	f095 0f00 	teq	r5, #0
 800072a:	bf18      	it	ne
 800072c:	4770      	bxne	lr
 800072e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	eb43 0303 	adc.w	r3, r3, r3
 8000738:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3d01      	subeq	r5, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1c6>
 8000742:	ea43 0306 	orr.w	r3, r3, r6
 8000746:	4770      	bx	lr
 8000748:	ea94 0f0c 	teq	r4, ip
 800074c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000750:	bf18      	it	ne
 8000752:	ea95 0f0c 	teqne	r5, ip
 8000756:	d00c      	beq.n	8000772 <__aeabi_dmul+0x206>
 8000758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075c:	bf18      	it	ne
 800075e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000762:	d1d1      	bne.n	8000708 <__aeabi_dmul+0x19c>
 8000764:	ea81 0103 	eor.w	r1, r1, r3
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000776:	bf06      	itte	eq
 8000778:	4610      	moveq	r0, r2
 800077a:	4619      	moveq	r1, r3
 800077c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000780:	d019      	beq.n	80007b6 <__aeabi_dmul+0x24a>
 8000782:	ea94 0f0c 	teq	r4, ip
 8000786:	d102      	bne.n	800078e <__aeabi_dmul+0x222>
 8000788:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800078c:	d113      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 800078e:	ea95 0f0c 	teq	r5, ip
 8000792:	d105      	bne.n	80007a0 <__aeabi_dmul+0x234>
 8000794:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000798:	bf1c      	itt	ne
 800079a:	4610      	movne	r0, r2
 800079c:	4619      	movne	r1, r3
 800079e:	d10a      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007be:	bd70      	pop	{r4, r5, r6, pc}

080007c0 <__aeabi_ddiv>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ce:	bf1d      	ittte	ne
 80007d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d4:	ea94 0f0c 	teqne	r4, ip
 80007d8:	ea95 0f0c 	teqne	r5, ip
 80007dc:	f000 f8a7 	bleq	800092e <__aeabi_ddiv+0x16e>
 80007e0:	eba4 0405 	sub.w	r4, r4, r5
 80007e4:	ea81 0e03 	eor.w	lr, r1, r3
 80007e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f0:	f000 8088 	beq.w	8000904 <__aeabi_ddiv+0x144>
 80007f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000800:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000804:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000808:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800080c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000810:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000814:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000818:	429d      	cmp	r5, r3
 800081a:	bf08      	it	eq
 800081c:	4296      	cmpeq	r6, r2
 800081e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000822:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000826:	d202      	bcs.n	800082e <__aeabi_ddiv+0x6e>
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	1ab6      	subs	r6, r6, r2
 8000830:	eb65 0503 	sbc.w	r5, r5, r3
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 000c 	orrcs.w	r0, r0, ip
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800089c:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a0:	d018      	beq.n	80008d4 <__aeabi_ddiv+0x114>
 80008a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008be:	d1c0      	bne.n	8000842 <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	d10b      	bne.n	80008de <__aeabi_ddiv+0x11e>
 80008c6:	ea41 0100 	orr.w	r1, r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d2:	e7b6      	b.n	8000842 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	bf04      	itt	eq
 80008da:	4301      	orreq	r1, r0
 80008dc:	2000      	moveq	r0, #0
 80008de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e2:	bf88      	it	hi
 80008e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e8:	f63f aeaf 	bhi.w	800064a <__aeabi_dmul+0xde>
 80008ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f0:	bf04      	itt	eq
 80008f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fa:	f150 0000 	adcs.w	r0, r0, #0
 80008fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000908:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800090c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000910:	bfc2      	ittt	gt
 8000912:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091a:	bd70      	popgt	{r4, r5, r6, pc}
 800091c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000920:	f04f 0e00 	mov.w	lr, #0
 8000924:	3c01      	subs	r4, #1
 8000926:	e690      	b.n	800064a <__aeabi_dmul+0xde>
 8000928:	ea45 0e06 	orr.w	lr, r5, r6
 800092c:	e68d      	b.n	800064a <__aeabi_dmul+0xde>
 800092e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000932:	ea94 0f0c 	teq	r4, ip
 8000936:	bf08      	it	eq
 8000938:	ea95 0f0c 	teqeq	r5, ip
 800093c:	f43f af3b 	beq.w	80007b6 <__aeabi_dmul+0x24a>
 8000940:	ea94 0f0c 	teq	r4, ip
 8000944:	d10a      	bne.n	800095c <__aeabi_ddiv+0x19c>
 8000946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094a:	f47f af34 	bne.w	80007b6 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	f47f af25 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e72c      	b.n	80007b6 <__aeabi_dmul+0x24a>
 800095c:	ea95 0f0c 	teq	r5, ip
 8000960:	d106      	bne.n	8000970 <__aeabi_ddiv+0x1b0>
 8000962:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000966:	f43f aefd 	beq.w	8000764 <__aeabi_dmul+0x1f8>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e722      	b.n	80007b6 <__aeabi_dmul+0x24a>
 8000970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000974:	bf18      	it	ne
 8000976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097a:	f47f aec5 	bne.w	8000708 <__aeabi_dmul+0x19c>
 800097e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000982:	f47f af0d 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000986:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098a:	f47f aeeb 	bne.w	8000764 <__aeabi_dmul+0x1f8>
 800098e:	e712      	b.n	80007b6 <__aeabi_dmul+0x24a>

08000990 <__gedf2>:
 8000990:	f04f 3cff 	mov.w	ip, #4294967295
 8000994:	e006      	b.n	80009a4 <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__ledf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	e002      	b.n	80009a4 <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__cmpdf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ba:	d01b      	beq.n	80009f4 <__cmpdf2+0x54>
 80009bc:	b001      	add	sp, #4
 80009be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c2:	bf0c      	ite	eq
 80009c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c8:	ea91 0f03 	teqne	r1, r3
 80009cc:	bf02      	ittt	eq
 80009ce:	ea90 0f02 	teqeq	r0, r2
 80009d2:	2000      	moveq	r0, #0
 80009d4:	4770      	bxeq	lr
 80009d6:	f110 0f00 	cmn.w	r0, #0
 80009da:	ea91 0f03 	teq	r1, r3
 80009de:	bf58      	it	pl
 80009e0:	4299      	cmppl	r1, r3
 80009e2:	bf08      	it	eq
 80009e4:	4290      	cmpeq	r0, r2
 80009e6:	bf2c      	ite	cs
 80009e8:	17d8      	asrcs	r0, r3, #31
 80009ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ee:	f040 0001 	orr.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__cmpdf2+0x64>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d107      	bne.n	8000a14 <__cmpdf2+0x74>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d1d6      	bne.n	80009bc <__cmpdf2+0x1c>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d0d3      	beq.n	80009bc <__cmpdf2+0x1c>
 8000a14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdrcmple>:
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4662      	mov	r2, ip
 8000a22:	468c      	mov	ip, r1
 8000a24:	4619      	mov	r1, r3
 8000a26:	4663      	mov	r3, ip
 8000a28:	e000      	b.n	8000a2c <__aeabi_cdcmpeq>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdcmpeq>:
 8000a2c:	b501      	push	{r0, lr}
 8000a2e:	f7ff ffb7 	bl	80009a0 <__cmpdf2>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	bf48      	it	mi
 8000a36:	f110 0f00 	cmnmi.w	r0, #0
 8000a3a:	bd01      	pop	{r0, pc}

08000a3c <__aeabi_dcmpeq>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff fff4 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a44:	bf0c      	ite	eq
 8000a46:	2001      	moveq	r0, #1
 8000a48:	2000      	movne	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmplt>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffea 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a58:	bf34      	ite	cc
 8000a5a:	2001      	movcc	r0, #1
 8000a5c:	2000      	movcs	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmple>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffe0 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpge>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffce 	bl	8000a1c <__aeabi_cdrcmple>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpgt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffc4 	bl	8000a1c <__aeabi_cdrcmple>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <BSP_LED_Init>:
  * @param  Led: Specifies the Led to be configured. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <BSP_LED_Init+0x64>)
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <BSP_LED_Init+0x64>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <BSP_LED_Init+0x64>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000b56:	2320      	movs	r3, #32
 8000b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <BSP_LED_Init+0x68>)
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	f107 020c 	add.w	r2, r7, #12
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fd5f 	bl	8001638 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <BSP_LED_Init+0x68>)
 8000b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b82:	2120      	movs	r1, #32
 8000b84:	2200      	movs	r2, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fed8 	bl	800193c <HAL_GPIO_WritePin>
}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	20000000 	.word	0x20000000

08000b9c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <BSP_LED_On+0x24>)
 8000baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bae:	2120      	movs	r1, #32
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fec2 	bl	800193c <HAL_GPIO_WritePin>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <BSP_LED_Toggle>:
  * @param  Led: Specifies the Led to be toggled. 
  *   This parameter can be one of following parameters:
  *     @arg LED2  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <BSP_LED_Toggle+0x24>)
 8000bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fec7 	bl	800196e <HAL_GPIO_TogglePin>
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000000 	.word	0x20000000

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f929 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f003 fccf 	bl	80045c2 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_InitTick+0x30>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <HAL_InitTick+0x34>)
 8000c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c42:	099b      	lsrs	r3, r3, #6
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f946 	bl	8000ed6 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c52:	f000 f916 	bl	8000e82 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200000c0 	.word	0x200000c0
 8000c64:	10624dd3 	.word	0x10624dd3

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick++;
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_IncTick+0x18>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <HAL_IncTick+0x18>)
 8000c74:	6013      	str	r3, [r2, #0]
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	20000300 	.word	0x20000300

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_GetTick+0x14>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000300 	.word	0x20000300

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff ffee 	bl	8000c84 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d002      	beq.n	8000cbc <HAL_Delay+0x20>
  {
     wait++;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cbc:	bf00      	nop
 8000cbe:	f7ff ffe1 	bl	8000c84 <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1ad2      	subs	r2, r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d3f7      	bcc.n	8000cbe <HAL_Delay+0x22>
  {
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d46:	4909      	ldr	r1, [pc, #36]	; (8000d6c <NVIC_EnableIRQ+0x30>)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	095b      	lsrs	r3, r3, #5
 8000d4e:	79fa      	ldrb	r2, [r7, #7]
 8000d50:	f002 021f 	and.w	r2, r2, #31
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	da0b      	bge.n	8000d9c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	490d      	ldr	r1, [pc, #52]	; (8000dbc <NVIC_SetPriority+0x4c>)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 030f 	and.w	r3, r3, #15
 8000d8c:	3b04      	subs	r3, #4
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9a:	e009      	b.n	8000db0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <NVIC_SetPriority+0x50>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f1c3 0307 	rsb	r3, r3, #7
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	bf28      	it	cs
 8000de2:	2304      	movcs	r3, #4
 8000de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3304      	adds	r3, #4
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d902      	bls.n	8000df4 <NVIC_EncodePriority+0x30>
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3b03      	subs	r3, #3
 8000df2:	e000      	b.n	8000df6 <NVIC_EncodePriority+0x32>
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	1e5a      	subs	r2, r3, #1
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	401a      	ands	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	1e59      	subs	r1, r3, #1
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	; 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e38:	d301      	bcc.n	8000e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00f      	b.n	8000e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <SysTick_Config+0x40>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e46:	210f      	movs	r1, #15
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f7ff ff90 	bl	8000d70 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <SysTick_Config+0x40>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <SysTick_Config+0x40>)
 8000e58:	2207      	movs	r2, #7
 8000e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	e000e010 	.word	0xe000e010

08000e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff2f 	bl	8000cd8 <NVIC_SetPriorityGrouping>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e94:	f7ff ff44 	bl	8000d20 <NVIC_GetPriorityGrouping>
 8000e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68b9      	ldr	r1, [r7, #8]
 8000e9e:	6978      	ldr	r0, [r7, #20]
 8000ea0:	f7ff ff90 	bl	8000dc4 <NVIC_EncodePriority>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff5f 	bl	8000d70 <NVIC_SetPriority>
}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff37 	bl	8000d3c <NVIC_EnableIRQ>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ffa2 	bl	8000e28 <SysTick_Config>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ef2:	f003 fa41 	bl	8004378 <HAL_SYSTICK_Callback>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff febc 	bl	8000c84 <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e099      	b.n	800104c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2202      	movs	r2, #2
 8000f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	f022 0201 	bic.w	r2, r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f38:	e00f      	b.n	8000f5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f3a:	f7ff fea3 	bl	8000c84 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	d908      	bls.n	8000f5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2203      	movs	r2, #3
 8000f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e078      	b.n	800104c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e8      	bne.n	8000f3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	4b38      	ldr	r3, [pc, #224]	; (8001054 <HAL_DMA_Init+0x158>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d107      	bne.n	8000fc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f023 0307 	bic.w	r3, r3, #7
 8000fda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d117      	bne.n	800101e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00e      	beq.n	800101e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fa9f 	bl	8001544 <DMA_CheckFifoParam>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2240      	movs	r2, #64	; 0x40
 8001010:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800101a:	2301      	movs	r3, #1
 800101c:	e016      	b.n	800104c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fa56 	bl	80014d8 <DMA_CalcBaseAndBitshift>
 800102c:	4603      	mov	r3, r0
 800102e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001034:	223f      	movs	r2, #63	; 0x3f
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	f010803f 	.word	0xf010803f

08001058 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001076:	2b01      	cmp	r3, #1
 8001078:	d101      	bne.n	800107e <HAL_DMA_Start_IT+0x26>
 800107a:	2302      	movs	r3, #2
 800107c:	e048      	b.n	8001110 <HAL_DMA_Start_IT+0xb8>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d137      	bne.n	8001102 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2202      	movs	r2, #2
 8001096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 f9e8 	bl	800147c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	223f      	movs	r2, #63	; 0x3f
 80010b2:	409a      	lsls	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	f042 0216 	orr.w	r2, r2, #22
 80010c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	6952      	ldr	r2, [r2, #20]
 80010d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d007      	beq.n	80010f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	f042 0208 	orr.w	r2, r2, #8
 80010ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	f042 0201 	orr.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e005      	b.n	800110e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800110a:	2302      	movs	r3, #2
 800110c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800110e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d004      	beq.n	8001136 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2280      	movs	r2, #128	; 0x80
 8001130:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e00c      	b.n	8001150 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2205      	movs	r2, #5
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001168:	4b93      	ldr	r3, [pc, #588]	; (80013b8 <HAL_DMA_IRQHandler+0x25c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a93      	ldr	r2, [pc, #588]	; (80013bc <HAL_DMA_IRQHandler+0x260>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0a9b      	lsrs	r3, r3, #10
 8001174:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001186:	2208      	movs	r2, #8
 8001188:	409a      	lsls	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d01a      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	6812      	ldr	r2, [r2, #0]
 80011aa:	f022 0204 	bic.w	r2, r2, #4
 80011ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b4:	2208      	movs	r2, #8
 80011b6:	409a      	lsls	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011cc:	4a7c      	ldr	r2, [pc, #496]	; (80013c0 <HAL_DMA_IRQHandler+0x264>)
 80011ce:	409a      	lsls	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d012      	beq.n	80011fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ea:	4a75      	ldr	r2, [pc, #468]	; (80013c0 <HAL_DMA_IRQHandler+0x264>)
 80011ec:	409a      	lsls	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f6:	f043 0202 	orr.w	r2, r3, #2
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001202:	4a70      	ldr	r2, [pc, #448]	; (80013c4 <HAL_DMA_IRQHandler+0x268>)
 8001204:	409a      	lsls	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d012      	beq.n	8001234 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001220:	4a68      	ldr	r2, [pc, #416]	; (80013c4 <HAL_DMA_IRQHandler+0x268>)
 8001222:	409a      	lsls	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122c:	f043 0204 	orr.w	r2, r3, #4
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001238:	2210      	movs	r2, #16
 800123a:	409a      	lsls	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d043      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d03c      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001256:	2210      	movs	r2, #16
 8001258:	409a      	lsls	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d018      	beq.n	800129e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d108      	bne.n	800128c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	2b00      	cmp	r3, #0
 8001280:	d024      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	4798      	blx	r3
 800128a:	e01f      	b.n	80012cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001290:	2b00      	cmp	r3, #0
 8001292:	d01b      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	4798      	blx	r3
 800129c:	e016      	b.n	80012cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	f022 0208 	bic.w	r2, r2, #8
 80012ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	2220      	movs	r2, #32
 80012d2:	409a      	lsls	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 8094 	beq.w	8001406 <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 808c 	beq.w	8001406 <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f2:	2220      	movs	r2, #32
 80012f4:	409a      	lsls	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b05      	cmp	r3, #5
 8001304:	d137      	bne.n	8001376 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	f022 0216 	bic.w	r2, r2, #22
 8001314:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	6952      	ldr	r2, [r2, #20]
 8001320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001324:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d103      	bne.n	8001336 <HAL_DMA_IRQHandler+0x1da>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001332:	2b00      	cmp	r3, #0
 8001334:	d007      	beq.n	8001346 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	f022 0208 	bic.w	r2, r2, #8
 8001344:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134a:	223f      	movs	r2, #63	; 0x3f
 800134c:	409a      	lsls	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8083 	beq.w	8001472 <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
        }
        return;
 8001374:	e07d      	b.n	8001472 <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d021      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d108      	bne.n	80013a4 <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	2b00      	cmp	r3, #0
 8001398:	d035      	beq.n	8001406 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	4798      	blx	r3
 80013a2:	e030      	b.n	8001406 <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d02c      	beq.n	8001406 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	4798      	blx	r3
 80013b4:	e027      	b.n	8001406 <HAL_DMA_IRQHandler+0x2aa>
 80013b6:	bf00      	nop
 80013b8:	200000c0 	.word	0x200000c0
 80013bc:	1b4e81b5 	.word	0x1b4e81b5
 80013c0:	00800001 	.word	0x00800001
 80013c4:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10f      	bne.n	80013f6 <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	f022 0210 	bic.w	r2, r2, #16
 80013e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140a:	2b00      	cmp	r3, #0
 800140c:	d032      	beq.n	8001474 <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d022      	beq.n	8001460 <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2205      	movs	r2, #5
 800141e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	f022 0201 	bic.w	r2, r2, #1
 8001430:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	3301      	adds	r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	4293      	cmp	r3, r2
 800143c:	d807      	bhi.n	800144e <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f2      	bne.n	8001432 <HAL_DMA_IRQHandler+0x2d6>
 800144c:	e000      	b.n	8001450 <HAL_DMA_IRQHandler+0x2f4>
          break;
 800144e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
 8001470:	e000      	b.n	8001474 <HAL_DMA_IRQHandler+0x318>
        return;
 8001472:	bf00      	nop
    }
  }
}
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop

0800147c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001498:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b40      	cmp	r3, #64	; 0x40
 80014a8:	d108      	bne.n	80014bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014ba:	e007      	b.n	80014cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	60da      	str	r2, [r3, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	3b10      	subs	r3, #16
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <DMA_CalcBaseAndBitshift+0x64>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014f2:	4a13      	ldr	r2, [pc, #76]	; (8001540 <DMA_CalcBaseAndBitshift+0x68>)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d909      	bls.n	800151a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800150e:	f023 0303 	bic.w	r3, r3, #3
 8001512:	1d1a      	adds	r2, r3, #4
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	659a      	str	r2, [r3, #88]	; 0x58
 8001518:	e007      	b.n	800152a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001522:	f023 0303 	bic.w	r3, r3, #3
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	aaaaaaab 	.word	0xaaaaaaab
 8001540:	08006b98 	.word	0x08006b98

08001544 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d11f      	bne.n	800159e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d855      	bhi.n	8001610 <DMA_CheckFifoParam+0xcc>
 8001564:	a201      	add	r2, pc, #4	; (adr r2, 800156c <DMA_CheckFifoParam+0x28>)
 8001566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156a:	bf00      	nop
 800156c:	0800157d 	.word	0x0800157d
 8001570:	0800158f 	.word	0x0800158f
 8001574:	0800157d 	.word	0x0800157d
 8001578:	08001611 	.word	0x08001611
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d045      	beq.n	8001614 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800158c:	e042      	b.n	8001614 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001596:	d13f      	bne.n	8001618 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800159c:	e03c      	b.n	8001618 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015a6:	d121      	bne.n	80015ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d836      	bhi.n	800161c <DMA_CheckFifoParam+0xd8>
 80015ae:	a201      	add	r2, pc, #4	; (adr r2, 80015b4 <DMA_CheckFifoParam+0x70>)
 80015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b4:	080015c5 	.word	0x080015c5
 80015b8:	080015cb 	.word	0x080015cb
 80015bc:	080015c5 	.word	0x080015c5
 80015c0:	080015dd 	.word	0x080015dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
      break;
 80015c8:	e02f      	b.n	800162a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d024      	beq.n	8001620 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015da:	e021      	b.n	8001620 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015e4:	d11e      	bne.n	8001624 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015ea:	e01b      	b.n	8001624 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d902      	bls.n	80015f8 <DMA_CheckFifoParam+0xb4>
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d003      	beq.n	80015fe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015f6:	e018      	b.n	800162a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
      break;
 80015fc:	e015      	b.n	800162a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00e      	beq.n	8001628 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
      break;
 800160e:	e00b      	b.n	8001628 <DMA_CheckFifoParam+0xe4>
      break;
 8001610:	bf00      	nop
 8001612:	e00a      	b.n	800162a <DMA_CheckFifoParam+0xe6>
      break;
 8001614:	bf00      	nop
 8001616:	e008      	b.n	800162a <DMA_CheckFifoParam+0xe6>
      break;
 8001618:	bf00      	nop
 800161a:	e006      	b.n	800162a <DMA_CheckFifoParam+0xe6>
      break;
 800161c:	bf00      	nop
 800161e:	e004      	b.n	800162a <DMA_CheckFifoParam+0xe6>
      break;
 8001620:	bf00      	nop
 8001622:	e002      	b.n	800162a <DMA_CheckFifoParam+0xe6>
      break;   
 8001624:	bf00      	nop
 8001626:	e000      	b.n	800162a <DMA_CheckFifoParam+0xe6>
      break;
 8001628:	bf00      	nop
    }
  } 
  
  return status; 
 800162a:	7bfb      	ldrb	r3, [r7, #15]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	e159      	b.n	8001908 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	f040 8148 	bne.w	8001902 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x4a>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b12      	cmp	r3, #18
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	69b9      	ldr	r1, [r7, #24]
 80016c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0203 	and.w	r2, r3, #3
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d00b      	beq.n	800171e <HAL_GPIO_Init+0xe6>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d007      	beq.n	800171e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001712:	2b11      	cmp	r3, #17
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b12      	cmp	r3, #18
 800171c:	d130      	bne.n	8001780 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 0201 	and.w	r2, r3, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80a2 	beq.w	8001902 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4a56      	ldr	r2, [pc, #344]	; (800191c <HAL_GPIO_Init+0x2e4>)
 80017c4:	4b55      	ldr	r3, [pc, #340]	; (800191c <HAL_GPIO_Init+0x2e4>)
 80017c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_GPIO_Init+0x2e4>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017da:	4a51      	ldr	r2, [pc, #324]	; (8001920 <HAL_GPIO_Init+0x2e8>)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	220f      	movs	r2, #15
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a48      	ldr	r2, [pc, #288]	; (8001924 <HAL_GPIO_Init+0x2ec>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d019      	beq.n	800183a <HAL_GPIO_Init+0x202>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a47      	ldr	r2, [pc, #284]	; (8001928 <HAL_GPIO_Init+0x2f0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d013      	beq.n	8001836 <HAL_GPIO_Init+0x1fe>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a46      	ldr	r2, [pc, #280]	; (800192c <HAL_GPIO_Init+0x2f4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00d      	beq.n	8001832 <HAL_GPIO_Init+0x1fa>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a45      	ldr	r2, [pc, #276]	; (8001930 <HAL_GPIO_Init+0x2f8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <HAL_GPIO_Init+0x1f6>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a44      	ldr	r2, [pc, #272]	; (8001934 <HAL_GPIO_Init+0x2fc>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_GPIO_Init+0x1f2>
 8001826:	2304      	movs	r3, #4
 8001828:	e008      	b.n	800183c <HAL_GPIO_Init+0x204>
 800182a:	2307      	movs	r3, #7
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x204>
 800182e:	2303      	movs	r3, #3
 8001830:	e004      	b.n	800183c <HAL_GPIO_Init+0x204>
 8001832:	2302      	movs	r3, #2
 8001834:	e002      	b.n	800183c <HAL_GPIO_Init+0x204>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x204>
 800183a:	2300      	movs	r3, #0
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	f002 0203 	and.w	r2, r2, #3
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	4093      	lsls	r3, r2
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800184c:	4934      	ldr	r1, [pc, #208]	; (8001920 <HAL_GPIO_Init+0x2e8>)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_GPIO_Init+0x300>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800187e:	4a2e      	ldr	r2, [pc, #184]	; (8001938 <HAL_GPIO_Init+0x300>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001884:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <HAL_GPIO_Init+0x300>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a8:	4a23      	ldr	r2, [pc, #140]	; (8001938 <HAL_GPIO_Init+0x300>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_GPIO_Init+0x300>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d2:	4a19      	ldr	r2, [pc, #100]	; (8001938 <HAL_GPIO_Init+0x300>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_GPIO_Init+0x300>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_GPIO_Init+0x300>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3301      	adds	r3, #1
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b0f      	cmp	r3, #15
 800190c:	f67f aea2 	bls.w	8001654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001910:	bf00      	nop
 8001912:	3724      	adds	r7, #36	; 0x24
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40023800 	.word	0x40023800
 8001920:	40013800 	.word	0x40013800
 8001924:	40020000 	.word	0x40020000
 8001928:	40020400 	.word	0x40020400
 800192c:	40020800 	.word	0x40020800
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40021000 	.word	0x40021000
 8001938:	40013c00 	.word	0x40013c00

0800193c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
 8001948:	4613      	mov	r3, r2
 800194a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800194c:	787b      	ldrb	r3, [r7, #1]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001958:	e003      	b.n	8001962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	041a      	lsls	r2, r3, #16
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	619a      	str	r2, [r3, #24]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	405a      	eors	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	615a      	str	r2, [r3, #20]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a0:	695a      	ldr	r2, [r3, #20]
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 fcf8 	bl	80043a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d075      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019dc:	4ba4      	ldr	r3, [pc, #656]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d00c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e8:	4ba1      	ldr	r3, [pc, #644]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d112      	bne.n	8001a1a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f4:	4b9e      	ldr	r3, [pc, #632]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a00:	d10b      	bne.n	8001a1a <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a02:	4b9b      	ldr	r3, [pc, #620]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d05b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x102>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d157      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e224      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x6e>
 8001a24:	4a92      	ldr	r2, [pc, #584]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a26:	4b92      	ldr	r3, [pc, #584]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e01d      	b.n	8001a6e <HAL_RCC_OscConfig+0xaa>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x92>
 8001a3c:	4a8c      	ldr	r2, [pc, #560]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a3e:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4a89      	ldr	r2, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e00b      	b.n	8001a6e <HAL_RCC_OscConfig+0xaa>
 8001a56:	4a86      	ldr	r2, [pc, #536]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a58:	4b85      	ldr	r3, [pc, #532]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4a83      	ldr	r2, [pc, #524]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	4b82      	ldr	r3, [pc, #520]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d013      	beq.n	8001a9e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff f905 	bl	8000c84 <HAL_GetTick>
 8001a7a:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7e:	f7ff f901 	bl	8000c84 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	; 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e1e9      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a90:	4b77      	ldr	r3, [pc, #476]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0xba>
 8001a9c:	e014      	b.n	8001ac8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9e:	f7ff f8f1 	bl	8000c84 <HAL_GetTick>
 8001aa2:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa6:	f7ff f8ed 	bl	8000c84 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b64      	cmp	r3, #100	; 0x64
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1d5      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab8:	4b6d      	ldr	r3, [pc, #436]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0xe2>
 8001ac4:	e000      	b.n	8001ac8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d077      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00b      	beq.n	8001af8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae0:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d126      	bne.n	8001b3a <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aec:	4b60      	ldr	r3, [pc, #384]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d120      	bne.n	8001b3a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af8:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x14c>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e1a9      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4857      	ldr	r0, [pc, #348]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6919      	ldr	r1, [r3, #16]
 8001b1e:	23f8      	movs	r3, #248	; 0xf8
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	4313      	orrs	r3, r2
 8001b36:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b38:	e044      	b.n	8001bc4 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d02a      	beq.n	8001b98 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b42:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x2b0>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f89c 	bl	8000c84 <HAL_GetTick>
 8001b4c:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff f898 	bl	8000c84 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e180      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6e:	4840      	ldr	r0, [pc, #256]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6919      	ldr	r1, [r3, #16]
 8001b7c:	23f8      	movs	r3, #248	; 0xf8
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	6003      	str	r3, [r0, #0]
 8001b96:	e015      	b.n	8001bc4 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x2b0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f871 	bl	8000c84 <HAL_GetTick>
 8001ba2:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba6:	f7ff f86d 	bl	8000c84 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e155      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d030      	beq.n	8001c32 <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d016      	beq.n	8001c06 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd8:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <HAL_RCC_OscConfig+0x2b4>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bde:	f7ff f851 	bl	8000c84 <HAL_GetTick>
 8001be2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be6:	f7ff f84d 	bl	8000c84 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e135      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x222>
 8001c04:	e015      	b.n	8001c32 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_RCC_OscConfig+0x2b4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f83a 	bl	8000c84 <HAL_GetTick>
 8001c10:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c14:	f7ff f836 	bl	8000c84 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e11e      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8086 	beq.w	8001d4c <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <HAL_RCC_OscConfig+0x2ac>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_RCC_OscConfig+0x2b8>)
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_RCC_OscConfig+0x2b8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c66:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001c68:	f7ff f80c 	bl	8000c84 <HAL_GetTick>
 8001c6c:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c6e:	e010      	b.n	8001c92 <HAL_RCC_OscConfig+0x2ce>
 8001c70:	40023800 	.word	0x40023800
 8001c74:	42470000 	.word	0x42470000
 8001c78:	42470e80 	.word	0x42470e80
 8001c7c:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c80:	f7ff f800 	bl	8000c84 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0e8      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c92:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_RCC_OscConfig+0x4a8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d106      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
 8001ca6:	4a72      	ldr	r2, [pc, #456]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001ca8:	4b71      	ldr	r3, [pc, #452]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb2:	e01c      	b.n	8001cee <HAL_RCC_OscConfig+0x32a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d10c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x312>
 8001cbc:	4a6c      	ldr	r2, [pc, #432]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001cbe:	4b6c      	ldr	r3, [pc, #432]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc8:	4a69      	ldr	r2, [pc, #420]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001cca:	4b69      	ldr	r3, [pc, #420]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd4:	e00b      	b.n	8001cee <HAL_RCC_OscConfig+0x32a>
 8001cd6:	4a66      	ldr	r2, [pc, #408]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	4b65      	ldr	r3, [pc, #404]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce2:	4a63      	ldr	r2, [pc, #396]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	4b62      	ldr	r3, [pc, #392]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d015      	beq.n	8001d22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf6:	f7fe ffc5 	bl	8000c84 <HAL_GetTick>
 8001cfa:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7fe ffc1 	bl	8000c84 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e0a7      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	4b56      	ldr	r3, [pc, #344]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ee      	beq.n	8001cfe <HAL_RCC_OscConfig+0x33a>
 8001d20:	e014      	b.n	8001d4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7fe ffaf 	bl	8000c84 <HAL_GetTick>
 8001d26:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe ffab 	bl	8000c84 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e091      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	4b4b      	ldr	r3, [pc, #300]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8086 	beq.w	8001e62 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d56:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d07d      	beq.n	8001e5e <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d162      	bne.n	8001e30 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b42      	ldr	r3, [pc, #264]	; (8001e74 <HAL_RCC_OscConfig+0x4b0>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7fe ff88 	bl	8000c84 <HAL_GetTick>
 8001d74:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d78:	f7fe ff84 	bl	8000c84 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e06c      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d96:	4836      	ldr	r0, [pc, #216]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001da6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	60fb      	str	r3, [r7, #12]
  return(result);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	085b      	lsrs	r3, r3, #1
 8001dc6:	1e59      	subs	r1, r3, #1
 8001dc8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001dcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	617b      	str	r3, [r7, #20]
  return(result);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001de6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	61fb      	str	r3, [r7, #28]
  return(result);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <HAL_RCC_OscConfig+0x4b0>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe ff3c 	bl	8000c84 <HAL_GetTick>
 8001e0c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe ff38 	bl	8000c84 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e020      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x44c>
 8001e2e:	e018      	b.n	8001e62 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e30:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_OscConfig+0x4b0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7fe ff25 	bl	8000c84 <HAL_GetTick>
 8001e3a:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe ff21 	bl	8000c84 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e009      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_RCC_OscConfig+0x4ac>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x47a>
 8001e5c:	e001      	b.n	8001e62 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3738      	adds	r7, #56	; 0x38
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	40023800 	.word	0x40023800
 8001e74:	42470060 	.word	0x42470060

08001e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e86:	4b81      	ldr	r3, [pc, #516]	; (800208c <HAL_RCC_ClockConfig+0x214>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 020f 	and.w	r2, r3, #15
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d20c      	bcs.n	8001eae <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e94:	4b7d      	ldr	r3, [pc, #500]	; (800208c <HAL_RCC_ClockConfig+0x214>)
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e9c:	4b7b      	ldr	r3, [pc, #492]	; (800208c <HAL_RCC_ClockConfig+0x214>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 020f 	and.w	r2, r3, #15
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0ea      	b.n	8002084 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d008      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eba:	4975      	ldr	r1, [pc, #468]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8001ebc:	4b74      	ldr	r3, [pc, #464]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 8086 	beq.w	8001fe6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b6b      	ldr	r3, [pc, #428]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d119      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0c8      	b.n	8002084 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	4b63      	ldr	r3, [pc, #396]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0b8      	b.n	8002084 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0b0      	b.n	8002084 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f22:	495b      	ldr	r1, [pc, #364]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8001f24:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 0203 	bic.w	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f34:	f7fe fea6 	bl	8000c84 <HAL_GetTick>
 8001f38:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d112      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7fe fe9e 	bl	8000c84 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e094      	b.n	8002084 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5a:	4b4d      	ldr	r3, [pc, #308]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d1ee      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xcc>
 8001f66:	e03e      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d112      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f7fe fe87 	bl	8000c84 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e07d      	b.n	8002084 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f88:	4b41      	ldr	r3, [pc, #260]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d1ee      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xfa>
 8001f94:	e027      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d11d      	bne.n	8001fda <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7fe fe70 	bl	8000c84 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e066      	b.n	8002084 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001fb6:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b0c      	cmp	r3, #12
 8001fc0:	d1ee      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x128>
 8001fc2:	e010      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7fe fe5e 	bl	8000c84 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e054      	b.n	8002084 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1ee      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_RCC_ClockConfig+0x214>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 020f 	and.w	r2, r3, #15
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d90c      	bls.n	800200e <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCC_ClockConfig+0x214>)
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_RCC_ClockConfig+0x214>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 020f 	and.w	r2, r3, #15
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d001      	beq.n	800200e <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e03a      	b.n	8002084 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201a:	491d      	ldr	r1, [pc, #116]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002038:	4915      	ldr	r1, [pc, #84]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800204c:	f000 f826 	bl	800209c <HAL_RCC_GetSysClockFreq>
 8002050:	4601      	mov	r1, r0
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <HAL_RCC_ClockConfig+0x218>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800205a:	23f0      	movs	r3, #240	; 0xf0
 800205c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	60fb      	str	r3, [r7, #12]
  return(result);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	4a08      	ldr	r2, [pc, #32]	; (8002094 <HAL_RCC_ClockConfig+0x21c>)
 8002072:	5cd3      	ldrb	r3, [r2, r3]
 8002074:	fa21 f303 	lsr.w	r3, r1, r3
 8002078:	4a07      	ldr	r2, [pc, #28]	; (8002098 <HAL_RCC_ClockConfig+0x220>)
 800207a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800207c:	2000      	movs	r0, #0
 800207e:	f7fe fdd7 	bl	8000c30 <HAL_InitTick>
  
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023c00 	.word	0x40023c00
 8002090:	40023800 	.word	0x40023800
 8002094:	08006ba0 	.word	0x08006ba0
 8002098:	200000c0 	.word	0x200000c0

0800209c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	b08b      	sub	sp, #44	; 0x2c
 80020a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <HAL_RCC_GetSysClockFreq+0xf0>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d006      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x30>
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d007      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x36>
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d158      	bne.n	8002178 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020c6:	4b32      	ldr	r3, [pc, #200]	; (8002190 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020c8:	623b      	str	r3, [r7, #32]
       break;
 80020ca:	e058      	b.n	800217e <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020cc:	4b31      	ldr	r3, [pc, #196]	; (8002194 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ce:	623b      	str	r3, [r7, #32]
      break;
 80020d0:	e055      	b.n	800217e <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d2:	4b2e      	ldr	r3, [pc, #184]	; (800218c <HAL_RCC_GetSysClockFreq+0xf0>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020da:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_RCC_GetSysClockFreq+0xf0>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d017      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80020e8:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_RCC_GetSysClockFreq+0xf0>)
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f8:	400b      	ands	r3, r1
 80020fa:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80020fe:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6979      	ldr	r1, [r7, #20]
 8002102:	fa91 f1a1 	rbit	r1, r1
 8002106:	6139      	str	r1, [r7, #16]
  return(result);
 8002108:	6939      	ldr	r1, [r7, #16]
 800210a:	fab1 f181 	clz	r1, r1
 800210e:	40cb      	lsrs	r3, r1
 8002110:	fb03 f302 	mul.w	r3, r3, r2
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
 8002116:	e016      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002118:	4a1d      	ldr	r2, [pc, #116]	; (8002190 <HAL_RCC_GetSysClockFreq+0xf4>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002128:	400b      	ands	r3, r1
 800212a:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800212e:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	fa91 f1a1 	rbit	r1, r1
 8002136:	60b9      	str	r1, [r7, #8]
  return(result);
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	fab1 f181 	clz	r1, r1
 800213e:	40cb      	lsrs	r3, r1
 8002140:	fb03 f302 	mul.w	r3, r3, r2
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800214e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002152:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	603b      	str	r3, [r7, #0]
  return(result);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	3301      	adds	r3, #1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 800216c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	623b      	str	r3, [r7, #32]
      break;
 8002176:	e002      	b.n	800217e <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_RCC_GetSysClockFreq+0xf4>)
 800217a:	623b      	str	r3, [r7, #32]
      break;
 800217c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800217e:	6a3b      	ldr	r3, [r7, #32]
}
 8002180:	4618      	mov	r0, r3
 8002182:	372c      	adds	r7, #44	; 0x2c
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40023800 	.word	0x40023800
 8002190:	00f42400 	.word	0x00f42400
 8002194:	017d7840 	.word	0x017d7840

08002198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_RCC_GetHCLKFreq+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	200000c0 	.word	0x200000c0

080021b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80021b6:	f7ff ffef 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021ba:	4601      	mov	r1, r0
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021c8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	603b      	str	r3, [r7, #0]
  return(result);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	08006bb0 	.word	0x08006bb0

080021f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80021fa:	f7ff ffcd 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021fe:	4601      	mov	r1, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8002208:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800220c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	603b      	str	r3, [r7, #0]
  return(result);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	08006bb0 	.word	0x08006bb0

08002238 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_WAKEUPTIMER_GET_IT(hrtc, RTC_IT_WUT))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224a:	2b00      	cmp	r3, #0
 800224c:	d012      	beq.n	8002274 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_WUT) != (uint32_t)RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00b      	beq.n	8002274 <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>
    {
      /* WAKEUPTIMER callback */ 
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f002 f891 	bl	8004384 <HAL_RTCEx_WakeUpTimerEventCallback>
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	68d2      	ldr	r2, [r2, #12]
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002272:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <HAL_RTCEx_WakeUpTimerIRQHandler+0x54>)
 8002276:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800227a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	775a      	strb	r2, [r3, #29]
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40013c00 	.word	0x40013c00

08002290 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10e      	bne.n	80022d0 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d009      	beq.n	80022d0 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
    return;
 80022ce:	e0b1      	b.n	8002434 <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <HAL_SPI_IRQHandler+0x5e>
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d004      	beq.n	80022ee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
    return;
 80022ec:	e0a2      	b.n	8002434 <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	f403 73b0 	and.w	r3, r3, #352	; 0x160
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 809d 	beq.w	8002434 <HAL_SPI_IRQHandler+0x1a4>
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 8097 	beq.w	8002434 <HAL_SPI_IRQHandler+0x1a4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	d023      	beq.n	8002358 <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b03      	cmp	r3, #3
 800231a:	d011      	beq.n	8002340 <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	f043 0204 	orr.w	r2, r3, #4
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	e00b      	b.n	8002358 <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
        return;
 8002356:	e06d      	b.n	8002434 <HAL_SPI_IRQHandler+0x1a4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b00      	cmp	r3, #0
 8002360:	d014      	beq.n	800238c <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <HAL_SPI_IRQHandler+0x120>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	f043 0208 	orr.w	r2, r3, #8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d03c      	beq.n	8002432 <HAL_SPI_IRQHandler+0x1a2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	6852      	ldr	r2, [r2, #4]
 80023c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023c6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d104      	bne.n	80023e4 <HAL_SPI_IRQHandler+0x154>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d022      	beq.n	800242a <HAL_SPI_IRQHandler+0x19a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	6852      	ldr	r2, [r2, #4]
 80023ee:	f022 0203 	bic.w	r2, r2, #3
 80023f2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_SPI_IRQHandler+0x17e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <HAL_SPI_IRQHandler+0x1ac>)
 8002402:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fe85 	bl	8001118 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00c      	beq.n	8002430 <HAL_SPI_IRQHandler+0x1a0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_SPI_IRQHandler+0x1ac>)
 800241c:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fe78 	bl	8001118 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8002428:	e002      	b.n	8002430 <HAL_SPI_IRQHandler+0x1a0>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f808 	bl	8002440 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8002430:	bf00      	nop
 8002432:	bf00      	nop
  }
}
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	08002455 	.word	0x08002455

08002440 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f7ff ffe6 	bl	8002440 <HAL_SPI_ErrorCallback>
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e03f      	b.n	800250e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d106      	bne.n	80024a8 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f002 f89a 	bl	80045dc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2224      	movs	r2, #36	; 0x24
 80024ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	68d2      	ldr	r2, [r2, #12]
 80024ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024be:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fd03 	bl	8002ecc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	6912      	ldr	r2, [r2, #16]
 80024d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	6952      	ldr	r2, [r2, #20]
 80024e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024e4:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	68d2      	ldr	r2, [r2, #12]
 80024f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024f4:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b088      	sub	sp, #32
 800251a:	af02      	add	r7, sp, #8
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b20      	cmp	r3, #32
 8002534:	f040 8082 	bne.w	800263c <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_UART_Transmit+0x2e>
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e07a      	b.n	800263e <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_UART_Transmit+0x40>
 8002552:	2302      	movs	r3, #2
 8002554:	e073      	b.n	800263e <HAL_UART_Transmit+0x128>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2221      	movs	r2, #33	; 0x21
 8002568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800256c:	f7fe fb8a 	bl	8000c84 <HAL_GetTick>
 8002570:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	88fa      	ldrh	r2, [r7, #6]
 8002576:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	88fa      	ldrh	r2, [r7, #6]
 800257c:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800257e:	e041      	b.n	8002604 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002596:	d121      	bne.n	80025dc <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2200      	movs	r2, #0
 80025a0:	2180      	movs	r1, #128	; 0x80
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fb19 	bl	8002bda <UART_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e045      	b.n	800263e <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	8812      	ldrh	r2, [r2, #0]
 80025be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025c2:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	3302      	adds	r3, #2
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	e017      	b.n	8002604 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3301      	adds	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	e013      	b.n	8002604 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2200      	movs	r2, #0
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 faf7 	bl	8002bda <UART_WaitOnFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e023      	b.n	800263e <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1c59      	adds	r1, r3, #1
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1b8      	bne.n	8002580 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2200      	movs	r2, #0
 8002616:	2140      	movs	r1, #64	; 0x40
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fade 	bl	8002bda <UART_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e00a      	b.n	800263e <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	e000      	b.n	800263e <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 800263c:	2302      	movs	r3, #2
  }
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b20      	cmp	r3, #32
 8002660:	d153      	bne.n	800270a <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_UART_Transmit_DMA+0x26>
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e04c      	b.n	800270c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_UART_Transmit_DMA+0x38>
 800267c:	2302      	movs	r3, #2
 800267e:	e045      	b.n	800270c <HAL_UART_Transmit_DMA+0xc4>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2221      	movs	r2, #33	; 0x21
 80026a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_UART_Transmit_DMA+0xcc>)
 80026ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	4a18      	ldr	r2, [pc, #96]	; (8002718 <HAL_UART_Transmit_DMA+0xd0>)
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	4a17      	ldr	r2, [pc, #92]	; (800271c <HAL_UART_Transmit_DMA+0xd4>)
 80026be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	2200      	movs	r2, #0
 80026c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	3304      	adds	r3, #4
 80026dc:	461a      	mov	r2, r3
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	f7fe fcba 	bl	8001058 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ec:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	6952      	ldr	r2, [r2, #20]
 8002700:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002704:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
  }
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	08002a55 	.word	0x08002a55
 8002718:	08002aa7 	.word	0x08002aa7
 800271c:	08002b47 	.word	0x08002b47

08002720 <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b20      	cmp	r3, #32
 8002738:	d166      	bne.n	8002808 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_UART_Receive_DMA+0x26>
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e05f      	b.n	800280a <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_UART_Receive_DMA+0x38>
 8002754:	2302      	movs	r3, #2
 8002756:	e058      	b.n	800280a <HAL_UART_Receive_DMA+0xea>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	88fa      	ldrh	r2, [r7, #6]
 800276a:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2222      	movs	r2, #34	; 0x22
 8002776:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	4a25      	ldr	r2, [pc, #148]	; (8002814 <HAL_UART_Receive_DMA+0xf4>)
 8002780:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	4a24      	ldr	r2, [pc, #144]	; (8002818 <HAL_UART_Receive_DMA+0xf8>)
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278e:	4a23      	ldr	r2, [pc, #140]	; (800281c <HAL_UART_Receive_DMA+0xfc>)
 8002790:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002796:	2200      	movs	r2, #0
 8002798:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 800279a:	f107 0308 	add.w	r3, r7, #8
 800279e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3304      	adds	r3, #4
 80027aa:	4619      	mov	r1, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	f7fe fc51 	bl	8001058 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	6952      	ldr	r2, [r2, #20]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	6952      	ldr	r2, [r2, #20]
 80027fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002802:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	e000      	b.n	800280a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8002808:	2302      	movs	r3, #2
  }
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	08002ac3 	.word	0x08002ac3
 8002818:	08002b2b 	.word	0x08002b2b
 800281c:	08002b47 	.word	0x08002b47

08002820 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10d      	bne.n	8002872 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_UART_IRQHandler+0x52>
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fab4 	bl	8002dd8 <UART_Receive_IT>
      return;
 8002870:	e0cc      	b.n	8002a0c <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80ab 	beq.w	80029d0 <HAL_UART_IRQHandler+0x1b0>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_UART_IRQHandler+0x70>
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80a0 	beq.w	80029d0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_UART_IRQHandler+0x90>
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_UART_IRQHandler+0xb0>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	f043 0202 	orr.w	r2, r3, #2
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_UART_IRQHandler+0xd0>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	f043 0204 	orr.w	r2, r3, #4
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_UART_IRQHandler+0xf0>
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	f043 0208 	orr.w	r2, r3, #8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d078      	beq.n	8002a0a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_UART_IRQHandler+0x112>
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fa53 	bl	8002dd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <HAL_UART_IRQHandler+0x13a>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d031      	beq.n	80029be <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f99d 	bl	8002c9a <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d023      	beq.n	80029b6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	6952      	ldr	r2, [r2, #20]
 8002978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800297c:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	2b00      	cmp	r3, #0
 8002984:	d013      	beq.n	80029ae <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298a:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <HAL_UART_IRQHandler+0x1f4>)
 800298c:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fbc0 	bl	8001118 <HAL_DMA_Abort_IT>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d016      	beq.n	80029cc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029a8:	4610      	mov	r0, r2
 80029aa:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	e00e      	b.n	80029cc <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f846 	bl	8002a40 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b4:	e00a      	b.n	80029cc <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f842 	bl	8002a40 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029bc:	e006      	b.n	80029cc <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f83e 	bl	8002a40 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80029ca:	e01e      	b.n	8002a0a <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	bf00      	nop
    return;
 80029ce:	e01c      	b.n	8002a0a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_UART_IRQHandler+0x1cc>
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f98a 	bl	8002cfe <UART_Transmit_IT>
    return;
 80029ea:	e00f      	b.n	8002a0c <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_UART_IRQHandler+0x1ec>
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f9d1 	bl	8002da8 <UART_EndTransmit_IT>
    return;
 8002a06:	bf00      	nop
 8002a08:	e000      	b.n	8002a0c <HAL_UART_IRQHandler+0x1ec>
    return;
 8002a0a:	bf00      	nop
  }
}
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	08002cd7 	.word	0x08002cd7

08002a18 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d113      	bne.n	8002a98 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	6952      	ldr	r2, [r2, #20]
 8002a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a84:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	68d2      	ldr	r2, [r2, #12]
 8002a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a94:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 8002a96:	e002      	b.n	8002a9e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f001 fb0d 	bl	80040b8 <HAL_UART_TxCpltCallback>
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7ff ffaf 	bl	8002a18 <HAL_UART_TxHalfCpltCallback>
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ace:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d11e      	bne.n	8002b1c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	6952      	ldr	r2, [r2, #20]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	6952      	ldr	r2, [r2, #20]
 8002b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b12:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f001 fb03 	bl	8004128 <HAL_UART_RxCpltCallback>
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff ff77 	bl	8002a2c <HAL_UART_RxHalfCpltCallback>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b21      	cmp	r3, #33	; 0x21
 8002b78:	d108      	bne.n	8002b8c <UART_DMAError+0x46>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002b86:	68b8      	ldr	r0, [r7, #8]
 8002b88:	f000 f871 	bl	8002c6e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b22      	cmp	r3, #34	; 0x22
 8002bac:	d108      	bne.n	8002bc0 <UART_DMAError+0x7a>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002bba:	68b8      	ldr	r0, [r7, #8]
 8002bbc:	f000 f86d 	bl	8002c9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc4:	f043 0210 	orr.w	r2, r3, #16
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002bcc:	68b8      	ldr	r0, [r7, #8]
 8002bce:	f7ff ff37 	bl	8002a40 <HAL_UART_ErrorCallback>
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4613      	mov	r3, r2
 8002be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002bea:	e02c      	b.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf2:	d028      	beq.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8002bfa:	f7fe f843 	bl	8000c84 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	1ad2      	subs	r2, r2, r3
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d91d      	bls.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	68d2      	ldr	r2, [r2, #12]
 8002c14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	6952      	ldr	r2, [r2, #20]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e00f      	b.n	8002c66 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	401a      	ands	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d0c3      	beq.n	8002bec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	68d2      	ldr	r2, [r2, #12]
 8002c80:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c84:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	68d2      	ldr	r2, [r2, #12]
 8002cac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cb0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	6952      	ldr	r2, [r2, #20]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff fea5 	bl	8002a40 <HAL_UART_ErrorCallback>
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b21      	cmp	r3, #33	; 0x21
 8002d10:	d143      	bne.n	8002d9a <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1a:	d119      	bne.n	8002d50 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	8812      	ldrh	r2, [r2, #0]
 8002d2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d2e:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	1c9a      	adds	r2, r3, #2
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	621a      	str	r2, [r3, #32]
 8002d42:	e00e      	b.n	8002d62 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	621a      	str	r2, [r3, #32]
 8002d4e:	e008      	b.n	8002d62 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	1c58      	adds	r0, r3, #1
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	6208      	str	r0, [r1, #32]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10f      	bne.n	8002d96 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	68d2      	ldr	r2, [r2, #12]
 8002d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	68d2      	ldr	r2, [r2, #12]
 8002d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
  }
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	68d2      	ldr	r2, [r2, #12]
 8002dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dbe:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f001 f975 	bl	80040b8 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b22      	cmp	r3, #34	; 0x22
 8002dea:	d169      	bne.n	8002ec0 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df4:	d123      	bne.n	8002e3e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10e      	bne.n	8002e22 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	1c9a      	adds	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e20:	e029      	b.n	8002e76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e3c:	e01b      	b.n	8002e76 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	1c59      	adds	r1, r3, #1
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6291      	str	r1, [r2, #40]	; 0x28
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	6852      	ldr	r2, [r2, #4]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e00c      	b.n	8002e76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	1c59      	adds	r1, r3, #1
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6291      	str	r1, [r2, #40]	; 0x28
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	6852      	ldr	r2, [r2, #4]
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4619      	mov	r1, r3
 8002e84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	68d2      	ldr	r2, [r2, #12]
 8002e94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	6952      	ldr	r2, [r2, #20]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f001 f938 	bl	8004128 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e002      	b.n	8002ec2 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e000      	b.n	8002ec2 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
  }
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f08:	f023 030c 	bic.w	r3, r3, #12
 8002f0c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f40:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5c:	f040 80e4 	bne.w	8003128 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4aab      	ldr	r2, [pc, #684]	; (8003214 <UART_SetConfig+0x348>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <UART_SetConfig+0xa8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4aaa      	ldr	r2, [pc, #680]	; (8003218 <UART_SetConfig+0x34c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d16c      	bne.n	800304e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681c      	ldr	r4, [r3, #0]
 8002f78:	f7ff f93c 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009a      	lsls	r2, r3, #2
 8002f86:	441a      	add	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	4aa2      	ldr	r2, [pc, #648]	; (800321c <UART_SetConfig+0x350>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	011d      	lsls	r5, r3, #4
 8002f9c:	f7ff f92a 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009a      	lsls	r2, r3, #2
 8002faa:	441a      	add	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8002fb6:	f7ff f91d 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009a      	lsls	r2, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	4a92      	ldr	r2, [pc, #584]	; (800321c <UART_SetConfig+0x350>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2264      	movs	r2, #100	; 0x64
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	1af3      	subs	r3, r6, r3
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	3332      	adds	r3, #50	; 0x32
 8002fe4:	4a8d      	ldr	r2, [pc, #564]	; (800321c <UART_SetConfig+0x350>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ff2:	441d      	add	r5, r3
 8002ff4:	f7ff f8fe 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009a      	lsls	r2, r3, #2
 8003002:	441a      	add	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fbb2 f6f3 	udiv	r6, r2, r3
 800300e:	f7ff f8f1 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8003012:	4602      	mov	r2, r0
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009a      	lsls	r2, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	4a7c      	ldr	r2, [pc, #496]	; (800321c <UART_SetConfig+0x350>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2264      	movs	r2, #100	; 0x64
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	1af3      	subs	r3, r6, r3
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	3332      	adds	r3, #50	; 0x32
 800303c:	4a77      	ldr	r2, [pc, #476]	; (800321c <UART_SetConfig+0x350>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	442b      	add	r3, r5
 800304a:	60a3      	str	r3, [r4, #8]
 800304c:	e154      	b.n	80032f8 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681c      	ldr	r4, [r3, #0]
 8003052:	f7ff f8ad 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8003056:	4602      	mov	r2, r0
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	009a      	lsls	r2, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	4a6b      	ldr	r2, [pc, #428]	; (800321c <UART_SetConfig+0x350>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	011d      	lsls	r5, r3, #4
 8003076:	f7ff f89b 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 800307a:	4602      	mov	r2, r0
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	009a      	lsls	r2, r3, #2
 8003084:	441a      	add	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003090:	f7ff f88e 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8003094:	4602      	mov	r2, r0
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	009a      	lsls	r2, r3, #2
 800309e:	441a      	add	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	4a5c      	ldr	r2, [pc, #368]	; (800321c <UART_SetConfig+0x350>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	2264      	movs	r2, #100	; 0x64
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	1af3      	subs	r3, r6, r3
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	3332      	adds	r3, #50	; 0x32
 80030be:	4a57      	ldr	r2, [pc, #348]	; (800321c <UART_SetConfig+0x350>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030cc:	441d      	add	r5, r3
 80030ce:	f7ff f86f 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	009a      	lsls	r2, r3, #2
 80030dc:	441a      	add	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80030e8:	f7ff f862 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009a      	lsls	r2, r3, #2
 80030f6:	441a      	add	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	4a46      	ldr	r2, [pc, #280]	; (800321c <UART_SetConfig+0x350>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	2264      	movs	r2, #100	; 0x64
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	1af3      	subs	r3, r6, r3
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	3332      	adds	r3, #50	; 0x32
 8003116:	4a41      	ldr	r2, [pc, #260]	; (800321c <UART_SetConfig+0x350>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	442b      	add	r3, r5
 8003124:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003126:	e0e7      	b.n	80032f8 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a39      	ldr	r2, [pc, #228]	; (8003214 <UART_SetConfig+0x348>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <UART_SetConfig+0x270>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a38      	ldr	r2, [pc, #224]	; (8003218 <UART_SetConfig+0x34c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d171      	bne.n	8003220 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681c      	ldr	r4, [r3, #0]
 8003140:	f7ff f858 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8003144:	4602      	mov	r2, r0
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009a      	lsls	r2, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	4a30      	ldr	r2, [pc, #192]	; (800321c <UART_SetConfig+0x350>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	011d      	lsls	r5, r3, #4
 8003164:	f7ff f846 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8003168:	4602      	mov	r2, r0
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	009a      	lsls	r2, r3, #2
 8003172:	441a      	add	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	fbb2 f6f3 	udiv	r6, r2, r3
 800317e:	f7ff f839 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8003182:	4602      	mov	r2, r0
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009a      	lsls	r2, r3, #2
 800318c:	441a      	add	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	4a20      	ldr	r2, [pc, #128]	; (800321c <UART_SetConfig+0x350>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2264      	movs	r2, #100	; 0x64
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	1af3      	subs	r3, r6, r3
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	3332      	adds	r3, #50	; 0x32
 80031ac:	4a1b      	ldr	r2, [pc, #108]	; (800321c <UART_SetConfig+0x350>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b8:	441d      	add	r5, r3
 80031ba:	f7ff f81b 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 80031be:	4602      	mov	r2, r0
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	009a      	lsls	r2, r3, #2
 80031c8:	441a      	add	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80031d4:	f7ff f80e 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009a      	lsls	r2, r3, #2
 80031e2:	441a      	add	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ee:	4a0b      	ldr	r2, [pc, #44]	; (800321c <UART_SetConfig+0x350>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	2264      	movs	r2, #100	; 0x64
 80031f8:	fb02 f303 	mul.w	r3, r2, r3
 80031fc:	1af3      	subs	r3, r6, r3
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	3332      	adds	r3, #50	; 0x32
 8003202:	4a06      	ldr	r2, [pc, #24]	; (800321c <UART_SetConfig+0x350>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	442b      	add	r3, r5
 8003210:	60a3      	str	r3, [r4, #8]
 8003212:	e071      	b.n	80032f8 <UART_SetConfig+0x42c>
 8003214:	40011000 	.word	0x40011000
 8003218:	40011400 	.word	0x40011400
 800321c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681c      	ldr	r4, [r3, #0]
 8003224:	f7fe ffc4 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8003228:	4602      	mov	r2, r0
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	009a      	lsls	r2, r3, #2
 8003232:	441a      	add	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	fbb2 f3f3 	udiv	r3, r2, r3
 800323e:	4a30      	ldr	r2, [pc, #192]	; (8003300 <UART_SetConfig+0x434>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	011d      	lsls	r5, r3, #4
 8003248:	f7fe ffb2 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 800324c:	4602      	mov	r2, r0
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	009a      	lsls	r2, r3, #2
 8003256:	441a      	add	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003262:	f7fe ffa5 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8003266:	4602      	mov	r2, r0
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009a      	lsls	r2, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	4a20      	ldr	r2, [pc, #128]	; (8003300 <UART_SetConfig+0x434>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2264      	movs	r2, #100	; 0x64
 8003286:	fb02 f303 	mul.w	r3, r2, r3
 800328a:	1af3      	subs	r3, r6, r3
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	3332      	adds	r3, #50	; 0x32
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <UART_SetConfig+0x434>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329c:	441d      	add	r5, r3
 800329e:	f7fe ff87 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009a      	lsls	r2, r3, #2
 80032ac:	441a      	add	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80032b8:	f7fe ff7a 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	009a      	lsls	r2, r3, #2
 80032c6:	441a      	add	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <UART_SetConfig+0x434>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	2264      	movs	r2, #100	; 0x64
 80032dc:	fb02 f303 	mul.w	r3, r2, r3
 80032e0:	1af3      	subs	r3, r6, r3
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	3332      	adds	r3, #50	; 0x32
 80032e6:	4a06      	ldr	r2, [pc, #24]	; (8003300 <UART_SetConfig+0x434>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	442b      	add	r3, r5
 80032f4:	60a3      	str	r3, [r4, #8]
}
 80032f6:	e7ff      	b.n	80032f8 <UART_SetConfig+0x42c>
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003300:	51eb851f 	.word	0x51eb851f

08003304 <send_ATCommand>:
 * @brief  Send an AT command string
 * @param  String command
 * @param  Timeout in ms
 * @retval None
 */
void send_ATCommand(char *cmd, uint32_t esp_timeout) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	uint16_t cmd_len = strlen(cmd);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fc ff6c 	bl	80001ec <strlen>
 8003314:	4603      	mov	r3, r0
 8003316:	81fb      	strh	r3, [r7, #14]

	if (HAL_UART_Transmit(&huart1, (uint8_t *) cmd, cmd_len, esp_timeout) != HAL_OK) {
 8003318:	89fa      	ldrh	r2, [r7, #14]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4803      	ldr	r0, [pc, #12]	; (800332c <send_ATCommand+0x28>)
 8003320:	f7ff f8f9 	bl	8002516 <HAL_UART_Transmit>
//		imprimir("Error");
	}
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20013694 	.word	0x20013694

08003330 <read_buffer>:
	while (Uart1Ready != SET) {}
	Uart1Ready = RESET;
	return 0;
}

void read_buffer() {
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
	while (HAL_UART_Receive_DMA(&huart1, (uint8_t *) aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 8003334:	bf00      	nop
 8003336:	223c      	movs	r2, #60	; 0x3c
 8003338:	4906      	ldr	r1, [pc, #24]	; (8003354 <read_buffer+0x24>)
 800333a:	4807      	ldr	r0, [pc, #28]	; (8003358 <read_buffer+0x28>)
 800333c:	f7ff f9f0 	bl	8002720 <HAL_UART_Receive_DMA>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f7      	bne.n	8003336 <read_buffer+0x6>
	{
		//imprimir("Error Read");
	}
//	while (Uart1Ready != SET) {}
//	Uart1Ready = RESET;
	HAL_Delay(5000);
 8003346:	f241 3088 	movw	r0, #5000	; 0x1388
 800334a:	f7fd fca7 	bl	8000c9c <HAL_Delay>
//	imprimir(aRxBuffer);
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000304 	.word	0x20000304
 8003358:	20013694 	.word	0x20013694

0800335c <leerBuffer>:


void leerBuffer()
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
	imprimir(aRxBuffer);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <leerBuffer+0x10>)
 8003362:	f001 f88d 	bl	8004480 <imprimir>
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000304 	.word	0x20000304

08003370 <network_registration>:

void network_registration(){
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0


	send_ATCommand("AT+CMEE=2\r\n", 5000);
 8003374:	f241 3188 	movw	r1, #5000	; 0x1388
 8003378:	4832      	ldr	r0, [pc, #200]	; (8003444 <network_registration+0xd4>)
 800337a:	f7ff ffc3 	bl	8003304 <send_ATCommand>
	HAL_Delay(5000);
 800337e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003382:	f7fd fc8b 	bl	8000c9c <HAL_Delay>
	leerBuffer();
 8003386:	f7ff ffe9 	bl	800335c <leerBuffer>

	send_ATCommand("AT+COPS=4,2,\"42502\"\r\n", 5000);
 800338a:	f241 3188 	movw	r1, #5000	; 0x1388
 800338e:	482e      	ldr	r0, [pc, #184]	; (8003448 <network_registration+0xd8>)
 8003390:	f7ff ffb8 	bl	8003304 <send_ATCommand>
	while(isOK()!=0){
 8003394:	e00a      	b.n	80033ac <network_registration+0x3c>
		send_ATCommand("AT+COPS=4,2,\"42502\"\r\n", 5000);
 8003396:	f241 3188 	movw	r1, #5000	; 0x1388
 800339a:	482b      	ldr	r0, [pc, #172]	; (8003448 <network_registration+0xd8>)
 800339c:	f7ff ffb2 	bl	8003304 <send_ATCommand>
		leerBuffer();
 80033a0:	f7ff ffdc 	bl	800335c <leerBuffer>
		HAL_Delay(2000);
 80033a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80033a8:	f7fd fc78 	bl	8000c9c <HAL_Delay>
	while(isOK()!=0){
 80033ac:	f000 f896 	bl	80034dc <isOK>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1ef      	bne.n	8003396 <network_registration+0x26>
	}
	HAL_Delay(2000);
 80033b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80033ba:	f7fd fc6f 	bl	8000c9c <HAL_Delay>

	send_ATCommand("AT+CGDCONT=1,\"IP\",\"internetm2m.air.com\"\r\n", 5000);
 80033be:	f241 3188 	movw	r1, #5000	; 0x1388
 80033c2:	4822      	ldr	r0, [pc, #136]	; (800344c <network_registration+0xdc>)
 80033c4:	f7ff ff9e 	bl	8003304 <send_ATCommand>
	while(isOK()!=0){
 80033c8:	e00a      	b.n	80033e0 <network_registration+0x70>
		send_ATCommand("AT+CGDCONT=1,\"IP\",\"internetm2m.air.com\"\r\n", 5000);
 80033ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80033ce:	481f      	ldr	r0, [pc, #124]	; (800344c <network_registration+0xdc>)
 80033d0:	f7ff ff98 	bl	8003304 <send_ATCommand>
		leerBuffer();
 80033d4:	f7ff ffc2 	bl	800335c <leerBuffer>
		HAL_Delay(2000);
 80033d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80033dc:	f7fd fc5e 	bl	8000c9c <HAL_Delay>
	while(isOK()!=0){
 80033e0:	f000 f87c 	bl	80034dc <isOK>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1ef      	bne.n	80033ca <network_registration+0x5a>
	}
	HAL_Delay(2000);
 80033ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80033ee:	f7fd fc55 	bl	8000c9c <HAL_Delay>

	send_ATCommand("AT#SGACT=1,1\r\n", 5000);
 80033f2:	f241 3188 	movw	r1, #5000	; 0x1388
 80033f6:	4816      	ldr	r0, [pc, #88]	; (8003450 <network_registration+0xe0>)
 80033f8:	f7ff ff84 	bl	8003304 <send_ATCommand>
	leerBuffer();
 80033fc:	f7ff ffae 	bl	800335c <leerBuffer>
	while(PDPActivated() != 0) {
 8003400:	e00a      	b.n	8003418 <network_registration+0xa8>
		send_ATCommand("AT#SGACT=1,1\r\n", 5000);
 8003402:	f241 3188 	movw	r1, #5000	; 0x1388
 8003406:	4812      	ldr	r0, [pc, #72]	; (8003450 <network_registration+0xe0>)
 8003408:	f7ff ff7c 	bl	8003304 <send_ATCommand>
		leerBuffer();
 800340c:	f7ff ffa6 	bl	800335c <leerBuffer>
		HAL_Delay(5000);
 8003410:	f241 3088 	movw	r0, #5000	; 0x1388
 8003414:	f7fd fc42 	bl	8000c9c <HAL_Delay>
	while(PDPActivated() != 0) {
 8003418:	f000 f83a 	bl	8003490 <PDPActivated>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1ef      	bne.n	8003402 <network_registration+0x92>
	}
	HAL_Delay(2000);
 8003422:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003426:	f7fd fc39 	bl	8000c9c <HAL_Delay>

	send_ATCommand("AT#HTTPCFG=0,\"larraitz.myruns.com\",80,0,,,0,120,1\r\n",5000);
 800342a:	f241 3188 	movw	r1, #5000	; 0x1388
 800342e:	4809      	ldr	r0, [pc, #36]	; (8003454 <network_registration+0xe4>)
 8003430:	f7ff ff68 	bl	8003304 <send_ATCommand>
	while (isOK() != 0) {
 8003434:	bf00      	nop
 8003436:	f000 f851 	bl	80034dc <isOK>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1fa      	bne.n	8003436 <network_registration+0xc6>
//		send_ATCommand("AT#HTTPCFG=0,\"larraitz.myruns.com\",80,0,,,0,120,1\r\n",5000);
//		leerBuffer();
//		HAL_Delay(2000);
	}
}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}
 8003444:	080069ec 	.word	0x080069ec
 8003448:	080069f8 	.word	0x080069f8
 800344c:	08006a10 	.word	0x08006a10
 8003450:	08006a3c 	.word	0x08006a3c
 8003454:	08006a4c 	.word	0x08006a4c

08003458 <HTTP_post>:

void HTTP_post(){
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
	send_ATCommand("AT#HTTPSND=0,0,\"/pruebas_post.php\",46,\"application/x-www-form-urlencoded\"\r\n",1000);
 800345c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003460:	480a      	ldr	r0, [pc, #40]	; (800348c <HTTP_post+0x34>)
 8003462:	f7ff ff4f 	bl	8003304 <send_ATCommand>
	HAL_Delay(5000);
 8003466:	f241 3088 	movw	r0, #5000	; 0x1388
 800346a:	f7fd fc17 	bl	8000c9c <HAL_Delay>
	enviar_coordenadas_gprs();
 800346e:	f000 fb4b 	bl	8003b08 <enviar_coordenadas_gprs>
//	HAL_Delay(5000);
	while(response_OK() != 0){
 8003472:	e003      	b.n	800347c <HTTP_post+0x24>
		HAL_Delay(10000);
 8003474:	f242 7010 	movw	r0, #10000	; 0x2710
 8003478:	f7fd fc10 	bl	8000c9c <HAL_Delay>
	while(response_OK() != 0){
 800347c:	f000 f848 	bl	8003510 <response_OK>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f6      	bne.n	8003474 <HTTP_post+0x1c>
	}

}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	08006a80 	.word	0x08006a80

08003490 <PDPActivated>:
int PDPActivated(){
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
	char* str = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
	char* acti = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	603b      	str	r3, [r7, #0]
	str = strstr(aRxBuffer,PDP);
 800349e:	490c      	ldr	r1, [pc, #48]	; (80034d0 <PDPActivated+0x40>)
 80034a0:	480c      	ldr	r0, [pc, #48]	; (80034d4 <PDPActivated+0x44>)
 80034a2:	f001 fb8d 	bl	8004bc0 <strstr>
 80034a6:	6078      	str	r0, [r7, #4]
	acti = strstr(aRxBuffer,ACT);
 80034a8:	490b      	ldr	r1, [pc, #44]	; (80034d8 <PDPActivated+0x48>)
 80034aa:	480a      	ldr	r0, [pc, #40]	; (80034d4 <PDPActivated+0x44>)
 80034ac:	f001 fb88 	bl	8004bc0 <strstr>
 80034b0:	6038      	str	r0, [r7, #0]
	if(!(acti || str)){
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <PDPActivated+0x34>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <PDPActivated+0x34>
		return -1;
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	e000      	b.n	80034c6 <PDPActivated+0x36>
	}
	//recoger la IP en la que esta registrado
	return 0;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000008 	.word	0x20000008
 80034d4:	20000304 	.word	0x20000304
 80034d8:	20000010 	.word	0x20000010

080034dc <isOK>:
int isOK() {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
	char* str = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
	str = strstr(aRxBuffer,OK);
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <isOK+0x2c>)
 80034e8:	4808      	ldr	r0, [pc, #32]	; (800350c <isOK+0x30>)
 80034ea:	f001 fb69 	bl	8004bc0 <strstr>
 80034ee:	6078      	str	r0, [r7, #4]
	if(!str){
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <isOK+0x20>
			return -1;
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295
 80034fa:	e000      	b.n	80034fe <isOK+0x22>
	}
	return 0;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000004 	.word	0x20000004
 800350c:	20000304 	.word	0x20000304

08003510 <response_OK>:
		return -1;
	}
	return 0;
}

int response_OK(){
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
	char* str = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
	char* mal = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	60bb      	str	r3, [r7, #8]
	char* cero = NULL;
 800351e:	2300      	movs	r3, #0
 8003520:	607b      	str	r3, [r7, #4]
	str = strstr(aRxBuffer, HTTPPring200);
 8003522:	492a      	ldr	r1, [pc, #168]	; (80035cc <response_OK+0xbc>)
 8003524:	482a      	ldr	r0, [pc, #168]	; (80035d0 <response_OK+0xc0>)
 8003526:	f001 fb4b 	bl	8004bc0 <strstr>
 800352a:	60f8      	str	r0, [r7, #12]
	mal = strstr(aRxBuffer, HTTPPring400);
 800352c:	4929      	ldr	r1, [pc, #164]	; (80035d4 <response_OK+0xc4>)
 800352e:	4828      	ldr	r0, [pc, #160]	; (80035d0 <response_OK+0xc0>)
 8003530:	f001 fb46 	bl	8004bc0 <strstr>
 8003534:	60b8      	str	r0, [r7, #8]
	cero = strstr(aRxBuffer, HTTPPring0);
 8003536:	4928      	ldr	r1, [pc, #160]	; (80035d8 <response_OK+0xc8>)
 8003538:	4825      	ldr	r0, [pc, #148]	; (80035d0 <response_OK+0xc0>)
 800353a:	f001 fb41 	bl	8004bc0 <strstr>
 800353e:	6078      	str	r0, [r7, #4]

	while (str || mal || cero)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1fc      	bne.n	8003540 <response_OK+0x30>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f9      	bne.n	8003540 <response_OK+0x30>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f6      	bne.n	8003540 <response_OK+0x30>
	{}
	if (str) {
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <response_OK+0x52>
		imprimir("Envio OK\r\n");
 8003558:	4820      	ldr	r0, [pc, #128]	; (80035dc <response_OK+0xcc>)
 800355a:	f000 ff91 	bl	8004480 <imprimir>
		return 0;
 800355e:	2300      	movs	r3, #0
 8003560:	e02f      	b.n	80035c2 <response_OK+0xb2>
	} else if (mal) {
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d014      	beq.n	8003592 <response_OK+0x82>
		imprimir("Bad Request\r\n");
 8003568:	481d      	ldr	r0, [pc, #116]	; (80035e0 <response_OK+0xd0>)
 800356a:	f000 ff89 	bl	8004480 <imprimir>
		HAL_Delay(10000);
 800356e:	f242 7010 	movw	r0, #10000	; 0x2710
 8003572:	f7fd fb93 	bl	8000c9c <HAL_Delay>
		send_ATCommand("AT#HTTPSND=0,0,\"/pruebas_post.php\",46,\"application/x-www-form-urlencoded\"\r\n",5000);
 8003576:	f241 3188 	movw	r1, #5000	; 0x1388
 800357a:	481a      	ldr	r0, [pc, #104]	; (80035e4 <response_OK+0xd4>)
 800357c:	f7ff fec2 	bl	8003304 <send_ATCommand>
		HAL_Delay(5000);
 8003580:	f241 3088 	movw	r0, #5000	; 0x1388
 8003584:	f7fd fb8a 	bl	8000c9c <HAL_Delay>
		enviar_coordenadas_gprs();
 8003588:	f000 fabe 	bl	8003b08 <enviar_coordenadas_gprs>
		return -1;
 800358c:	f04f 33ff 	mov.w	r3, #4294967295
 8003590:	e017      	b.n	80035c2 <response_OK+0xb2>
	}
	else if (cero){
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d014      	beq.n	80035c2 <response_OK+0xb2>
		imprimir("Envio 0\r\n");
 8003598:	4813      	ldr	r0, [pc, #76]	; (80035e8 <response_OK+0xd8>)
 800359a:	f000 ff71 	bl	8004480 <imprimir>
		HAL_Delay(10000);
 800359e:	f242 7010 	movw	r0, #10000	; 0x2710
 80035a2:	f7fd fb7b 	bl	8000c9c <HAL_Delay>
		send_ATCommand("AT#HTTPSND=0,0,\"/pruebas_post.php\",46,\"application/x-www-form-urlencoded\"\r\n",5000);
 80035a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80035aa:	480e      	ldr	r0, [pc, #56]	; (80035e4 <response_OK+0xd4>)
 80035ac:	f7ff feaa 	bl	8003304 <send_ATCommand>
		HAL_Delay(5000);
 80035b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80035b4:	f7fd fb72 	bl	8000c9c <HAL_Delay>
		enviar_coordenadas_gprs();
 80035b8:	f000 faa6 	bl	8003b08 <enviar_coordenadas_gprs>
		return -1;
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295
 80035c0:	e7ff      	b.n	80035c2 <response_OK+0xb2>
	}
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000020 	.word	0x20000020
 80035d0:	20000304 	.word	0x20000304
 80035d4:	20000030 	.word	0x20000030
 80035d8:	20000040 	.word	0x20000040
 80035dc:	08006acc 	.word	0x08006acc
 80035e0:	08006ad8 	.word	0x08006ad8
 80035e4:	08006a80 	.word	0x08006a80
 80035e8:	08006ae8 	.word	0x08006ae8

080035ec <inicializar_gps>:

__IO ITStatus UartReady = RESET;
__IO ITStatus Uart1Ready = RESET;

void inicializar_gps(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_DMA(&huart6, (uint8_t *) parsing, 80) != HAL_OK) {
 80035f0:	2250      	movs	r2, #80	; 0x50
 80035f2:	4930      	ldr	r1, [pc, #192]	; (80036b4 <inicializar_gps+0xc8>)
 80035f4:	4830      	ldr	r0, [pc, #192]	; (80036b8 <inicializar_gps+0xcc>)
 80035f6:	f7ff f893 	bl	8002720 <HAL_UART_Receive_DMA>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <inicializar_gps+0x18>
		Error_Handler();
 8003600:	f000 ffb0 	bl	8004564 <Error_Handler>
	}
	while (UartReady != SET) {}
 8003604:	bf00      	nop
 8003606:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <inicializar_gps+0xd0>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d1fa      	bne.n	8003606 <inicializar_gps+0x1a>
	UartReady = RESET;
 8003610:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <inicializar_gps+0xd0>)
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GSV, sizeof(deinit_GSV)) != HAL_OK) {
 8003616:	221a      	movs	r2, #26
 8003618:	4929      	ldr	r1, [pc, #164]	; (80036c0 <inicializar_gps+0xd4>)
 800361a:	4827      	ldr	r0, [pc, #156]	; (80036b8 <inicializar_gps+0xcc>)
 800361c:	f7ff f814 	bl	8002648 <HAL_UART_Transmit_DMA>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <inicializar_gps+0x3e>
		Error_Handler();
 8003626:	f000 ff9d 	bl	8004564 <Error_Handler>
	}
	while (UartReady != SET) {}
 800362a:	bf00      	nop
 800362c:	4b23      	ldr	r3, [pc, #140]	; (80036bc <inicializar_gps+0xd0>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	d1fa      	bne.n	800362c <inicializar_gps+0x40>
	UartReady = RESET;
 8003636:	4b21      	ldr	r3, [pc, #132]	; (80036bc <inicializar_gps+0xd0>)
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GSA, sizeof(deinit_GSA)) != HAL_OK) {
 800363c:	221a      	movs	r2, #26
 800363e:	4921      	ldr	r1, [pc, #132]	; (80036c4 <inicializar_gps+0xd8>)
 8003640:	481d      	ldr	r0, [pc, #116]	; (80036b8 <inicializar_gps+0xcc>)
 8003642:	f7ff f801 	bl	8002648 <HAL_UART_Transmit_DMA>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <inicializar_gps+0x64>
		Error_Handler();
 800364c:	f000 ff8a 	bl	8004564 <Error_Handler>
	}
	while (UartReady != SET) {}
 8003650:	bf00      	nop
 8003652:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <inicializar_gps+0xd0>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d1fa      	bne.n	8003652 <inicializar_gps+0x66>
	UartReady = RESET;
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <inicializar_gps+0xd0>)
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GGA, sizeof(deinit_GGA)) != HAL_OK) {
 8003662:	221a      	movs	r2, #26
 8003664:	4918      	ldr	r1, [pc, #96]	; (80036c8 <inicializar_gps+0xdc>)
 8003666:	4814      	ldr	r0, [pc, #80]	; (80036b8 <inicializar_gps+0xcc>)
 8003668:	f7fe ffee 	bl	8002648 <HAL_UART_Transmit_DMA>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <inicializar_gps+0x8a>
		Error_Handler();
 8003672:	f000 ff77 	bl	8004564 <Error_Handler>
	}
	while (UartReady != SET) {}
 8003676:	bf00      	nop
 8003678:	4b10      	ldr	r3, [pc, #64]	; (80036bc <inicializar_gps+0xd0>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d1fa      	bne.n	8003678 <inicializar_gps+0x8c>
	UartReady = RESET;
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <inicializar_gps+0xd0>)
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) init_RMC, sizeof(init_RMC)) != HAL_OK) {
 8003688:	221a      	movs	r2, #26
 800368a:	4910      	ldr	r1, [pc, #64]	; (80036cc <inicializar_gps+0xe0>)
 800368c:	480a      	ldr	r0, [pc, #40]	; (80036b8 <inicializar_gps+0xcc>)
 800368e:	f7fe ffdb 	bl	8002648 <HAL_UART_Transmit_DMA>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <inicializar_gps+0xb0>
		Error_Handler();
 8003698:	f000 ff64 	bl	8004564 <Error_Handler>
	}
	while (UartReady != SET) {}
 800369c:	bf00      	nop
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <inicializar_gps+0xd0>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d1fa      	bne.n	800369e <inicializar_gps+0xb2>
	UartReady = RESET;
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <inicializar_gps+0xd0>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200134e0 	.word	0x200134e0
 80036b8:	200136e8 	.word	0x200136e8
 80036bc:	200002c4 	.word	0x200002c4
 80036c0:	20000088 	.word	0x20000088
 80036c4:	2000006c 	.word	0x2000006c
 80036c8:	20000050 	.word	0x20000050
 80036cc:	200000a4 	.word	0x200000a4

080036d0 <guardar_coordenadas>:
  * @brief  Las tramas obtenidas se guardan en un struct
  * @param  None
  * @retval None
  */
void guardar_coordenadas(char buffer[])
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	strcpy(mibuffer[c].datos, buffer);
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <guardar_coordenadas+0x44>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	22c8      	movs	r2, #200	; 0xc8
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	4a0d      	ldr	r2, [pc, #52]	; (8003718 <guardar_coordenadas+0x48>)
 80036e4:	4413      	add	r3, r2
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 fa61 	bl	8004bb0 <strcpy>
	c++;
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <guardar_coordenadas+0x44>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	4a07      	ldr	r2, [pc, #28]	; (8003714 <guardar_coordenadas+0x44>)
 80036f6:	6013      	str	r3, [r2, #0]
	if (c == 199)
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <guardar_coordenadas+0x44>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2bc7      	cmp	r3, #199	; 0xc7
 80036fe:	d102      	bne.n	8003706 <guardar_coordenadas+0x36>
	{
		c = 0;
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <guardar_coordenadas+0x44>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
	}
	obtener_coordenadas();
 8003706:	f000 f809 	bl	800371c <obtener_coordenadas>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	200002b8 	.word	0x200002b8
 8003718:	20009800 	.word	0x20009800

0800371c <obtener_coordenadas>:
/**
  * @brief  Se obtienen las coordenadas del gps por la uart
  * @param  None
  * @retval None
  */
void obtener_coordenadas() {
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0

	char* str = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
	char* car = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
	char* p;
	char* busca = "$GPGGA";
 800372a:	4b92      	ldr	r3, [pc, #584]	; (8003974 <obtener_coordenadas+0x258>)
 800372c:	603b      	str	r3, [r7, #0]
//	char* busca = "$GNRMC";

	str = strstr(mibuffer[mb].datos,busca);
 800372e:	4b92      	ldr	r3, [pc, #584]	; (8003978 <obtener_coordenadas+0x25c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	22c8      	movs	r2, #200	; 0xc8
 8003734:	fb02 f303 	mul.w	r3, r2, r3
 8003738:	4a90      	ldr	r2, [pc, #576]	; (800397c <obtener_coordenadas+0x260>)
 800373a:	4413      	add	r3, r2
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f001 fa3e 	bl	8004bc0 <strstr>
 8003744:	60b8      	str	r0, [r7, #8]

	if (str)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d021      	beq.n	8003790 <obtener_coordenadas+0x74>
	{
		car = strchr(str,'\n');
 800374c:	210a      	movs	r1, #10
 800374e:	68b8      	ldr	r0, [r7, #8]
 8003750:	f001 fa20 	bl	8004b94 <strchr>
 8003754:	6078      	str	r0, [r7, #4]
		if (car){
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d009      	beq.n	8003770 <obtener_coordenadas+0x54>
			mb++;
 800375c:	4b86      	ldr	r3, [pc, #536]	; (8003978 <obtener_coordenadas+0x25c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	4a85      	ldr	r2, [pc, #532]	; (8003978 <obtener_coordenadas+0x25c>)
 8003764:	6013      	str	r3, [r2, #0]
			mb = 0;
		}
		return;
	}

	if (mb == 199){
 8003766:	4b84      	ldr	r3, [pc, #528]	; (8003978 <obtener_coordenadas+0x25c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2bc7      	cmp	r3, #199	; 0xc7
 800376c:	d123      	bne.n	80037b6 <obtener_coordenadas+0x9a>
 800376e:	e01f      	b.n	80037b0 <obtener_coordenadas+0x94>
			str = NULL;
 8003770:	2300      	movs	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
			mb++;
 8003774:	4b80      	ldr	r3, [pc, #512]	; (8003978 <obtener_coordenadas+0x25c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	4a7f      	ldr	r2, [pc, #508]	; (8003978 <obtener_coordenadas+0x25c>)
 800377c:	6013      	str	r3, [r2, #0]
			if (mb == 199){
 800377e:	4b7e      	ldr	r3, [pc, #504]	; (8003978 <obtener_coordenadas+0x25c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2bc7      	cmp	r3, #199	; 0xc7
 8003784:	f040 81a6 	bne.w	8003ad4 <obtener_coordenadas+0x3b8>
				mb = 0;
 8003788:	4b7b      	ldr	r3, [pc, #492]	; (8003978 <obtener_coordenadas+0x25c>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
			return;
 800378e:	e1a1      	b.n	8003ad4 <obtener_coordenadas+0x3b8>
		str = NULL;
 8003790:	2300      	movs	r3, #0
 8003792:	60bb      	str	r3, [r7, #8]
		mb++;
 8003794:	4b78      	ldr	r3, [pc, #480]	; (8003978 <obtener_coordenadas+0x25c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	4a77      	ldr	r2, [pc, #476]	; (8003978 <obtener_coordenadas+0x25c>)
 800379c:	6013      	str	r3, [r2, #0]
		if (mb == 199){
 800379e:	4b76      	ldr	r3, [pc, #472]	; (8003978 <obtener_coordenadas+0x25c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2bc7      	cmp	r3, #199	; 0xc7
 80037a4:	f040 8198 	bne.w	8003ad8 <obtener_coordenadas+0x3bc>
			mb = 0;
 80037a8:	4b73      	ldr	r3, [pc, #460]	; (8003978 <obtener_coordenadas+0x25c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
		return;
 80037ae:	e193      	b.n	8003ad8 <obtener_coordenadas+0x3bc>
		mb = 0;
 80037b0:	4b71      	ldr	r3, [pc, #452]	; (8003978 <obtener_coordenadas+0x25c>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
	}

	for (p = strtok(str + 1, ","); p; p = strtok( NULL, ",")) {
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3301      	adds	r3, #1
 80037ba:	4971      	ldr	r1, [pc, #452]	; (8003980 <obtener_coordenadas+0x264>)
 80037bc:	4618      	mov	r0, r3
 80037be:	f002 f837 	bl	8005830 <strtok>
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	e013      	b.n	80037ee <obtener_coordenadas+0xd2>
		nmea[i] = p;
 80037c6:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <obtener_coordenadas+0x268>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	496f      	ldr	r1, [pc, #444]	; (8003988 <obtener_coordenadas+0x26c>)
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		i++;
 80037d2:	4b6c      	ldr	r3, [pc, #432]	; (8003984 <obtener_coordenadas+0x268>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	4a6a      	ldr	r2, [pc, #424]	; (8003984 <obtener_coordenadas+0x268>)
 80037da:	6013      	str	r3, [r2, #0]
		if (i == 13){break;}
 80037dc:	4b69      	ldr	r3, [pc, #420]	; (8003984 <obtener_coordenadas+0x268>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b0d      	cmp	r3, #13
 80037e2:	d008      	beq.n	80037f6 <obtener_coordenadas+0xda>
	for (p = strtok(str + 1, ","); p; p = strtok( NULL, ",")) {
 80037e4:	4966      	ldr	r1, [pc, #408]	; (8003980 <obtener_coordenadas+0x264>)
 80037e6:	2000      	movs	r0, #0
 80037e8:	f002 f822 	bl	8005830 <strtok>
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e8      	bne.n	80037c6 <obtener_coordenadas+0xaa>
 80037f4:	e000      	b.n	80037f8 <obtener_coordenadas+0xdc>
		if (i == 13){break;}
 80037f6:	bf00      	nop
	}
	p = NULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
	i = 0;
 80037fc:	4b61      	ldr	r3, [pc, #388]	; (8003984 <obtener_coordenadas+0x268>)
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
	tipo = *&nmea[0];
 8003802:	4b61      	ldr	r3, [pc, #388]	; (8003988 <obtener_coordenadas+0x26c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a61      	ldr	r2, [pc, #388]	; (800398c <obtener_coordenadas+0x270>)
 8003808:	6013      	str	r3, [r2, #0]
	// Example     -->     $GNRMC ,  014035.00 	,    A    , 4317.3578 , N , 00159.1794 , W , 0.00 , 100.74 , 060417 ,  ,  , A*67 ,
	// Description -->            |  Time UTC  	|  status | latitude  |N/S| longitude  |W/E|Speed |  Angle |  Date	|  |  |Checksum
	//                              01:40:35 UTC| A=active
	//                                          |  V=Void

	if (strcmp(tipo, "GNRMC") == 0) {
 800380a:	4b60      	ldr	r3, [pc, #384]	; (800398c <obtener_coordenadas+0x270>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4960      	ldr	r1, [pc, #384]	; (8003990 <obtener_coordenadas+0x274>)
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc fce1 	bl	80001d8 <strcmp>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	f040 80cd 	bne.w	80039b8 <obtener_coordenadas+0x29c>
		if ((fechaOK == 0) && (*&nmea[9] != '\0')) {
 800381e:	4b5d      	ldr	r3, [pc, #372]	; (8003994 <obtener_coordenadas+0x278>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d120      	bne.n	8003868 <obtener_coordenadas+0x14c>
 8003826:	4b58      	ldr	r3, [pc, #352]	; (8003988 <obtener_coordenadas+0x26c>)
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01c      	beq.n	8003868 <obtener_coordenadas+0x14c>
			fecha = *&nmea[9];
 800382e:	4b56      	ldr	r3, [pc, #344]	; (8003988 <obtener_coordenadas+0x26c>)
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	4a59      	ldr	r2, [pc, #356]	; (8003998 <obtener_coordenadas+0x27c>)
 8003834:	6013      	str	r3, [r2, #0]
			fecha = formatoFecha(fecha);
 8003836:	4b58      	ldr	r3, [pc, #352]	; (8003998 <obtener_coordenadas+0x27c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fc0c 	bl	8004058 <formatoFecha>
 8003840:	4602      	mov	r2, r0
 8003842:	4b55      	ldr	r3, [pc, #340]	; (8003998 <obtener_coordenadas+0x27c>)
 8003844:	601a      	str	r2, [r3, #0]
			strcpy(GPS[numGPS].dia, fecha);
 8003846:	4b55      	ldr	r3, [pc, #340]	; (800399c <obtener_coordenadas+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2226      	movs	r2, #38	; 0x26
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	4a53      	ldr	r2, [pc, #332]	; (80039a0 <obtener_coordenadas+0x284>)
 8003852:	441a      	add	r2, r3
 8003854:	4b50      	ldr	r3, [pc, #320]	; (8003998 <obtener_coordenadas+0x27c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f001 f9a8 	bl	8004bb0 <strcpy>
			fechaOK = numGPS;
 8003860:	4b4e      	ldr	r3, [pc, #312]	; (800399c <obtener_coordenadas+0x280>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a4b      	ldr	r2, [pc, #300]	; (8003994 <obtener_coordenadas+0x278>)
 8003866:	6013      	str	r3, [r2, #0]
		}

		hora = *&nmea[1];
 8003868:	4b47      	ldr	r3, [pc, #284]	; (8003988 <obtener_coordenadas+0x26c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a4d      	ldr	r2, [pc, #308]	; (80039a4 <obtener_coordenadas+0x288>)
 800386e:	6013      	str	r3, [r2, #0]
		hora = formatoHora(hora);
 8003870:	4b4c      	ldr	r3, [pc, #304]	; (80039a4 <obtener_coordenadas+0x288>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fb75 	bl	8003f64 <formatoHora>
 800387a:	4602      	mov	r2, r0
 800387c:	4b49      	ldr	r3, [pc, #292]	; (80039a4 <obtener_coordenadas+0x288>)
 800387e:	601a      	str	r2, [r3, #0]
		latitud = *&nmea[3];
 8003880:	4b41      	ldr	r3, [pc, #260]	; (8003988 <obtener_coordenadas+0x26c>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a48      	ldr	r2, [pc, #288]	; (80039a8 <obtener_coordenadas+0x28c>)
 8003886:	6013      	str	r3, [r2, #0]
		latitud = formatoLat(latitud);
 8003888:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <obtener_coordenadas+0x28c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f000 f9bb 	bl	8003c08 <formatoLat>
 8003892:	4602      	mov	r2, r0
 8003894:	4b44      	ldr	r3, [pc, #272]	; (80039a8 <obtener_coordenadas+0x28c>)
 8003896:	601a      	str	r2, [r3, #0]
		latCoor = *&nmea[4];
 8003898:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <obtener_coordenadas+0x26c>)
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	4a43      	ldr	r2, [pc, #268]	; (80039ac <obtener_coordenadas+0x290>)
 800389e:	6013      	str	r3, [r2, #0]
		longitud = *&nmea[5];
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <obtener_coordenadas+0x26c>)
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	4a42      	ldr	r2, [pc, #264]	; (80039b0 <obtener_coordenadas+0x294>)
 80038a6:	6013      	str	r3, [r2, #0]
		longitud = formatoLong(longitud);
 80038a8:	4b41      	ldr	r3, [pc, #260]	; (80039b0 <obtener_coordenadas+0x294>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fa83 	bl	8003db8 <formatoLong>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4b3e      	ldr	r3, [pc, #248]	; (80039b0 <obtener_coordenadas+0x294>)
 80038b6:	601a      	str	r2, [r3, #0]
		longCoor = *&nmea[6];
 80038b8:	4b33      	ldr	r3, [pc, #204]	; (8003988 <obtener_coordenadas+0x26c>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	4a3d      	ldr	r2, [pc, #244]	; (80039b4 <obtener_coordenadas+0x298>)
 80038be:	6013      	str	r3, [r2, #0]

		strcpy(GPS[numGPS].datos.hora, hora);
 80038c0:	4b36      	ldr	r3, [pc, #216]	; (800399c <obtener_coordenadas+0x280>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2226      	movs	r2, #38	; 0x26
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	3308      	adds	r3, #8
 80038cc:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <obtener_coordenadas+0x284>)
 80038ce:	441a      	add	r2, r3
 80038d0:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <obtener_coordenadas+0x288>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f001 f96a 	bl	8004bb0 <strcpy>
		strcpy(GPS[numGPS].datos.latitud, latitud);
 80038dc:	4b2f      	ldr	r3, [pc, #188]	; (800399c <obtener_coordenadas+0x280>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2226      	movs	r2, #38	; 0x26
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	3310      	adds	r3, #16
 80038e8:	4a2d      	ldr	r2, [pc, #180]	; (80039a0 <obtener_coordenadas+0x284>)
 80038ea:	441a      	add	r2, r3
 80038ec:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <obtener_coordenadas+0x28c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f001 f95c 	bl	8004bb0 <strcpy>
		strcpy(GPS[numGPS].datos.latCoor, latCoor);
 80038f8:	4b28      	ldr	r3, [pc, #160]	; (800399c <obtener_coordenadas+0x280>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2226      	movs	r2, #38	; 0x26
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	3318      	adds	r3, #24
 8003904:	4a26      	ldr	r2, [pc, #152]	; (80039a0 <obtener_coordenadas+0x284>)
 8003906:	4413      	add	r3, r2
 8003908:	1c9a      	adds	r2, r3, #2
 800390a:	4b28      	ldr	r3, [pc, #160]	; (80039ac <obtener_coordenadas+0x290>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f001 f94d 	bl	8004bb0 <strcpy>
		strcpy(GPS[numGPS].datos.longitud, longitud);
 8003916:	4b21      	ldr	r3, [pc, #132]	; (800399c <obtener_coordenadas+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2226      	movs	r2, #38	; 0x26
 800391c:	fb02 f303 	mul.w	r3, r2, r3
 8003920:	3318      	adds	r3, #24
 8003922:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <obtener_coordenadas+0x284>)
 8003924:	4413      	add	r3, r2
 8003926:	1cda      	adds	r2, r3, #3
 8003928:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <obtener_coordenadas+0x294>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f001 f93e 	bl	8004bb0 <strcpy>
		strcpy(GPS[numGPS].datos.longCoor, longCoor);
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <obtener_coordenadas+0x280>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2226      	movs	r2, #38	; 0x26
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	3320      	adds	r3, #32
 8003940:	4a17      	ldr	r2, [pc, #92]	; (80039a0 <obtener_coordenadas+0x284>)
 8003942:	4413      	add	r3, r2
 8003944:	1d5a      	adds	r2, r3, #5
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <obtener_coordenadas+0x298>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4619      	mov	r1, r3
 800394c:	4610      	mov	r0, r2
 800394e:	f001 f92f 	bl	8004bb0 <strcpy>

		numGPS++;
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <obtener_coordenadas+0x280>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	4a10      	ldr	r2, [pc, #64]	; (800399c <obtener_coordenadas+0x280>)
 800395a:	6013      	str	r3, [r2, #0]
		if (numGPS == 999) {
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <obtener_coordenadas+0x280>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003964:	4293      	cmp	r3, r2
 8003966:	f040 80b8 	bne.w	8003ada <obtener_coordenadas+0x3be>
			numGPS = 0;
 800396a:	4b0c      	ldr	r3, [pc, #48]	; (800399c <obtener_coordenadas+0x280>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e0b3      	b.n	8003ada <obtener_coordenadas+0x3be>
 8003972:	bf00      	nop
 8003974:	08006af4 	.word	0x08006af4
 8003978:	200002bc 	.word	0x200002bc
 800397c:	20009800 	.word	0x20009800
 8003980:	08006afc 	.word	0x08006afc
 8003984:	200002b0 	.word	0x200002b0
 8003988:	20013454 	.word	0x20013454
 800398c:	20000354 	.word	0x20000354
 8003990:	08006b00 	.word	0x08006b00
 8003994:	200002c0 	.word	0x200002c0
 8003998:	200134d8 	.word	0x200134d8
 800399c:	200002b4 	.word	0x200002b4
 80039a0:	20000368 	.word	0x20000368
 80039a4:	20000350 	.word	0x20000350
 80039a8:	200134b0 	.word	0x200134b0
 80039ac:	20013590 	.word	0x20013590
 80039b0:	20013444 	.word	0x20013444
 80039b4:	20013558 	.word	0x20013558
// Array index -->        0   |      1       |     2     | 3 |    4       | 5 |     6     |       7     |     8     |    9   |  10  |     11	 |  12  |13|   14
// Example     -->     $GPGGA ,  092152.000  , 4317.3578 , N , 00159.1794 , W ,     1	  ,		06	    ,    1.5    , -10.4  ,   M  ,    51.0	 ,   M  ,  , 0000*54
// Description -->            |   Time UTC   | Latitude  |N/S| Longitude  |W/E|Fix quality|N. satellites|H.diluition|Altitude|Meters|Heigth geoid|Meters|  |checksum
//                              09:21:52 UTC								  |1 = GPS fix
//
	else if (strcmp(tipo, "GPGGA") == 0) {
 80039b8:	4b49      	ldr	r3, [pc, #292]	; (8003ae0 <obtener_coordenadas+0x3c4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4949      	ldr	r1, [pc, #292]	; (8003ae4 <obtener_coordenadas+0x3c8>)
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fc0a 	bl	80001d8 <strcmp>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 8087 	bne.w	8003ada <obtener_coordenadas+0x3be>
		hora = *&nmea[1];
 80039cc:	4b46      	ldr	r3, [pc, #280]	; (8003ae8 <obtener_coordenadas+0x3cc>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a46      	ldr	r2, [pc, #280]	; (8003aec <obtener_coordenadas+0x3d0>)
 80039d2:	6013      	str	r3, [r2, #0]
		hora = formatoHora(hora);
 80039d4:	4b45      	ldr	r3, [pc, #276]	; (8003aec <obtener_coordenadas+0x3d0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fac3 	bl	8003f64 <formatoHora>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b42      	ldr	r3, [pc, #264]	; (8003aec <obtener_coordenadas+0x3d0>)
 80039e2:	601a      	str	r2, [r3, #0]
		latitud = *&nmea[2];
 80039e4:	4b40      	ldr	r3, [pc, #256]	; (8003ae8 <obtener_coordenadas+0x3cc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a41      	ldr	r2, [pc, #260]	; (8003af0 <obtener_coordenadas+0x3d4>)
 80039ea:	6013      	str	r3, [r2, #0]
		latitud = formatoLat(latitud);
 80039ec:	4b40      	ldr	r3, [pc, #256]	; (8003af0 <obtener_coordenadas+0x3d4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f909 	bl	8003c08 <formatoLat>
 80039f6:	4602      	mov	r2, r0
 80039f8:	4b3d      	ldr	r3, [pc, #244]	; (8003af0 <obtener_coordenadas+0x3d4>)
 80039fa:	601a      	str	r2, [r3, #0]
		latCoor = *&nmea[3];
 80039fc:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <obtener_coordenadas+0x3cc>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a3c      	ldr	r2, [pc, #240]	; (8003af4 <obtener_coordenadas+0x3d8>)
 8003a02:	6013      	str	r3, [r2, #0]
		longitud = *&nmea[4];
 8003a04:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <obtener_coordenadas+0x3cc>)
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	4a3b      	ldr	r2, [pc, #236]	; (8003af8 <obtener_coordenadas+0x3dc>)
 8003a0a:	6013      	str	r3, [r2, #0]
		longitud = formatoLong(longitud);
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	; (8003af8 <obtener_coordenadas+0x3dc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 f9d1 	bl	8003db8 <formatoLong>
 8003a16:	4602      	mov	r2, r0
 8003a18:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <obtener_coordenadas+0x3dc>)
 8003a1a:	601a      	str	r2, [r3, #0]
		longCoor = *&nmea[5];
 8003a1c:	4b32      	ldr	r3, [pc, #200]	; (8003ae8 <obtener_coordenadas+0x3cc>)
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	4a36      	ldr	r2, [pc, #216]	; (8003afc <obtener_coordenadas+0x3e0>)
 8003a22:	6013      	str	r3, [r2, #0]

		strcpy(GPS[numGPS].datos.hora, hora);
 8003a24:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <obtener_coordenadas+0x3e4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2226      	movs	r2, #38	; 0x26
 8003a2a:	fb02 f303 	mul.w	r3, r2, r3
 8003a2e:	3308      	adds	r3, #8
 8003a30:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <obtener_coordenadas+0x3e8>)
 8003a32:	441a      	add	r2, r3
 8003a34:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <obtener_coordenadas+0x3d0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f001 f8b8 	bl	8004bb0 <strcpy>
		strcpy(GPS[numGPS].datos.latitud, latitud);
 8003a40:	4b2f      	ldr	r3, [pc, #188]	; (8003b00 <obtener_coordenadas+0x3e4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2226      	movs	r2, #38	; 0x26
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	3310      	adds	r3, #16
 8003a4c:	4a2d      	ldr	r2, [pc, #180]	; (8003b04 <obtener_coordenadas+0x3e8>)
 8003a4e:	441a      	add	r2, r3
 8003a50:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <obtener_coordenadas+0x3d4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f001 f8aa 	bl	8004bb0 <strcpy>
		strcpy(GPS[numGPS].datos.latCoor, latCoor);
 8003a5c:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <obtener_coordenadas+0x3e4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2226      	movs	r2, #38	; 0x26
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	3318      	adds	r3, #24
 8003a68:	4a26      	ldr	r2, [pc, #152]	; (8003b04 <obtener_coordenadas+0x3e8>)
 8003a6a:	4413      	add	r3, r2
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	4b21      	ldr	r3, [pc, #132]	; (8003af4 <obtener_coordenadas+0x3d8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4619      	mov	r1, r3
 8003a74:	4610      	mov	r0, r2
 8003a76:	f001 f89b 	bl	8004bb0 <strcpy>
		strcpy(GPS[numGPS].datos.longitud, longitud);
 8003a7a:	4b21      	ldr	r3, [pc, #132]	; (8003b00 <obtener_coordenadas+0x3e4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2226      	movs	r2, #38	; 0x26
 8003a80:	fb02 f303 	mul.w	r3, r2, r3
 8003a84:	3318      	adds	r3, #24
 8003a86:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <obtener_coordenadas+0x3e8>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	1cda      	adds	r2, r3, #3
 8003a8c:	4b1a      	ldr	r3, [pc, #104]	; (8003af8 <obtener_coordenadas+0x3dc>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f001 f88c 	bl	8004bb0 <strcpy>
		strcpy(GPS[numGPS].datos.longCoor, longCoor);
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <obtener_coordenadas+0x3e4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2226      	movs	r2, #38	; 0x26
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	3320      	adds	r3, #32
 8003aa4:	4a17      	ldr	r2, [pc, #92]	; (8003b04 <obtener_coordenadas+0x3e8>)
 8003aa6:	4413      	add	r3, r2
 8003aa8:	1d5a      	adds	r2, r3, #5
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <obtener_coordenadas+0x3e0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f001 f87d 	bl	8004bb0 <strcpy>

		numGPS++;
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <obtener_coordenadas+0x3e4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3301      	adds	r3, #1
 8003abc:	4a10      	ldr	r2, [pc, #64]	; (8003b00 <obtener_coordenadas+0x3e4>)
 8003abe:	6013      	str	r3, [r2, #0]
		if (numGPS == 999) {
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <obtener_coordenadas+0x3e4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d106      	bne.n	8003ada <obtener_coordenadas+0x3be>
			numGPS = 0;
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <obtener_coordenadas+0x3e4>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	e002      	b.n	8003ada <obtener_coordenadas+0x3be>
			return;
 8003ad4:	bf00      	nop
 8003ad6:	e000      	b.n	8003ada <obtener_coordenadas+0x3be>
		return;
 8003ad8:	bf00      	nop
		}
	}
}
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000354 	.word	0x20000354
 8003ae4:	08006b08 	.word	0x08006b08
 8003ae8:	20013454 	.word	0x20013454
 8003aec:	20000350 	.word	0x20000350
 8003af0:	200134b0 	.word	0x200134b0
 8003af4:	20013590 	.word	0x20013590
 8003af8:	20013444 	.word	0x20013444
 8003afc:	20013558 	.word	0x20013558
 8003b00:	200002b4 	.word	0x200002b4
 8003b04:	20000368 	.word	0x20000368

08003b08 <enviar_coordenadas_gprs>:
}

char bufferGPRS[46];

void enviar_coordenadas_gprs(char *buf)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af04      	add	r7, sp, #16
 8003b0e:	6078      	str	r0, [r7, #4]

	int numero = numGPS-1;
 8003b10:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <enviar_coordenadas_gprs+0xdc>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
	if (numero == -1) {
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d102      	bne.n	8003b26 <enviar_coordenadas_gprs+0x1e>
		numero = 999;
 8003b20:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003b24:	60fb      	str	r3, [r7, #12]
	}
	strcpy(horaL, GPS[numero].datos.hora);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2226      	movs	r2, #38	; 0x26
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	3308      	adds	r3, #8
 8003b30:	4a2d      	ldr	r2, [pc, #180]	; (8003be8 <enviar_coordenadas_gprs+0xe0>)
 8003b32:	4413      	add	r3, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	482d      	ldr	r0, [pc, #180]	; (8003bec <enviar_coordenadas_gprs+0xe4>)
 8003b38:	f001 f83a 	bl	8004bb0 <strcpy>
	horaL[8] = '\0';
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <enviar_coordenadas_gprs+0xe4>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	721a      	strb	r2, [r3, #8]
	strcpy(latitudL, GPS[numero].datos.latitud);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2226      	movs	r2, #38	; 0x26
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	3310      	adds	r3, #16
 8003b4c:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <enviar_coordenadas_gprs+0xe0>)
 8003b4e:	4413      	add	r3, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	4827      	ldr	r0, [pc, #156]	; (8003bf0 <enviar_coordenadas_gprs+0xe8>)
 8003b54:	f001 f82c 	bl	8004bb0 <strcpy>
	latitudL[10] = '\0';
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <enviar_coordenadas_gprs+0xe8>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	729a      	strb	r2, [r3, #10]
	strcpy(latCoorL, GPS[numero].datos.latCoor);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2226      	movs	r2, #38	; 0x26
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	3318      	adds	r3, #24
 8003b68:	4a1f      	ldr	r2, [pc, #124]	; (8003be8 <enviar_coordenadas_gprs+0xe0>)
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4820      	ldr	r0, [pc, #128]	; (8003bf4 <enviar_coordenadas_gprs+0xec>)
 8003b72:	f001 f81d 	bl	8004bb0 <strcpy>
	latCoorL[1] = '\0';
 8003b76:	4b1f      	ldr	r3, [pc, #124]	; (8003bf4 <enviar_coordenadas_gprs+0xec>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	705a      	strb	r2, [r3, #1]
	strcpy(longitudL, GPS[numero].datos.longitud);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2226      	movs	r2, #38	; 0x26
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	3318      	adds	r3, #24
 8003b86:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <enviar_coordenadas_gprs+0xe0>)
 8003b88:	4413      	add	r3, r2
 8003b8a:	3303      	adds	r3, #3
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	481a      	ldr	r0, [pc, #104]	; (8003bf8 <enviar_coordenadas_gprs+0xf0>)
 8003b90:	f001 f80e 	bl	8004bb0 <strcpy>
	longitudL[10] = '\0';
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <enviar_coordenadas_gprs+0xf0>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	729a      	strb	r2, [r3, #10]
	strcpy(longCoorL, GPS[numero].datos.longCoor);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2226      	movs	r2, #38	; 0x26
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	3320      	adds	r3, #32
 8003ba4:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <enviar_coordenadas_gprs+0xe0>)
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3305      	adds	r3, #5
 8003baa:	4619      	mov	r1, r3
 8003bac:	4813      	ldr	r0, [pc, #76]	; (8003bfc <enviar_coordenadas_gprs+0xf4>)
 8003bae:	f000 ffff 	bl	8004bb0 <strcpy>
	longCoorL[1] = '\0';
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <enviar_coordenadas_gprs+0xf4>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	705a      	strb	r2, [r3, #1]

	sprintf(bufferGPRS, "coordenadas=%s %s %s %s %s\r\n", horaL, latitudL, latCoorL, longitudL, longCoorL);
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <enviar_coordenadas_gprs+0xf4>)
 8003bba:	9302      	str	r3, [sp, #8]
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <enviar_coordenadas_gprs+0xf0>)
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <enviar_coordenadas_gprs+0xec>)
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <enviar_coordenadas_gprs+0xe8>)
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <enviar_coordenadas_gprs+0xe4>)
 8003bc8:	490d      	ldr	r1, [pc, #52]	; (8003c00 <enviar_coordenadas_gprs+0xf8>)
 8003bca:	480e      	ldr	r0, [pc, #56]	; (8003c04 <enviar_coordenadas_gprs+0xfc>)
 8003bcc:	f000 ff98 	bl	8004b00 <siprintf>
	//send_ATCommand_DMA("coordenadas= %s %s %s %s %s\r\n\x1a", horaL, latitudL, latCoorL, longitudL, longCoorL);
	send_ATCommand(bufferGPRS,5000);
 8003bd0:	f241 3188 	movw	r1, #5000	; 0x1388
 8003bd4:	480b      	ldr	r0, [pc, #44]	; (8003c04 <enviar_coordenadas_gprs+0xfc>)
 8003bd6:	f7ff fb95 	bl	8003304 <send_ATCommand>
//	send_ATCommand_DMA("coordenadas=14:08:30 43 18 30.8 N 01 59 10.8 W");
//	send_ATCommand("coordenadas=01:08:30 43 17 30.8 N 01 59 10.8 W\r\n");
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200002b4 	.word	0x200002b4
 8003be8:	20000368 	.word	0x20000368
 8003bec:	2001349c 	.word	0x2001349c
 8003bf0:	200134b4 	.word	0x200134b4
 8003bf4:	2000034c 	.word	0x2000034c
 8003bf8:	200134c0 	.word	0x200134c0
 8003bfc:	200134dc 	.word	0x200134dc
 8003c00:	08006b10 	.word	0x08006b10
 8003c04:	2001355c 	.word	0x2001355c

08003c08 <formatoLat>:
/**
  * @brief  Se ajusta el formato de latitud
  * @param  h: latitud
  * @retval None
  */
char* formatoLat(char *h) {
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b095      	sub	sp, #84	; 0x54
 8003c0c:	af04      	add	r7, sp, #16
 8003c0e:	6078      	str	r0, [r7, #4]

	double degValue = atof(h)/100;
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 ff8b 	bl	8004b2c <atof>
 8003c16:	ec51 0b10 	vmov	r0, r1, d0
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	4b5a      	ldr	r3, [pc, #360]	; (8003d88 <formatoLat+0x180>)
 8003c20:	f7fc fdce 	bl	80007c0 <__aeabi_ddiv>
 8003c24:	4603      	mov	r3, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	int grados = degValue;
 8003c2c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003c30:	f7fc ff36 	bl	8000aa0 <__aeabi_d2iz>
 8003c34:	4603      	mov	r3, r0
 8003c36:	637b      	str	r3, [r7, #52]	; 0x34
	double decMinutesSeconds = ((degValue - grados)) / 0.60;
 8003c38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c3a:	f7fc fc31 	bl	80004a0 <__aeabi_i2d>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	460c      	mov	r4, r1
 8003c42:	461a      	mov	r2, r3
 8003c44:	4623      	mov	r3, r4
 8003c46:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003c4a:	f7fc fadb 	bl	8000204 <__aeabi_dsub>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	460c      	mov	r4, r1
 8003c52:	4618      	mov	r0, r3
 8003c54:	4621      	mov	r1, r4
 8003c56:	a34a      	add	r3, pc, #296	; (adr r3, 8003d80 <formatoLat+0x178>)
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f7fc fdb0 	bl	80007c0 <__aeabi_ddiv>
 8003c60:	4603      	mov	r3, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	double minuteValue = decMinutesSeconds * 60;
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	4b47      	ldr	r3, [pc, #284]	; (8003d8c <formatoLat+0x184>)
 8003c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c72:	f7fc fc7b 	bl	800056c <__aeabi_dmul>
 8003c76:	4603      	mov	r3, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	int minutes = (int) minuteValue;
 8003c7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003c82:	f7fc ff0d 	bl	8000aa0 <__aeabi_d2iz>
 8003c86:	4603      	mov	r3, r0
 8003c88:	61fb      	str	r3, [r7, #28]
	double secsValue = (minuteValue - minutes) * 60;
 8003c8a:	69f8      	ldr	r0, [r7, #28]
 8003c8c:	f7fc fc08 	bl	80004a0 <__aeabi_i2d>
 8003c90:	4603      	mov	r3, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	461a      	mov	r2, r3
 8003c96:	4623      	mov	r3, r4
 8003c98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003c9c:	f7fc fab2 	bl	8000204 <__aeabi_dsub>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	4b37      	ldr	r3, [pc, #220]	; (8003d8c <formatoLat+0x184>)
 8003cae:	f7fc fc5d 	bl	800056c <__aeabi_dmul>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	int segundos = secsValue;
 8003cba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cbe:	f7fc feef 	bl	8000aa0 <__aeabi_d2iz>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	60fb      	str	r3, [r7, #12]
	int decSsegundos = (secsValue-segundos) * 10;
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7fc fbea 	bl	80004a0 <__aeabi_i2d>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cd8:	f7fc fa94 	bl	8000204 <__aeabi_dsub>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	460c      	mov	r4, r1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <formatoLat+0x188>)
 8003cea:	f7fc fc3f 	bl	800056c <__aeabi_dmul>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	f7fc fed3 	bl	8000aa0 <__aeabi_d2iz>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	60bb      	str	r3, [r7, #8]

	if(grados < 10){
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	2b09      	cmp	r3, #9
 8003d02:	dc05      	bgt.n	8003d10 <formatoLat+0x108>
		sprintf(g, "0%d", grados);
 8003d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d06:	4923      	ldr	r1, [pc, #140]	; (8003d94 <formatoLat+0x18c>)
 8003d08:	4823      	ldr	r0, [pc, #140]	; (8003d98 <formatoLat+0x190>)
 8003d0a:	f000 fef9 	bl	8004b00 <siprintf>
 8003d0e:	e004      	b.n	8003d1a <formatoLat+0x112>
	} else {
		sprintf(g, "%d", grados);
 8003d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d12:	4922      	ldr	r1, [pc, #136]	; (8003d9c <formatoLat+0x194>)
 8003d14:	4820      	ldr	r0, [pc, #128]	; (8003d98 <formatoLat+0x190>)
 8003d16:	f000 fef3 	bl	8004b00 <siprintf>
	}
	if(minutes < 10){
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	2b09      	cmp	r3, #9
 8003d1e:	dc05      	bgt.n	8003d2c <formatoLat+0x124>
		sprintf(m, "0%d", minutes);
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	491c      	ldr	r1, [pc, #112]	; (8003d94 <formatoLat+0x18c>)
 8003d24:	481e      	ldr	r0, [pc, #120]	; (8003da0 <formatoLat+0x198>)
 8003d26:	f000 feeb 	bl	8004b00 <siprintf>
 8003d2a:	e004      	b.n	8003d36 <formatoLat+0x12e>
	} else {
		sprintf(m, "%d", minutes);
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	491b      	ldr	r1, [pc, #108]	; (8003d9c <formatoLat+0x194>)
 8003d30:	481b      	ldr	r0, [pc, #108]	; (8003da0 <formatoLat+0x198>)
 8003d32:	f000 fee5 	bl	8004b00 <siprintf>
	}
	if(segundos < 10){
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b09      	cmp	r3, #9
 8003d3a:	dc05      	bgt.n	8003d48 <formatoLat+0x140>
		sprintf(s, "0%d", segundos);
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4915      	ldr	r1, [pc, #84]	; (8003d94 <formatoLat+0x18c>)
 8003d40:	4818      	ldr	r0, [pc, #96]	; (8003da4 <formatoLat+0x19c>)
 8003d42:	f000 fedd 	bl	8004b00 <siprintf>
 8003d46:	e004      	b.n	8003d52 <formatoLat+0x14a>
	} else {
		sprintf(s, "%d", segundos);
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4914      	ldr	r1, [pc, #80]	; (8003d9c <formatoLat+0x194>)
 8003d4c:	4815      	ldr	r0, [pc, #84]	; (8003da4 <formatoLat+0x19c>)
 8003d4e:	f000 fed7 	bl	8004b00 <siprintf>
	}
	sprintf(sd, "%d", decSsegundos);
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	4911      	ldr	r1, [pc, #68]	; (8003d9c <formatoLat+0x194>)
 8003d56:	4814      	ldr	r0, [pc, #80]	; (8003da8 <formatoLat+0x1a0>)
 8003d58:	f000 fed2 	bl	8004b00 <siprintf>

	sprintf(lati, "%s %s %s.%s%s", g,m,s,sd,'\0');
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9302      	str	r3, [sp, #8]
 8003d60:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <formatoLat+0x1a0>)
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <formatoLat+0x19c>)
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <formatoLat+0x198>)
 8003d6a:	4a0b      	ldr	r2, [pc, #44]	; (8003d98 <formatoLat+0x190>)
 8003d6c:	490f      	ldr	r1, [pc, #60]	; (8003dac <formatoLat+0x1a4>)
 8003d6e:	4810      	ldr	r0, [pc, #64]	; (8003db0 <formatoLat+0x1a8>)
 8003d70:	f000 fec6 	bl	8004b00 <siprintf>

	return lati;
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <formatoLat+0x1a8>)
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3744      	adds	r7, #68	; 0x44
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd90      	pop	{r4, r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	33333333 	.word	0x33333333
 8003d84:	3fe33333 	.word	0x3fe33333
 8003d88:	40590000 	.word	0x40590000
 8003d8c:	404e0000 	.word	0x404e0000
 8003d90:	40240000 	.word	0x40240000
 8003d94:	08006b30 	.word	0x08006b30
 8003d98:	20000364 	.word	0x20000364
 8003d9c:	08006b34 	.word	0x08006b34
 8003da0:	2001358c 	.word	0x2001358c
 8003da4:	200134d4 	.word	0x200134d4
 8003da8:	200134cc 	.word	0x200134cc
 8003dac:	08006b38 	.word	0x08006b38
 8003db0:	20000358 	.word	0x20000358
 8003db4:	00000000 	.word	0x00000000

08003db8 <formatoLong>:
/**
  * @brief  Se ajusta el formato de longitud
  * @param  h: longitud
  * @retval None
  */
char* formatoLong(char *h) {
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b095      	sub	sp, #84	; 0x54
 8003dbc:	af04      	add	r7, sp, #16
 8003dbe:	6078      	str	r0, [r7, #4]

	double degValue = atof(h)/100;
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 feb3 	bl	8004b2c <atof>
 8003dc6:	ec51 0b10 	vmov	r0, r1, d0
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	4b5a      	ldr	r3, [pc, #360]	; (8003f38 <formatoLong+0x180>)
 8003dd0:	f7fc fcf6 	bl	80007c0 <__aeabi_ddiv>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	int grados = degValue;
 8003ddc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003de0:	f7fc fe5e 	bl	8000aa0 <__aeabi_d2iz>
 8003de4:	4603      	mov	r3, r0
 8003de6:	637b      	str	r3, [r7, #52]	; 0x34
	double decMinutesSeconds = ((degValue - grados)) / 0.60;
 8003de8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003dea:	f7fc fb59 	bl	80004a0 <__aeabi_i2d>
 8003dee:	4603      	mov	r3, r0
 8003df0:	460c      	mov	r4, r1
 8003df2:	461a      	mov	r2, r3
 8003df4:	4623      	mov	r3, r4
 8003df6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003dfa:	f7fc fa03 	bl	8000204 <__aeabi_dsub>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	460c      	mov	r4, r1
 8003e02:	4618      	mov	r0, r3
 8003e04:	4621      	mov	r1, r4
 8003e06:	a34a      	add	r3, pc, #296	; (adr r3, 8003f30 <formatoLong+0x178>)
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f7fc fcd8 	bl	80007c0 <__aeabi_ddiv>
 8003e10:	4603      	mov	r3, r0
 8003e12:	460c      	mov	r4, r1
 8003e14:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	double minuteValue = decMinutesSeconds * 60;
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <formatoLong+0x184>)
 8003e1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e22:	f7fc fba3 	bl	800056c <__aeabi_dmul>
 8003e26:	4603      	mov	r3, r0
 8003e28:	460c      	mov	r4, r1
 8003e2a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	int minutes = (int) minuteValue;
 8003e2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e32:	f7fc fe35 	bl	8000aa0 <__aeabi_d2iz>
 8003e36:	4603      	mov	r3, r0
 8003e38:	61fb      	str	r3, [r7, #28]
	double secsValue = (minuteValue - minutes) * 60;
 8003e3a:	69f8      	ldr	r0, [r7, #28]
 8003e3c:	f7fc fb30 	bl	80004a0 <__aeabi_i2d>
 8003e40:	4603      	mov	r3, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	461a      	mov	r2, r3
 8003e46:	4623      	mov	r3, r4
 8003e48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003e4c:	f7fc f9da 	bl	8000204 <__aeabi_dsub>
 8003e50:	4603      	mov	r3, r0
 8003e52:	460c      	mov	r4, r1
 8003e54:	4618      	mov	r0, r3
 8003e56:	4621      	mov	r1, r4
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <formatoLong+0x184>)
 8003e5e:	f7fc fb85 	bl	800056c <__aeabi_dmul>
 8003e62:	4603      	mov	r3, r0
 8003e64:	460c      	mov	r4, r1
 8003e66:	e9c7 3404 	strd	r3, r4, [r7, #16]
	int segundos = secsValue;
 8003e6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e6e:	f7fc fe17 	bl	8000aa0 <__aeabi_d2iz>
 8003e72:	4603      	mov	r3, r0
 8003e74:	60fb      	str	r3, [r7, #12]
	int decSsegundos = (secsValue-segundos) * 10;
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7fc fb12 	bl	80004a0 <__aeabi_i2d>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	460c      	mov	r4, r1
 8003e80:	461a      	mov	r2, r3
 8003e82:	4623      	mov	r3, r4
 8003e84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e88:	f7fc f9bc 	bl	8000204 <__aeabi_dsub>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	460c      	mov	r4, r1
 8003e90:	4618      	mov	r0, r3
 8003e92:	4621      	mov	r1, r4
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <formatoLong+0x188>)
 8003e9a:	f7fc fb67 	bl	800056c <__aeabi_dmul>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	f7fc fdfb 	bl	8000aa0 <__aeabi_d2iz>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	60bb      	str	r3, [r7, #8]

	if(grados < 10){
 8003eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb0:	2b09      	cmp	r3, #9
 8003eb2:	dc05      	bgt.n	8003ec0 <formatoLong+0x108>
		sprintf(g, "0%d", grados);
 8003eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eb6:	4923      	ldr	r1, [pc, #140]	; (8003f44 <formatoLong+0x18c>)
 8003eb8:	4823      	ldr	r0, [pc, #140]	; (8003f48 <formatoLong+0x190>)
 8003eba:	f000 fe21 	bl	8004b00 <siprintf>
 8003ebe:	e004      	b.n	8003eca <formatoLong+0x112>
	} else {
		sprintf(g, "%d", grados);
 8003ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ec2:	4922      	ldr	r1, [pc, #136]	; (8003f4c <formatoLong+0x194>)
 8003ec4:	4820      	ldr	r0, [pc, #128]	; (8003f48 <formatoLong+0x190>)
 8003ec6:	f000 fe1b 	bl	8004b00 <siprintf>
	}
	if(minutes < 10){
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	dc05      	bgt.n	8003edc <formatoLong+0x124>
		sprintf(m, "0%d", minutes);
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	491c      	ldr	r1, [pc, #112]	; (8003f44 <formatoLong+0x18c>)
 8003ed4:	481e      	ldr	r0, [pc, #120]	; (8003f50 <formatoLong+0x198>)
 8003ed6:	f000 fe13 	bl	8004b00 <siprintf>
 8003eda:	e004      	b.n	8003ee6 <formatoLong+0x12e>
	} else {
		sprintf(m, "%d", minutes);
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	491b      	ldr	r1, [pc, #108]	; (8003f4c <formatoLong+0x194>)
 8003ee0:	481b      	ldr	r0, [pc, #108]	; (8003f50 <formatoLong+0x198>)
 8003ee2:	f000 fe0d 	bl	8004b00 <siprintf>
	}
	if(segundos < 10){
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b09      	cmp	r3, #9
 8003eea:	dc05      	bgt.n	8003ef8 <formatoLong+0x140>
		sprintf(s, "0%d", segundos);
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4915      	ldr	r1, [pc, #84]	; (8003f44 <formatoLong+0x18c>)
 8003ef0:	4818      	ldr	r0, [pc, #96]	; (8003f54 <formatoLong+0x19c>)
 8003ef2:	f000 fe05 	bl	8004b00 <siprintf>
 8003ef6:	e004      	b.n	8003f02 <formatoLong+0x14a>
	} else {
		sprintf(s, "%d", segundos);
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4914      	ldr	r1, [pc, #80]	; (8003f4c <formatoLong+0x194>)
 8003efc:	4815      	ldr	r0, [pc, #84]	; (8003f54 <formatoLong+0x19c>)
 8003efe:	f000 fdff 	bl	8004b00 <siprintf>
	}
	sprintf(sd, "%d", decSsegundos);
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	4911      	ldr	r1, [pc, #68]	; (8003f4c <formatoLong+0x194>)
 8003f06:	4814      	ldr	r0, [pc, #80]	; (8003f58 <formatoLong+0x1a0>)
 8003f08:	f000 fdfa 	bl	8004b00 <siprintf>

	sprintf(longi, "%s %s %s.%s%s", g,m,s,sd,'\0');
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9302      	str	r3, [sp, #8]
 8003f10:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <formatoLong+0x1a0>)
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <formatoLong+0x19c>)
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <formatoLong+0x198>)
 8003f1a:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <formatoLong+0x190>)
 8003f1c:	490f      	ldr	r1, [pc, #60]	; (8003f5c <formatoLong+0x1a4>)
 8003f1e:	4810      	ldr	r0, [pc, #64]	; (8003f60 <formatoLong+0x1a8>)
 8003f20:	f000 fdee 	bl	8004b00 <siprintf>

	return longi;
 8003f24:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <formatoLong+0x1a8>)
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3744      	adds	r7, #68	; 0x44
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd90      	pop	{r4, r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	33333333 	.word	0x33333333
 8003f34:	3fe33333 	.word	0x3fe33333
 8003f38:	40590000 	.word	0x40590000
 8003f3c:	404e0000 	.word	0x404e0000
 8003f40:	40240000 	.word	0x40240000
 8003f44:	08006b30 	.word	0x08006b30
 8003f48:	20000364 	.word	0x20000364
 8003f4c:	08006b34 	.word	0x08006b34
 8003f50:	2001358c 	.word	0x2001358c
 8003f54:	200134d4 	.word	0x200134d4
 8003f58:	200134cc 	.word	0x200134cc
 8003f5c:	08006b38 	.word	0x08006b38
 8003f60:	20013448 	.word	0x20013448

08003f64 <formatoHora>:
/**
  * @brief  Se ajusta el formato de hora
  * @param  h: hora
  * @retval None
  */
char* formatoHora(char *h) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

	strcpy(time, h);
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4833      	ldr	r0, [pc, #204]	; (800403c <formatoHora+0xd8>)
 8003f70:	f000 fe1e 	bl	8004bb0 <strcpy>
	memset(&hora_array[0], 0, sizeof(hora_array));
 8003f74:	2209      	movs	r2, #9
 8003f76:	2100      	movs	r1, #0
 8003f78:	4831      	ldr	r0, [pc, #196]	; (8004040 <formatoHora+0xdc>)
 8003f7a:	f000 fe03 	bl	8004b84 <memset>
	forhora = atoi(h);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fdd7 	bl	8004b32 <atoi>
 8003f84:	4602      	mov	r2, r0
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <formatoHora+0xe0>)
 8003f88:	601a      	str	r2, [r3, #0]
	forhora = forhora/10000;
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <formatoHora+0xe0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2e      	ldr	r2, [pc, #184]	; (8004048 <formatoHora+0xe4>)
 8003f90:	fb82 1203 	smull	r1, r2, r2, r3
 8003f94:	1312      	asrs	r2, r2, #12
 8003f96:	17db      	asrs	r3, r3, #31
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <formatoHora+0xe0>)
 8003f9c:	6013      	str	r3, [r2, #0]
	forhora = forhora+2;
 8003f9e:	4b29      	ldr	r3, [pc, #164]	; (8004044 <formatoHora+0xe0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	4a27      	ldr	r2, [pc, #156]	; (8004044 <formatoHora+0xe0>)
 8003fa6:	6013      	str	r3, [r2, #0]
	if (forhora<10)
 8003fa8:	4b26      	ldr	r3, [pc, #152]	; (8004044 <formatoHora+0xe0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b09      	cmp	r3, #9
 8003fae:	dc07      	bgt.n	8003fc0 <formatoHora+0x5c>
	{
		sprintf(hora_real, "0%d", forhora);
 8003fb0:	4b24      	ldr	r3, [pc, #144]	; (8004044 <formatoHora+0xe0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4925      	ldr	r1, [pc, #148]	; (800404c <formatoHora+0xe8>)
 8003fb8:	4825      	ldr	r0, [pc, #148]	; (8004050 <formatoHora+0xec>)
 8003fba:	f000 fda1 	bl	8004b00 <siprintf>
 8003fbe:	e017      	b.n	8003ff0 <formatoHora+0x8c>
	} else if (forhora<24)
 8003fc0:	4b20      	ldr	r3, [pc, #128]	; (8004044 <formatoHora+0xe0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b17      	cmp	r3, #23
 8003fc6:	dc07      	bgt.n	8003fd8 <formatoHora+0x74>
	{
		sprintf(hora_real, "%d", forhora);
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <formatoHora+0xe0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4921      	ldr	r1, [pc, #132]	; (8004054 <formatoHora+0xf0>)
 8003fd0:	481f      	ldr	r0, [pc, #124]	; (8004050 <formatoHora+0xec>)
 8003fd2:	f000 fd95 	bl	8004b00 <siprintf>
 8003fd6:	e00b      	b.n	8003ff0 <formatoHora+0x8c>
	} else {
		forhora = forhora-24;
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <formatoHora+0xe0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3b18      	subs	r3, #24
 8003fde:	4a19      	ldr	r2, [pc, #100]	; (8004044 <formatoHora+0xe0>)
 8003fe0:	6013      	str	r3, [r2, #0]
		sprintf(hora_real, "0%d", forhora);
 8003fe2:	4b18      	ldr	r3, [pc, #96]	; (8004044 <formatoHora+0xe0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4918      	ldr	r1, [pc, #96]	; (800404c <formatoHora+0xe8>)
 8003fea:	4819      	ldr	r0, [pc, #100]	; (8004050 <formatoHora+0xec>)
 8003fec:	f000 fd88 	bl	8004b00 <siprintf>
	}

	hora_array[0] = hora_real[0];
 8003ff0:	4b17      	ldr	r3, [pc, #92]	; (8004050 <formatoHora+0xec>)
 8003ff2:	781a      	ldrb	r2, [r3, #0]
 8003ff4:	4b12      	ldr	r3, [pc, #72]	; (8004040 <formatoHora+0xdc>)
 8003ff6:	701a      	strb	r2, [r3, #0]
	hora_array[1] = hora_real[1];
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <formatoHora+0xec>)
 8003ffa:	785a      	ldrb	r2, [r3, #1]
 8003ffc:	4b10      	ldr	r3, [pc, #64]	; (8004040 <formatoHora+0xdc>)
 8003ffe:	705a      	strb	r2, [r3, #1]
	hora_array[2] = ':';
 8004000:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <formatoHora+0xdc>)
 8004002:	223a      	movs	r2, #58	; 0x3a
 8004004:	709a      	strb	r2, [r3, #2]
	hora_array[3] = time[2];
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <formatoHora+0xd8>)
 8004008:	789a      	ldrb	r2, [r3, #2]
 800400a:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <formatoHora+0xdc>)
 800400c:	70da      	strb	r2, [r3, #3]
	hora_array[4] = time[3];
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <formatoHora+0xd8>)
 8004010:	78da      	ldrb	r2, [r3, #3]
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <formatoHora+0xdc>)
 8004014:	711a      	strb	r2, [r3, #4]
	hora_array[5] = ':';
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <formatoHora+0xdc>)
 8004018:	223a      	movs	r2, #58	; 0x3a
 800401a:	715a      	strb	r2, [r3, #5]
	hora_array[6] = time[4];
 800401c:	4b07      	ldr	r3, [pc, #28]	; (800403c <formatoHora+0xd8>)
 800401e:	791a      	ldrb	r2, [r3, #4]
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <formatoHora+0xdc>)
 8004022:	719a      	strb	r2, [r3, #6]
	hora_array[7] = time[5];
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <formatoHora+0xd8>)
 8004026:	795a      	ldrb	r2, [r3, #5]
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <formatoHora+0xdc>)
 800402a:	71da      	strb	r2, [r3, #7]
	hora_array[8] = '\0';
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <formatoHora+0xdc>)
 800402e:	2200      	movs	r2, #0
 8004030:	721a      	strb	r2, [r3, #8]
	return hora_array;
 8004032:	4b03      	ldr	r3, [pc, #12]	; (8004040 <formatoHora+0xdc>)
}
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	200002c8 	.word	0x200002c8
 8004040:	200002d4 	.word	0x200002d4
 8004044:	200134d0 	.word	0x200134d0
 8004048:	68db8bad 	.word	0x68db8bad
 800404c:	08006b30 	.word	0x08006b30
 8004050:	200134a8 	.word	0x200134a8
 8004054:	08006b34 	.word	0x08006b34

08004058 <formatoFecha>:
/**
  * @brief  Se ajusta el formato de hora y de fecha
  * @param  h: hora, f: fecha
  * @retval None
  */
char* formatoFecha(char *f) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]

	strcpy(data, f);
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4813      	ldr	r0, [pc, #76]	; (80040b0 <formatoFecha+0x58>)
 8004064:	f000 fda4 	bl	8004bb0 <strcpy>
	fecha_array[0] = data[0];
 8004068:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <formatoFecha+0x58>)
 800406a:	781a      	ldrb	r2, [r3, #0]
 800406c:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <formatoFecha+0x5c>)
 800406e:	701a      	strb	r2, [r3, #0]
	fecha_array[1] = data[1];
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <formatoFecha+0x58>)
 8004072:	785a      	ldrb	r2, [r3, #1]
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <formatoFecha+0x5c>)
 8004076:	705a      	strb	r2, [r3, #1]
	fecha_array[2] = '/';
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <formatoFecha+0x5c>)
 800407a:	222f      	movs	r2, #47	; 0x2f
 800407c:	709a      	strb	r2, [r3, #2]
	fecha_array[3] = data[2];
 800407e:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <formatoFecha+0x58>)
 8004080:	789a      	ldrb	r2, [r3, #2]
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <formatoFecha+0x5c>)
 8004084:	70da      	strb	r2, [r3, #3]
	fecha_array[4] = data[3];
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <formatoFecha+0x58>)
 8004088:	78da      	ldrb	r2, [r3, #3]
 800408a:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <formatoFecha+0x5c>)
 800408c:	711a      	strb	r2, [r3, #4]
	fecha_array[5] = '/';
 800408e:	4b09      	ldr	r3, [pc, #36]	; (80040b4 <formatoFecha+0x5c>)
 8004090:	222f      	movs	r2, #47	; 0x2f
 8004092:	715a      	strb	r2, [r3, #5]
	fecha_array[6] = data[4];
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <formatoFecha+0x58>)
 8004096:	791a      	ldrb	r2, [r3, #4]
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <formatoFecha+0x5c>)
 800409a:	719a      	strb	r2, [r3, #6]
	fecha_array[7] = data[5];
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <formatoFecha+0x58>)
 800409e:	795a      	ldrb	r2, [r3, #5]
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <formatoFecha+0x5c>)
 80040a2:	71da      	strb	r2, [r3, #7]
	return fecha_array;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <formatoFecha+0x5c>)
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200002e0 	.word	0x200002e0
 80040b4:	200002e8 	.word	0x200002e8

080040b8 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
 {
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1) {
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a12      	ldr	r2, [pc, #72]	; (8004110 <HAL_UART_TxCpltCallback+0x58>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10b      	bne.n	80040e2 <HAL_UART_TxCpltCallback+0x2a>
		(&huart1)->gState = HAL_UART_STATE_READY;
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_UART_TxCpltCallback+0x5c>)
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		Uart1Ready = SET;
 80040d2:	4b11      	ldr	r3, [pc, #68]	; (8004118 <HAL_UART_TxCpltCallback+0x60>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
		(&huart6)->RxState = HAL_UART_STATE_READY;
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <HAL_UART_TxCpltCallback+0x64>)
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	else if (UartHandle->Instance == USART6) {
		(&huart6)->gState = HAL_UART_STATE_READY;
		UartReady = SET;
		(&huart6)->RxState = HAL_UART_STATE_READY;
	}
}
 80040e0:	e00f      	b.n	8004102 <HAL_UART_TxCpltCallback+0x4a>
	else if (UartHandle->Instance == USART6) {
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a0e      	ldr	r2, [pc, #56]	; (8004120 <HAL_UART_TxCpltCallback+0x68>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d10a      	bne.n	8004102 <HAL_UART_TxCpltCallback+0x4a>
		(&huart6)->gState = HAL_UART_STATE_READY;
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_UART_TxCpltCallback+0x64>)
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		UartReady = SET;
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_UART_TxCpltCallback+0x6c>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]
		(&huart6)->RxState = HAL_UART_STATE_READY;
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <HAL_UART_TxCpltCallback+0x64>)
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40011000 	.word	0x40011000
 8004114:	20013694 	.word	0x20013694
 8004118:	200002c5 	.word	0x200002c5
 800411c:	200136e8 	.word	0x200136e8
 8004120:	40011400 	.word	0x40011400
 8004124:	200002c4 	.word	0x200002c4

08004128 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1) {
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <HAL_UART_RxCpltCallback+0x48>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d107      	bne.n	800414a <HAL_UART_RxCpltCallback+0x22>
		(&huart1)->RxState = HAL_UART_STATE_READY;
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <HAL_UART_RxCpltCallback+0x4c>)
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		Uart1Ready = SET;
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_UART_RxCpltCallback+0x50>)
 8004144:	2201      	movs	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
		(&huart6)->RxState = HAL_UART_STATE_READY;
//		imprimir(parsing);
		guardar_coordenadas(parsing);
		UartReady = SET;
	}
}
 8004148:	e00e      	b.n	8004168 <HAL_UART_RxCpltCallback+0x40>
	else if (UartHandle->Instance == USART6) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a0b      	ldr	r2, [pc, #44]	; (800417c <HAL_UART_RxCpltCallback+0x54>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d109      	bne.n	8004168 <HAL_UART_RxCpltCallback+0x40>
		(&huart6)->RxState = HAL_UART_STATE_READY;
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <HAL_UART_RxCpltCallback+0x58>)
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		guardar_coordenadas(parsing);
 800415c:	4809      	ldr	r0, [pc, #36]	; (8004184 <HAL_UART_RxCpltCallback+0x5c>)
 800415e:	f7ff fab7 	bl	80036d0 <guardar_coordenadas>
		UartReady = SET;
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_UART_RxCpltCallback+0x60>)
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40011000 	.word	0x40011000
 8004174:	20013694 	.word	0x20013694
 8004178:	200002c5 	.word	0x200002c5
 800417c:	40011400 	.word	0x40011400
 8004180:	200136e8 	.word	0x200136e8
 8004184:	200134e0 	.word	0x200134e0
 8004188:	200002c4 	.word	0x200002c4

0800418c <GPIO_Init>:
RTC_HandleTypeDef RtcHandle;
WWDG_HandleTypeDef hwwdg;

/** Pinout Configuration
 */
void GPIO_Init(void) {
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	4a25      	ldr	r2, [pc, #148]	; (800422c <GPIO_Init+0xa0>)
 8004198:	4b24      	ldr	r3, [pc, #144]	; (800422c <GPIO_Init+0xa0>)
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <GPIO_Init+0xa0>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	697b      	ldr	r3, [r7, #20]
	__GPIOB_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <GPIO_Init+0xa0>)
 80041b4:	4b1d      	ldr	r3, [pc, #116]	; (800422c <GPIO_Init+0xa0>)
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	f043 0302 	orr.w	r3, r3, #2
 80041bc:	6313      	str	r3, [r2, #48]	; 0x30
 80041be:	4b1b      	ldr	r3, [pc, #108]	; (800422c <GPIO_Init+0xa0>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]
	__GPIOC_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	4a17      	ldr	r2, [pc, #92]	; (800422c <GPIO_Init+0xa0>)
 80041d0:	4b16      	ldr	r3, [pc, #88]	; (800422c <GPIO_Init+0xa0>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	6313      	str	r3, [r2, #48]	; 0x30
 80041da:	4b14      	ldr	r3, [pc, #80]	; (800422c <GPIO_Init+0xa0>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
	__GPIOD_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <GPIO_Init+0xa0>)
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <GPIO_Init+0xa0>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f043 0308 	orr.w	r3, r3, #8
 80041f4:	6313      	str	r3, [r2, #48]	; 0x30
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <GPIO_Init+0xa0>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	68bb      	ldr	r3, [r7, #8]
	__GPIOE_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <GPIO_Init+0xa0>)
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <GPIO_Init+0xa0>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	f043 0310 	orr.w	r3, r3, #16
 8004210:	6313      	str	r3, [r2, #48]	; 0x30
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <GPIO_Init+0xa0>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800

08004230 <UART1_Init>:

	}
}

/* USART1 init function */
void UART1_Init(void) {
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <UART1_Init+0x40>)
 8004236:	4a0f      	ldr	r2, [pc, #60]	; (8004274 <UART1_Init+0x44>)
 8004238:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800423a:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <UART1_Init+0x40>)
 800423c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004240:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <UART1_Init+0x40>)
 8004244:	2200      	movs	r2, #0
 8004246:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004248:	4b09      	ldr	r3, [pc, #36]	; (8004270 <UART1_Init+0x40>)
 800424a:	2200      	movs	r2, #0
 800424c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <UART1_Init+0x40>)
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <UART1_Init+0x40>)
 8004256:	220c      	movs	r2, #12
 8004258:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <UART1_Init+0x40>)
 800425c:	2200      	movs	r2, #0
 800425e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <UART1_Init+0x40>)
 8004262:	2200      	movs	r2, #0
 8004264:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart1);
 8004266:	4802      	ldr	r0, [pc, #8]	; (8004270 <UART1_Init+0x40>)
 8004268:	f7fe f908 	bl	800247c <HAL_UART_Init>

}
 800426c:	bf00      	nop
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20013694 	.word	0x20013694
 8004274:	40011000 	.word	0x40011000

08004278 <UART2_Init>:

/* USART2 init function */
void UART2_Init(void) {
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <UART2_Init+0x40>)
 800427e:	4a0f      	ldr	r2, [pc, #60]	; (80042bc <UART2_Init+0x44>)
 8004280:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <UART2_Init+0x40>)
 8004284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004288:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <UART2_Init+0x40>)
 800428c:	2200      	movs	r2, #0
 800428e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <UART2_Init+0x40>)
 8004292:	2200      	movs	r2, #0
 8004294:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <UART2_Init+0x40>)
 8004298:	2200      	movs	r2, #0
 800429a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <UART2_Init+0x40>)
 800429e:	220c      	movs	r2, #12
 80042a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <UART2_Init+0x40>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042a8:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <UART2_Init+0x40>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart2);
 80042ae:	4802      	ldr	r0, [pc, #8]	; (80042b8 <UART2_Init+0x40>)
 80042b0:	f7fe f8e4 	bl	800247c <HAL_UART_Init>

}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20013780 	.word	0x20013780
 80042bc:	40004400 	.word	0x40004400

080042c0 <UART6_Init>:

/* USART1 init function */
void UART6_Init(void) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0

	huart6.Instance = USART6;
 80042c4:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <UART6_Init+0x40>)
 80042c6:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <UART6_Init+0x44>)
 80042c8:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 80042ca:	4b0d      	ldr	r3, [pc, #52]	; (8004300 <UART6_Init+0x40>)
 80042cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042d0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <UART6_Init+0x40>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <UART6_Init+0x40>)
 80042da:	2200      	movs	r2, #0
 80042dc:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <UART6_Init+0x40>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <UART6_Init+0x40>)
 80042e6:	220c      	movs	r2, #12
 80042e8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <UART6_Init+0x40>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <UART6_Init+0x40>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart6);
 80042f6:	4802      	ldr	r0, [pc, #8]	; (8004300 <UART6_Init+0x40>)
 80042f8:	f7fe f8c0 	bl	800247c <HAL_UART_Init>

}
 80042fc:	bf00      	nop
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	200136e8 	.word	0x200136e8
 8004304:	40011400 	.word	0x40011400

08004308 <DMA_Init>:

/**
 * Enable DMA controller clock
 */
void DMA_Init(void) {
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__DMA2_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	4a18      	ldr	r2, [pc, #96]	; (8004374 <DMA_Init+0x6c>)
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <DMA_Init+0x6c>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800431c:	6313      	str	r3, [r2, #48]	; 0x30
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <DMA_Init+0x6c>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800432a:	2200      	movs	r2, #0
 800432c:	2100      	movs	r1, #0
 800432e:	203a      	movs	r0, #58	; 0x3a
 8004330:	f7fc fda7 	bl	8000e82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004334:	203a      	movs	r0, #58	; 0x3a
 8004336:	f7fc fdc0 	bl	8000eba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800433a:	2200      	movs	r2, #0
 800433c:	2100      	movs	r1, #0
 800433e:	2044      	movs	r0, #68	; 0x44
 8004340:	f7fc fd9f 	bl	8000e82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8004344:	2044      	movs	r0, #68	; 0x44
 8004346:	f7fc fdb8 	bl	8000eba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800434a:	2200      	movs	r2, #0
 800434c:	2100      	movs	r1, #0
 800434e:	2045      	movs	r0, #69	; 0x45
 8004350:	f7fc fd97 	bl	8000e82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004354:	2045      	movs	r0, #69	; 0x45
 8004356:	f7fc fdb0 	bl	8000eba <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	2046      	movs	r0, #70	; 0x46
 8004360:	f7fc fd8f 	bl	8000e82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004364:	2046      	movs	r0, #70	; 0x46
 8004366:	f7fc fda8 	bl	8000eba <HAL_NVIC_EnableIRQ>

}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_SYSTICK_Callback>:
/**
 * @brief SYSTICK callback
 * @param None
 * @retval None
 */
void HAL_SYSTICK_Callback(void) {
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800437c:	f7fc fc74 	bl	8000c68 <HAL_IncTick>
}
 8004380:	bf00      	nop
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * @brief  Wake Up Timer callback
 * @param  hrtc : hrtc handle
 * @retval None
 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	/* NOTE : add the specific code to handle the RTC wake up interrupt */
	uwCounter = 1;
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]
	imprimir("RTC callback");
 8004392:	4804      	ldr	r0, [pc, #16]	; (80043a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 8004394:	f000 f874 	bl	8004480 <imprimir>
}
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	200002f0 	.word	0x200002f0
 80043a4:	08006b58 	.word	0x08006b58

080043a8 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief EXTI line detection callbacks
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	80fb      	strh	r3, [r7, #6]
	/* Configure LED2 */
	BSP_LED_Init(LED2);
 80043b2:	2000      	movs	r0, #0
 80043b4:	f7fc fbbc 	bl	8000b30 <BSP_LED_Init>
	/* NOTE : add the specific code to handle the wake up button interrupt */
	if (GPIO_Pin == KEY_BUTTON_PIN) {
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043be:	d105      	bne.n	80043cc <HAL_GPIO_EXTI_Callback+0x24>
		uwCounter = 2;
 80043c0:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80043c2:	2202      	movs	r2, #2
 80043c4:	601a      	str	r2, [r3, #0]
		imprimir("GPIO callback");
 80043c6:	4804      	ldr	r0, [pc, #16]	; (80043d8 <HAL_GPIO_EXTI_Callback+0x30>)
 80043c8:	f000 f85a 	bl	8004480 <imprimir>
	}
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	200002f0 	.word	0x200002f0
 80043d8:	08006b68 	.word	0x08006b68

080043dc <main>:



__attribute__((__section__(".user_data"))) const char userConfig[64];

int main(void) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0

	/* MCU Configuration----------------------------------------------------------*/
	uint32_t delay;

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80043e0:	f7fc fc04 	bl	8000bec <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80043e4:	f000 f862 	bl	80044ac <SystemClock_Config>

	GPIO_Init();
 80043e8:	f7ff fed0 	bl	800418c <GPIO_Init>
	BSP_LED_Init(LED2);
 80043ec:	2000      	movs	r0, #0
 80043ee:	f7fc fb9f 	bl	8000b30 <BSP_LED_Init>

	UART2_Init();
 80043f2:	f7ff ff41 	bl	8004278 <UART2_Init>
	DMA_Init();
 80043f6:	f7ff ff87 	bl	8004308 <DMA_Init>
	UART6_Init();
 80043fa:	f7ff ff61 	bl	80042c0 <UART6_Init>
	UART1_Init();
 80043fe:	f7ff ff17 	bl	8004230 <UART1_Init>

	imprimir("\r\nCOMIENZO PROGRAMA\r\n");
 8004402:	481b      	ldr	r0, [pc, #108]	; (8004470 <main+0x94>)
 8004404:	f000 f83c 	bl	8004480 <imprimir>

	inicializar_gps();
 8004408:	f7ff f8f0 	bl	80035ec <inicializar_gps>

	intentoLora = 0;
 800440c:	4b19      	ldr	r3, [pc, #100]	; (8004474 <main+0x98>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
	intentoGPRS = 0;
 8004412:	4b19      	ldr	r3, [pc, #100]	; (8004478 <main+0x9c>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

	read_buffer();
 8004418:	f7fe ff8a 	bl	8003330 <read_buffer>
	send_ATCommand("AT\r\n",1000);
 800441c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004420:	4816      	ldr	r0, [pc, #88]	; (800447c <main+0xa0>)
 8004422:	f7fe ff6f 	bl	8003304 <send_ATCommand>
	leerBuffer();
 8004426:	f7fe ff99 	bl	800335c <leerBuffer>
	while(isOK() != 0)
 800442a:	e00a      	b.n	8004442 <main+0x66>
	{
		send_ATCommand("AT\r\n",1000);
 800442c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004430:	4812      	ldr	r0, [pc, #72]	; (800447c <main+0xa0>)
 8004432:	f7fe ff67 	bl	8003304 <send_ATCommand>
		//imprimir("No hay comunicacion con el GPRS");
		HAL_Delay(2000);
 8004436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800443a:	f7fc fc2f 	bl	8000c9c <HAL_Delay>
		leerBuffer();
 800443e:	f7fe ff8d 	bl	800335c <leerBuffer>
	while(isOK() != 0)
 8004442:	f7ff f84b 	bl	80034dc <isOK>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ef      	bne.n	800442c <main+0x50>

	}

	network_registration();
 800444c:	f7fe ff90 	bl	8003370 <network_registration>
	//		Flush_Buffer((uint8_t*)ReadyBuf, BUFFERSIZE);
	//	}
	//
	//enviar_coord_lora();
	//intentoGPRS = 0;
	intentoLora = 5;
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <main+0x98>)
 8004452:	2205      	movs	r2, #5
 8004454:	601a      	str	r2, [r3, #0]
//	enviar_coord_lora();


	while (1) {
		/* Toggle LED2 */
		BSP_LED_Toggle(LED2);
 8004456:	2000      	movs	r0, #0
 8004458:	f7fc fbb4 	bl	8000bc4 <BSP_LED_Toggle>
		HTTP_post();
 800445c:	f7fe fffc 	bl	8003458 <HTTP_post>
		leerBuffer();
 8004460:	f7fe ff7c 	bl	800335c <leerBuffer>
		HAL_Delay(10000);
 8004464:	f242 7010 	movw	r0, #10000	; 0x2710
 8004468:	f7fc fc18 	bl	8000c9c <HAL_Delay>
	while (1) {
 800446c:	e7f3      	b.n	8004456 <main+0x7a>
 800446e:	bf00      	nop
 8004470:	08006b78 	.word	0x08006b78
 8004474:	20013838 	.word	0x20013838
 8004478:	20013800 	.word	0x20013800
 800447c:	08006b90 	.word	0x08006b90

08004480 <imprimir>:
//	}
//	HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, (uint64_t)data);
//	HAL_FLASH_Lock();
}

void imprimir(char* msg){
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fb feaf 	bl	80001ec <strlen>
 800448e:	4603      	mov	r3, r0
 8004490:	b29a      	uxth	r2, r3
 8004492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4803      	ldr	r0, [pc, #12]	; (80044a8 <imprimir+0x28>)
 800449a:	f7fe f83c 	bl	8002516 <HAL_UART_Transmit>

}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20013780 	.word	0x20013780

080044ac <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b094      	sub	sp, #80	; 0x50
 80044b0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	4a29      	ldr	r2, [pc, #164]	; (800455c <SystemClock_Config+0xb0>)
 80044b8:	4b28      	ldr	r3, [pc, #160]	; (800455c <SystemClock_Config+0xb0>)
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
 80044c2:	4b26      	ldr	r3, [pc, #152]	; (800455c <SystemClock_Config+0xb0>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80044ce:	2300      	movs	r3, #0
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	4a23      	ldr	r2, [pc, #140]	; (8004560 <SystemClock_Config+0xb4>)
 80044d4:	4b22      	ldr	r3, [pc, #136]	; (8004560 <SystemClock_Config+0xb4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80044dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b1f      	ldr	r3, [pc, #124]	; (8004560 <SystemClock_Config+0xb4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80044ee:	2302      	movs	r3, #2
 80044f0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044f2:	2301      	movs	r3, #1
 80044f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80044f6:	2310      	movs	r3, #16
 80044f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044fa:	2302      	movs	r3, #2
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80044fe:	2300      	movs	r3, #0
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004502:	2310      	movs	r3, #16
 8004504:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8004506:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800450c:	2304      	movs	r3, #4
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004510:	2307      	movs	r3, #7
 8004512:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004514:	f107 030c 	add.w	r3, r7, #12
 8004518:	4618      	mov	r0, r3
 800451a:	f7fd fa53 	bl	80019c4 <HAL_RCC_OscConfig>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8004524:	f000 f81e 	bl	8004564 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004528:	230f      	movs	r3, #15
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800452c:	2302      	movs	r3, #2
 800452e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004530:	2300      	movs	r3, #0
 8004532:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004538:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800453a:	2300      	movs	r3, #0
 800453c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800453e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004542:	2103      	movs	r1, #3
 8004544:	4618      	mov	r0, r3
 8004546:	f7fd fc97 	bl	8001e78 <HAL_RCC_ClockConfig>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8004550:	f000 f808 	bl	8004564 <Error_Handler>
//
//  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
//
//  /* SysTick_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}
 8004554:	bf00      	nop
 8004556:	3750      	adds	r7, #80	; 0x50
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	40007000 	.word	0x40007000

08004564 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Turn LED3 on */
  BSP_LED_On(LED2);
 8004568:	2000      	movs	r0, #0
 800456a:	f7fc fb17 	bl	8000b9c <BSP_LED_On>

  while(1)
 800456e:	e7fe      	b.n	800456e <Error_Handler+0xa>

08004570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004574:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004576:	e003      	b.n	8004580 <LoopCopyDataInit>

08004578 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800457a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800457c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800457e:	3104      	adds	r1, #4

08004580 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004580:	480b      	ldr	r0, [pc, #44]	; (80045b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004582:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004584:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004586:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004588:	d3f6      	bcc.n	8004578 <CopyDataInit>
  ldr  r2, =_sbss
 800458a:	4a0b      	ldr	r2, [pc, #44]	; (80045b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800458c:	e002      	b.n	8004594 <LoopFillZerobss>

0800458e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800458e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004590:	f842 3b04 	str.w	r3, [r2], #4

08004594 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004596:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004598:	d3f9      	bcc.n	800458e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800459a:	f000 f99b 	bl	80048d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800459e:	f000 facd 	bl	8004b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045a2:	f7ff ff1b 	bl	80043dc <main>
  bx  lr    
 80045a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80045a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80045ac:	08006e30 	.word	0x08006e30
  ldr  r0, =_sdata
 80045b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045b4:	20000294 	.word	0x20000294
  ldr  r2, =_sbss
 80045b8:	20000294 	.word	0x20000294
  ldr  r3, = _ebss
 80045bc:	20013a64 	.word	0x20013a64

080045c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045c0:	e7fe      	b.n	80045c0 <ADC_IRQHandler>

080045c2 <HAL_MspInit>:

/**
 * Initializes the Global MSP.
 */

void HAL_MspInit(void) {
 80045c2:	b580      	push	{r7, lr}
 80045c4:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045c6:	2003      	movs	r0, #3
 80045c8:	f7fc fc50 	bl	8000e6c <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80045cc:	2200      	movs	r2, #0
 80045ce:	2100      	movs	r1, #0
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	f7fc fc55 	bl	8000e82 <HAL_NVIC_SetPriority>
}
 80045d8:	bf00      	nop
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	if (huart->Instance == USART1) {
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a83      	ldr	r2, [pc, #524]	; (80047f8 <HAL_UART_MspInit+0x21c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d15a      	bne.n	80046a4 <HAL_UART_MspInit+0xc8>
		/* Peripheral clock enable */
		__USART1_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	4a82      	ldr	r2, [pc, #520]	; (80047fc <HAL_UART_MspInit+0x220>)
 80045f4:	4b81      	ldr	r3, [pc, #516]	; (80047fc <HAL_UART_MspInit+0x220>)
 80045f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f8:	f043 0310 	orr.w	r3, r3, #16
 80045fc:	6453      	str	r3, [r2, #68]	; 0x44
 80045fe:	4b7f      	ldr	r3, [pc, #508]	; (80047fc <HAL_UART_MspInit+0x220>)
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	693b      	ldr	r3, [r7, #16]

		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 800460a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800460e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004610:	2302      	movs	r3, #2
 8004612:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004614:	2301      	movs	r3, #1
 8004616:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004618:	2303      	movs	r3, #3
 800461a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800461c:	2307      	movs	r3, #7
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004620:	f107 0314 	add.w	r3, r7, #20
 8004624:	4619      	mov	r1, r3
 8004626:	4876      	ldr	r0, [pc, #472]	; (8004800 <HAL_UART_MspInit+0x224>)
 8004628:	f7fd f806 	bl	8001638 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_15;
 800462c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004630:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004632:	2302      	movs	r3, #2
 8004634:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004636:	2301      	movs	r3, #1
 8004638:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800463a:	2303      	movs	r3, #3
 800463c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800463e:	2307      	movs	r3, #7
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004642:	f107 0314 	add.w	r3, r7, #20
 8004646:	4619      	mov	r1, r3
 8004648:	486d      	ldr	r0, [pc, #436]	; (8004800 <HAL_UART_MspInit+0x224>)
 800464a:	f7fc fff5 	bl	8001638 <HAL_GPIO_Init>

	    /* Peripheral DMA init*/

	    hdma_usart1_rx.Instance = DMA2_Stream5;
 800464e:	4b6d      	ldr	r3, [pc, #436]	; (8004804 <HAL_UART_MspInit+0x228>)
 8004650:	4a6d      	ldr	r2, [pc, #436]	; (8004808 <HAL_UART_MspInit+0x22c>)
 8004652:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004654:	4b6b      	ldr	r3, [pc, #428]	; (8004804 <HAL_UART_MspInit+0x228>)
 8004656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800465a:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800465c:	4b69      	ldr	r3, [pc, #420]	; (8004804 <HAL_UART_MspInit+0x228>)
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004662:	4b68      	ldr	r3, [pc, #416]	; (8004804 <HAL_UART_MspInit+0x228>)
 8004664:	2200      	movs	r2, #0
 8004666:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004668:	4b66      	ldr	r3, [pc, #408]	; (8004804 <HAL_UART_MspInit+0x228>)
 800466a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800466e:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004670:	4b64      	ldr	r3, [pc, #400]	; (8004804 <HAL_UART_MspInit+0x228>)
 8004672:	2200      	movs	r2, #0
 8004674:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004676:	4b63      	ldr	r3, [pc, #396]	; (8004804 <HAL_UART_MspInit+0x228>)
 8004678:	2200      	movs	r2, #0
 800467a:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800467c:	4b61      	ldr	r3, [pc, #388]	; (8004804 <HAL_UART_MspInit+0x228>)
 800467e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004682:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004684:	4b5f      	ldr	r3, [pc, #380]	; (8004804 <HAL_UART_MspInit+0x228>)
 8004686:	2200      	movs	r2, #0
 8004688:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800468a:	4b5e      	ldr	r3, [pc, #376]	; (8004804 <HAL_UART_MspInit+0x228>)
 800468c:	2200      	movs	r2, #0
 800468e:	625a      	str	r2, [r3, #36]	; 0x24
	    HAL_DMA_Init(&hdma_usart1_rx);
 8004690:	485c      	ldr	r0, [pc, #368]	; (8004804 <HAL_UART_MspInit+0x228>)
 8004692:	f7fc fc33 	bl	8000efc <HAL_DMA_Init>

	    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a5a      	ldr	r2, [pc, #360]	; (8004804 <HAL_UART_MspInit+0x228>)
 800469a:	635a      	str	r2, [r3, #52]	; 0x34
 800469c:	4a59      	ldr	r2, [pc, #356]	; (8004804 <HAL_UART_MspInit+0x228>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6393      	str	r3, [r2, #56]	; 0x38

//		/* Peripheral interrupt init*/
//		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
//		HAL_NVIC_EnableIRQ(USART6_IRQn);
	}
}
 80046a2:	e0a4      	b.n	80047ee <HAL_UART_MspInit+0x212>
	} else if (huart->Instance == USART2) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a58      	ldr	r2, [pc, #352]	; (800480c <HAL_UART_MspInit+0x230>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d128      	bne.n	8004700 <HAL_UART_MspInit+0x124>
		__USART2_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	4a52      	ldr	r2, [pc, #328]	; (80047fc <HAL_UART_MspInit+0x220>)
 80046b4:	4b51      	ldr	r3, [pc, #324]	; (80047fc <HAL_UART_MspInit+0x220>)
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046bc:	6413      	str	r3, [r2, #64]	; 0x40
 80046be:	4b4f      	ldr	r3, [pc, #316]	; (80047fc <HAL_UART_MspInit+0x220>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 80046ca:	2304      	movs	r3, #4
 80046cc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ce:	2302      	movs	r3, #2
 80046d0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80046d6:	2303      	movs	r3, #3
 80046d8:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046da:	2307      	movs	r3, #7
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046de:	f107 0314 	add.w	r3, r7, #20
 80046e2:	4619      	mov	r1, r3
 80046e4:	4846      	ldr	r0, [pc, #280]	; (8004800 <HAL_UART_MspInit+0x224>)
 80046e6:	f7fc ffa7 	bl	8001638 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80046ea:	2308      	movs	r3, #8
 80046ec:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046ee:	2307      	movs	r3, #7
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f2:	f107 0314 	add.w	r3, r7, #20
 80046f6:	4619      	mov	r1, r3
 80046f8:	4841      	ldr	r0, [pc, #260]	; (8004800 <HAL_UART_MspInit+0x224>)
 80046fa:	f7fc ff9d 	bl	8001638 <HAL_GPIO_Init>
}
 80046fe:	e076      	b.n	80047ee <HAL_UART_MspInit+0x212>
	} else if (huart->Instance == USART6) {
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a42      	ldr	r2, [pc, #264]	; (8004810 <HAL_UART_MspInit+0x234>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d171      	bne.n	80047ee <HAL_UART_MspInit+0x212>
		__USART6_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	4a3b      	ldr	r2, [pc, #236]	; (80047fc <HAL_UART_MspInit+0x220>)
 8004710:	4b3a      	ldr	r3, [pc, #232]	; (80047fc <HAL_UART_MspInit+0x220>)
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	f043 0320 	orr.w	r3, r3, #32
 8004718:	6453      	str	r3, [r2, #68]	; 0x44
 800471a:	4b38      	ldr	r3, [pc, #224]	; (80047fc <HAL_UART_MspInit+0x220>)
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8004726:	23c0      	movs	r3, #192	; 0xc0
 8004728:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472a:	2302      	movs	r3, #2
 800472c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL; //GPIO_PULLUP?
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004732:	2303      	movs	r3, #3
 8004734:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004736:	2308      	movs	r3, #8
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800473a:	f107 0314 	add.w	r3, r7, #20
 800473e:	4619      	mov	r1, r3
 8004740:	4834      	ldr	r0, [pc, #208]	; (8004814 <HAL_UART_MspInit+0x238>)
 8004742:	f7fc ff79 	bl	8001638 <HAL_GPIO_Init>
		hdma_usart6_rx.Instance = DMA2_Stream2;
 8004746:	4b34      	ldr	r3, [pc, #208]	; (8004818 <HAL_UART_MspInit+0x23c>)
 8004748:	4a34      	ldr	r2, [pc, #208]	; (800481c <HAL_UART_MspInit+0x240>)
 800474a:	601a      	str	r2, [r3, #0]
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_UART_MspInit+0x23c>)
 800474e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004752:	605a      	str	r2, [r3, #4]
		hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004754:	4b30      	ldr	r3, [pc, #192]	; (8004818 <HAL_UART_MspInit+0x23c>)
 8004756:	2200      	movs	r2, #0
 8004758:	609a      	str	r2, [r3, #8]
		hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800475a:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <HAL_UART_MspInit+0x23c>)
 800475c:	2200      	movs	r2, #0
 800475e:	60da      	str	r2, [r3, #12]
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_UART_MspInit+0x23c>)
 8004762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004766:	611a      	str	r2, [r3, #16]
		hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004768:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <HAL_UART_MspInit+0x23c>)
 800476a:	2200      	movs	r2, #0
 800476c:	615a      	str	r2, [r3, #20]
		hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800476e:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <HAL_UART_MspInit+0x23c>)
 8004770:	2200      	movs	r2, #0
 8004772:	619a      	str	r2, [r3, #24]
		hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8004774:	4b28      	ldr	r3, [pc, #160]	; (8004818 <HAL_UART_MspInit+0x23c>)
 8004776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800477a:	61da      	str	r2, [r3, #28]
		hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800477c:	4b26      	ldr	r3, [pc, #152]	; (8004818 <HAL_UART_MspInit+0x23c>)
 800477e:	2200      	movs	r2, #0
 8004780:	621a      	str	r2, [r3, #32]
		hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004782:	4b25      	ldr	r3, [pc, #148]	; (8004818 <HAL_UART_MspInit+0x23c>)
 8004784:	2200      	movs	r2, #0
 8004786:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_DMA_Init(&hdma_usart6_rx);
 8004788:	4823      	ldr	r0, [pc, #140]	; (8004818 <HAL_UART_MspInit+0x23c>)
 800478a:	f7fc fbb7 	bl	8000efc <HAL_DMA_Init>
		__HAL_LINKDMA(huart, hdmarx, hdma_usart6_rx);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a21      	ldr	r2, [pc, #132]	; (8004818 <HAL_UART_MspInit+0x23c>)
 8004792:	635a      	str	r2, [r3, #52]	; 0x34
 8004794:	4a20      	ldr	r2, [pc, #128]	; (8004818 <HAL_UART_MspInit+0x23c>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6393      	str	r3, [r2, #56]	; 0x38
		hdma_usart6_tx.Instance = DMA2_Stream6;
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <HAL_UART_MspInit+0x244>)
 800479c:	4a21      	ldr	r2, [pc, #132]	; (8004824 <HAL_UART_MspInit+0x248>)
 800479e:	601a      	str	r2, [r3, #0]
		hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80047a0:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047a2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80047a6:	605a      	str	r2, [r3, #4]
		hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047aa:	2240      	movs	r2, #64	; 0x40
 80047ac:	609a      	str	r2, [r3, #8]
		hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ae:	4b1c      	ldr	r3, [pc, #112]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	60da      	str	r2, [r3, #12]
		hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047b4:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047ba:	611a      	str	r2, [r3, #16]
		hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047bc:	4b18      	ldr	r3, [pc, #96]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047be:	2200      	movs	r2, #0
 80047c0:	615a      	str	r2, [r3, #20]
		hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	619a      	str	r2, [r3, #24]
		hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 80047c8:	4b15      	ldr	r3, [pc, #84]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ce:	61da      	str	r2, [r3, #28]
		hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047d0:	4b13      	ldr	r3, [pc, #76]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	621a      	str	r2, [r3, #32]
		hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047d6:	4b12      	ldr	r3, [pc, #72]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047d8:	2200      	movs	r2, #0
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_DMA_Init(&hdma_usart6_tx);
 80047dc:	4810      	ldr	r0, [pc, #64]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047de:	f7fc fb8d 	bl	8000efc <HAL_DMA_Init>
		__HAL_LINKDMA(huart, hdmatx, hdma_usart6_tx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
 80047e8:	4a0d      	ldr	r2, [pc, #52]	; (8004820 <HAL_UART_MspInit+0x244>)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6393      	str	r3, [r2, #56]	; 0x38
}
 80047ee:	bf00      	nop
 80047f0:	3728      	adds	r7, #40	; 0x28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40011000 	.word	0x40011000
 80047fc:	40023800 	.word	0x40023800
 8004800:	40020000 	.word	0x40020000
 8004804:	20013a00 	.word	0x20013a00
 8004808:	40026488 	.word	0x40026488
 800480c:	40004400 	.word	0x40004400
 8004810:	40011400 	.word	0x40011400
 8004814:	40020800 	.word	0x40020800
 8004818:	200138e0 	.word	0x200138e0
 800481c:	40026440 	.word	0x40026440
 8004820:	200139a0 	.word	0x200139a0
 8004824:	400264a0 	.word	0x400264a0

08004828 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800482c:	f7fc fa1c 	bl	8000c68 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004830:	f7fc fb5d 	bl	8000eee <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004834:	bf00      	nop
 8004836:	bd80      	pop	{r7, pc}

08004838 <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&RTCHandle);
 800483c:	4802      	ldr	r0, [pc, #8]	; (8004848 <RTC_WKUP_IRQHandler+0x10>)
 800483e:	f7fd fcfb 	bl	8002238 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 8004842:	bf00      	nop
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	200137e0 	.word	0x200137e0

0800484c <EXTI15_10_IRQHandler>:
  * @brief  This function handles External line 15_10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* As the following address is invalid (not mapped), a Hardfault exception
  will be generated with an infinite loop and when the WWDG counter falls to 63
  the WWDG reset occurs */
//  *(__IO uint32_t *) 0xA0003000 = 0xFF;
	 HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8004850:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004854:	f7fd f89e 	bl	8001994 <HAL_GPIO_EXTI_IRQHandler>
}
 8004858:	bf00      	nop
 800485a:	bd80      	pop	{r7, pc}

0800485c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8004860:	4802      	ldr	r0, [pc, #8]	; (800486c <USART2_IRQHandler+0x10>)
 8004862:	f7fd ffdd 	bl	8002820 <HAL_UART_IRQHandler>
}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20013780 	.word	0x20013780

08004870 <DMA2_Stream2_IRQHandler>:

/**
* @brief This function handles DMA2 stream5 global interrupt.
*/
void DMA2_Stream2_IRQHandler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004874:	4802      	ldr	r0, [pc, #8]	; (8004880 <DMA2_Stream2_IRQHandler+0x10>)
 8004876:	f7fc fc71 	bl	800115c <HAL_DMA_IRQHandler>
}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	200138e0 	.word	0x200138e0

08004884 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream7 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004888:	4802      	ldr	r0, [pc, #8]	; (8004894 <DMA2_Stream6_IRQHandler+0x10>)
 800488a:	f7fc fc67 	bl	800115c <HAL_DMA_IRQHandler>
}
 800488e:	bf00      	nop
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	200139a0 	.word	0x200139a0

08004898 <SPI1_IRQHandler>:

/**
* @brief This function handles SPI1 global interrupt.
*/
void SPI1_IRQHandler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 800489c:	4802      	ldr	r0, [pc, #8]	; (80048a8 <SPI1_IRQHandler+0x10>)
 800489e:	f7fd fcf7 	bl	8002290 <HAL_SPI_IRQHandler>
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20013728 	.word	0x20013728

080048ac <DMA2_Stream5_IRQHandler>:

/**
* @brief This function handles DMA2 stream5 global interrupt.
*/
void DMA2_Stream5_IRQHandler(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80048b0:	4802      	ldr	r0, [pc, #8]	; (80048bc <DMA2_Stream5_IRQHandler+0x10>)
 80048b2:	f7fc fc53 	bl	800115c <HAL_DMA_IRQHandler>
}
 80048b6:	bf00      	nop
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20013a00 	.word	0x20013a00

080048c0 <DMA2_Stream7_IRQHandler>:

/**
* @brief This function handles DMA2 stream7 global interrupt.
*/
void DMA2_Stream7_IRQHandler(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80048c4:	4802      	ldr	r0, [pc, #8]	; (80048d0 <DMA2_Stream7_IRQHandler+0x10>)
 80048c6:	f7fc fc49 	bl	800115c <HAL_DMA_IRQHandler>

}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20013940 	.word	0x20013940

080048d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048d8:	4a16      	ldr	r2, [pc, #88]	; (8004934 <SystemInit+0x60>)
 80048da:	4b16      	ldr	r3, [pc, #88]	; (8004934 <SystemInit+0x60>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80048e8:	4a13      	ldr	r2, [pc, #76]	; (8004938 <SystemInit+0x64>)
 80048ea:	4b13      	ldr	r3, [pc, #76]	; (8004938 <SystemInit+0x64>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80048f4:	4b10      	ldr	r3, [pc, #64]	; (8004938 <SystemInit+0x64>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80048fa:	4a0f      	ldr	r2, [pc, #60]	; (8004938 <SystemInit+0x64>)
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <SystemInit+0x64>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004908:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <SystemInit+0x64>)
 800490c:	4a0b      	ldr	r2, [pc, #44]	; (800493c <SystemInit+0x68>)
 800490e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004910:	4a09      	ldr	r2, [pc, #36]	; (8004938 <SystemInit+0x64>)
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <SystemInit+0x64>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <SystemInit+0x64>)
 800491e:	2200      	movs	r2, #0
 8004920:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004922:	4b04      	ldr	r3, [pc, #16]	; (8004934 <SystemInit+0x60>)
 8004924:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004928:	609a      	str	r2, [r3, #8]
#endif
}
 800492a:	bf00      	nop
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	e000ed00 	.word	0xe000ed00
 8004938:	40023800 	.word	0x40023800
 800493c:	24003010 	.word	0x24003010

08004940 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004950:	e004      	b.n	800495c <ts_itoa+0x1c>
		div *= base;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	fbb2 f2f3 	udiv	r2, r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d2f3      	bcs.n	8004952 <ts_itoa+0x12>

	while (div != 0)
 800496a:	e029      	b.n	80049c0 <ts_itoa+0x80>
	{
		int num = d/div;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	613b      	str	r3, [r7, #16]
		d = d%div;
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	fbb3 f1f2 	udiv	r1, r3, r2
 800497e:	fb02 f201 	mul.w	r2, r2, r1
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	60bb      	str	r3, [r7, #8]
		div /= base;
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	fb92 f3f3 	sdiv	r3, r2, r3
 800498e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b09      	cmp	r3, #9
 8004994:	dd0a      	ble.n	80049ac <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	1c59      	adds	r1, r3, #1
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	6011      	str	r1, [r2, #0]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	3237      	adds	r2, #55	; 0x37
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	e009      	b.n	80049c0 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	1c59      	adds	r1, r3, #1
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	6011      	str	r1, [r2, #0]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	3230      	adds	r2, #48	; 0x30
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1d2      	bne.n	800496c <ts_itoa+0x2c>
	}
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b088      	sub	sp, #32
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80049e2:	e07d      	b.n	8004ae0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b25      	cmp	r3, #37	; 0x25
 80049ea:	d171      	bne.n	8004ad0 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	3301      	adds	r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b64      	cmp	r3, #100	; 0x64
 80049f8:	d01e      	beq.n	8004a38 <ts_formatstring+0x66>
 80049fa:	2b64      	cmp	r3, #100	; 0x64
 80049fc:	dc06      	bgt.n	8004a0c <ts_formatstring+0x3a>
 80049fe:	2b58      	cmp	r3, #88	; 0x58
 8004a00:	d050      	beq.n	8004aa4 <ts_formatstring+0xd2>
 8004a02:	2b63      	cmp	r3, #99	; 0x63
 8004a04:	d00e      	beq.n	8004a24 <ts_formatstring+0x52>
 8004a06:	2b25      	cmp	r3, #37	; 0x25
 8004a08:	d058      	beq.n	8004abc <ts_formatstring+0xea>
 8004a0a:	e05d      	b.n	8004ac8 <ts_formatstring+0xf6>
 8004a0c:	2b73      	cmp	r3, #115	; 0x73
 8004a0e:	d02b      	beq.n	8004a68 <ts_formatstring+0x96>
 8004a10:	2b73      	cmp	r3, #115	; 0x73
 8004a12:	dc02      	bgt.n	8004a1a <ts_formatstring+0x48>
 8004a14:	2b69      	cmp	r3, #105	; 0x69
 8004a16:	d00f      	beq.n	8004a38 <ts_formatstring+0x66>
 8004a18:	e056      	b.n	8004ac8 <ts_formatstring+0xf6>
 8004a1a:	2b75      	cmp	r3, #117	; 0x75
 8004a1c:	d037      	beq.n	8004a8e <ts_formatstring+0xbc>
 8004a1e:	2b78      	cmp	r3, #120	; 0x78
 8004a20:	d040      	beq.n	8004aa4 <ts_formatstring+0xd2>
 8004a22:	e051      	b.n	8004ac8 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	60fa      	str	r2, [r7, #12]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	1d11      	adds	r1, r2, #4
 8004a2e:	6079      	str	r1, [r7, #4]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
				break;
 8004a36:	e047      	b.n	8004ac8 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1d1a      	adds	r2, r3, #4
 8004a3c:	607a      	str	r2, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	da07      	bge.n	8004a58 <ts_formatstring+0x86>
					{
						val *= -1;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	425b      	negs	r3, r3
 8004a4c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	60fa      	str	r2, [r7, #12]
 8004a54:	222d      	movs	r2, #45	; 0x2d
 8004a56:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004a58:	69f9      	ldr	r1, [r7, #28]
 8004a5a:	f107 030c 	add.w	r3, r7, #12
 8004a5e:	220a      	movs	r2, #10
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff ff6d 	bl	8004940 <ts_itoa>
				}
				break;
 8004a66:	e02f      	b.n	8004ac8 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1d1a      	adds	r2, r3, #4
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004a72:	e007      	b.n	8004a84 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	60fa      	str	r2, [r7, #12]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	1c51      	adds	r1, r2, #1
 8004a7e:	61b9      	str	r1, [r7, #24]
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f3      	bne.n	8004a74 <ts_formatstring+0xa2>
					}
				}
				break;
 8004a8c:	e01c      	b.n	8004ac8 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	1d1a      	adds	r2, r3, #4
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	6819      	ldr	r1, [r3, #0]
 8004a96:	f107 030c 	add.w	r3, r7, #12
 8004a9a:	220a      	movs	r2, #10
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff ff4f 	bl	8004940 <ts_itoa>
				break;
 8004aa2:	e011      	b.n	8004ac8 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	1d1a      	adds	r2, r3, #4
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4619      	mov	r1, r3
 8004aae:	f107 030c 	add.w	r3, r7, #12
 8004ab2:	2210      	movs	r2, #16
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff43 	bl	8004940 <ts_itoa>
				break;
 8004aba:	e005      	b.n	8004ac8 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	60fa      	str	r2, [r7, #12]
 8004ac2:	2225      	movs	r2, #37	; 0x25
 8004ac4:	701a      	strb	r2, [r3, #0]
				  break;
 8004ac6:	bf00      	nop
			}
			fmt++;
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	3301      	adds	r3, #1
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	e007      	b.n	8004ae0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	60fa      	str	r2, [r7, #12]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	1c51      	adds	r1, r2, #1
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	7812      	ldrb	r2, [r2, #0]
 8004ade:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f47f af7d 	bne.w	80049e4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	461a      	mov	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	1ad3      	subs	r3, r2, r3
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3720      	adds	r7, #32
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8004b00:	b40e      	push	{r1, r2, r3}
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8004b0a:	f107 0320 	add.w	r3, r7, #32
 8004b0e:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	69f9      	ldr	r1, [r7, #28]
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff ff5c 	bl	80049d2 <ts_formatstring>
 8004b1a:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b28:	b003      	add	sp, #12
 8004b2a:	4770      	bx	lr

08004b2c <atof>:
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	f000 be6b 	b.w	8005808 <strtod>

08004b32 <atoi>:
 8004b32:	220a      	movs	r2, #10
 8004b34:	2100      	movs	r1, #0
 8004b36:	f000 bf4f 	b.w	80059d8 <strtol>
	...

08004b3c <__libc_init_array>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	4e0d      	ldr	r6, [pc, #52]	; (8004b74 <__libc_init_array+0x38>)
 8004b40:	4c0d      	ldr	r4, [pc, #52]	; (8004b78 <__libc_init_array+0x3c>)
 8004b42:	1ba4      	subs	r4, r4, r6
 8004b44:	10a4      	asrs	r4, r4, #2
 8004b46:	2500      	movs	r5, #0
 8004b48:	42a5      	cmp	r5, r4
 8004b4a:	d109      	bne.n	8004b60 <__libc_init_array+0x24>
 8004b4c:	4e0b      	ldr	r6, [pc, #44]	; (8004b7c <__libc_init_array+0x40>)
 8004b4e:	4c0c      	ldr	r4, [pc, #48]	; (8004b80 <__libc_init_array+0x44>)
 8004b50:	f001 ff38 	bl	80069c4 <_init>
 8004b54:	1ba4      	subs	r4, r4, r6
 8004b56:	10a4      	asrs	r4, r4, #2
 8004b58:	2500      	movs	r5, #0
 8004b5a:	42a5      	cmp	r5, r4
 8004b5c:	d105      	bne.n	8004b6a <__libc_init_array+0x2e>
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b64:	4798      	blx	r3
 8004b66:	3501      	adds	r5, #1
 8004b68:	e7ee      	b.n	8004b48 <__libc_init_array+0xc>
 8004b6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b6e:	4798      	blx	r3
 8004b70:	3501      	adds	r5, #1
 8004b72:	e7f2      	b.n	8004b5a <__libc_init_array+0x1e>
 8004b74:	08006e28 	.word	0x08006e28
 8004b78:	08006e28 	.word	0x08006e28
 8004b7c:	08006e28 	.word	0x08006e28
 8004b80:	08006e2c 	.word	0x08006e2c

08004b84 <memset>:
 8004b84:	4402      	add	r2, r0
 8004b86:	4603      	mov	r3, r0
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d100      	bne.n	8004b8e <memset+0xa>
 8004b8c:	4770      	bx	lr
 8004b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b92:	e7f9      	b.n	8004b88 <memset+0x4>

08004b94 <strchr>:
 8004b94:	b2c9      	uxtb	r1, r1
 8004b96:	4603      	mov	r3, r0
 8004b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b9c:	b11a      	cbz	r2, 8004ba6 <strchr+0x12>
 8004b9e:	4291      	cmp	r1, r2
 8004ba0:	d1f9      	bne.n	8004b96 <strchr+0x2>
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	4770      	bx	lr
 8004ba6:	2900      	cmp	r1, #0
 8004ba8:	bf0c      	ite	eq
 8004baa:	4618      	moveq	r0, r3
 8004bac:	2000      	movne	r0, #0
 8004bae:	4770      	bx	lr

08004bb0 <strcpy>:
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bb6:	f803 2b01 	strb.w	r2, [r3], #1
 8004bba:	2a00      	cmp	r2, #0
 8004bbc:	d1f9      	bne.n	8004bb2 <strcpy+0x2>
 8004bbe:	4770      	bx	lr

08004bc0 <strstr>:
 8004bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc2:	7803      	ldrb	r3, [r0, #0]
 8004bc4:	b133      	cbz	r3, 8004bd4 <strstr+0x14>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	1c5e      	adds	r6, r3, #1
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b933      	cbnz	r3, 8004bde <strstr+0x1e>
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd4:	780b      	ldrb	r3, [r1, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bf18      	it	ne
 8004bda:	2000      	movne	r0, #0
 8004bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bde:	1e4d      	subs	r5, r1, #1
 8004be0:	1e44      	subs	r4, r0, #1
 8004be2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004be6:	2a00      	cmp	r2, #0
 8004be8:	d0f3      	beq.n	8004bd2 <strstr+0x12>
 8004bea:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8004bee:	4297      	cmp	r7, r2
 8004bf0:	4633      	mov	r3, r6
 8004bf2:	d0f6      	beq.n	8004be2 <strstr+0x22>
 8004bf4:	e7e8      	b.n	8004bc8 <strstr+0x8>

08004bf6 <sulp>:
 8004bf6:	b570      	push	{r4, r5, r6, lr}
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	460d      	mov	r5, r1
 8004bfc:	ec45 4b10 	vmov	d0, r4, r5
 8004c00:	4616      	mov	r6, r2
 8004c02:	f001 fd07 	bl	8006614 <__ulp>
 8004c06:	ec51 0b10 	vmov	r0, r1, d0
 8004c0a:	b17e      	cbz	r6, 8004c2c <sulp+0x36>
 8004c0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004c10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	dd09      	ble.n	8004c2c <sulp+0x36>
 8004c18:	051b      	lsls	r3, r3, #20
 8004c1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c1e:	2400      	movs	r4, #0
 8004c20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c24:	4622      	mov	r2, r4
 8004c26:	462b      	mov	r3, r5
 8004c28:	f7fb fca0 	bl	800056c <__aeabi_dmul>
 8004c2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c30 <_strtod_l>:
 8004c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	b09f      	sub	sp, #124	; 0x7c
 8004c36:	4698      	mov	r8, r3
 8004c38:	9004      	str	r0, [sp, #16]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	460c      	mov	r4, r1
 8004c40:	9215      	str	r2, [sp, #84]	; 0x54
 8004c42:	931a      	str	r3, [sp, #104]	; 0x68
 8004c44:	f001 f9fe 	bl	8006044 <__localeconv_l>
 8004c48:	4607      	mov	r7, r0
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	f7fb face 	bl	80001ec <strlen>
 8004c50:	f04f 0a00 	mov.w	sl, #0
 8004c54:	4605      	mov	r5, r0
 8004c56:	f04f 0b00 	mov.w	fp, #0
 8004c5a:	9419      	str	r4, [sp, #100]	; 0x64
 8004c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c5e:	781a      	ldrb	r2, [r3, #0]
 8004c60:	2a0d      	cmp	r2, #13
 8004c62:	d833      	bhi.n	8004ccc <_strtod_l+0x9c>
 8004c64:	2a09      	cmp	r2, #9
 8004c66:	d237      	bcs.n	8004cd8 <_strtod_l+0xa8>
 8004c68:	2a00      	cmp	r2, #0
 8004c6a:	d03f      	beq.n	8004cec <_strtod_l+0xbc>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c70:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004c72:	7833      	ldrb	r3, [r6, #0]
 8004c74:	2b30      	cmp	r3, #48	; 0x30
 8004c76:	f040 8103 	bne.w	8004e80 <_strtod_l+0x250>
 8004c7a:	7873      	ldrb	r3, [r6, #1]
 8004c7c:	2b58      	cmp	r3, #88	; 0x58
 8004c7e:	d001      	beq.n	8004c84 <_strtod_l+0x54>
 8004c80:	2b78      	cmp	r3, #120	; 0x78
 8004c82:	d16b      	bne.n	8004d5c <_strtod_l+0x12c>
 8004c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c86:	9301      	str	r3, [sp, #4]
 8004c88:	ab1a      	add	r3, sp, #104	; 0x68
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	f8cd 8008 	str.w	r8, [sp, #8]
 8004c90:	ab1b      	add	r3, sp, #108	; 0x6c
 8004c92:	4aad      	ldr	r2, [pc, #692]	; (8004f48 <_strtod_l+0x318>)
 8004c94:	9804      	ldr	r0, [sp, #16]
 8004c96:	a919      	add	r1, sp, #100	; 0x64
 8004c98:	f000 fefe 	bl	8005a98 <__gethex>
 8004c9c:	f010 0407 	ands.w	r4, r0, #7
 8004ca0:	4605      	mov	r5, r0
 8004ca2:	d005      	beq.n	8004cb0 <_strtod_l+0x80>
 8004ca4:	2c06      	cmp	r4, #6
 8004ca6:	d12b      	bne.n	8004d00 <_strtod_l+0xd0>
 8004ca8:	3601      	adds	r6, #1
 8004caa:	2300      	movs	r3, #0
 8004cac:	9619      	str	r6, [sp, #100]	; 0x64
 8004cae:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f040 8590 	bne.w	80057d8 <_strtod_l+0xba8>
 8004cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cba:	b1e3      	cbz	r3, 8004cf6 <_strtod_l+0xc6>
 8004cbc:	4652      	mov	r2, sl
 8004cbe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004cc2:	ec43 2b10 	vmov	d0, r2, r3
 8004cc6:	b01f      	add	sp, #124	; 0x7c
 8004cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ccc:	2a2b      	cmp	r2, #43	; 0x2b
 8004cce:	d006      	beq.n	8004cde <_strtod_l+0xae>
 8004cd0:	2a2d      	cmp	r2, #45	; 0x2d
 8004cd2:	d013      	beq.n	8004cfc <_strtod_l+0xcc>
 8004cd4:	2a20      	cmp	r2, #32
 8004cd6:	d1c9      	bne.n	8004c6c <_strtod_l+0x3c>
 8004cd8:	3301      	adds	r3, #1
 8004cda:	9319      	str	r3, [sp, #100]	; 0x64
 8004cdc:	e7be      	b.n	8004c5c <_strtod_l+0x2c>
 8004cde:	2200      	movs	r2, #0
 8004ce0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	9219      	str	r2, [sp, #100]	; 0x64
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1c1      	bne.n	8004c70 <_strtod_l+0x40>
 8004cec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004cee:	9419      	str	r4, [sp, #100]	; 0x64
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 856f 	bne.w	80057d4 <_strtod_l+0xba4>
 8004cf6:	4652      	mov	r2, sl
 8004cf8:	465b      	mov	r3, fp
 8004cfa:	e7e2      	b.n	8004cc2 <_strtod_l+0x92>
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	e7ef      	b.n	8004ce0 <_strtod_l+0xb0>
 8004d00:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d02:	b13a      	cbz	r2, 8004d14 <_strtod_l+0xe4>
 8004d04:	2135      	movs	r1, #53	; 0x35
 8004d06:	a81c      	add	r0, sp, #112	; 0x70
 8004d08:	f001 fd75 	bl	80067f6 <__copybits>
 8004d0c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d0e:	9804      	ldr	r0, [sp, #16]
 8004d10:	f001 f9f3 	bl	80060fa <_Bfree>
 8004d14:	3c01      	subs	r4, #1
 8004d16:	2c04      	cmp	r4, #4
 8004d18:	d808      	bhi.n	8004d2c <_strtod_l+0xfc>
 8004d1a:	e8df f004 	tbb	[pc, r4]
 8004d1e:	030c      	.short	0x030c
 8004d20:	1a17      	.short	0x1a17
 8004d22:	0c          	.byte	0x0c
 8004d23:	00          	.byte	0x00
 8004d24:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004d28:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8004d2c:	0729      	lsls	r1, r5, #28
 8004d2e:	d5bf      	bpl.n	8004cb0 <_strtod_l+0x80>
 8004d30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004d34:	e7bc      	b.n	8004cb0 <_strtod_l+0x80>
 8004d36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004d38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004d3a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004d3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d42:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d46:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004d4a:	e7ef      	b.n	8004d2c <_strtod_l+0xfc>
 8004d4c:	f8df b204 	ldr.w	fp, [pc, #516]	; 8004f54 <_strtod_l+0x324>
 8004d50:	e7ec      	b.n	8004d2c <_strtod_l+0xfc>
 8004d52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004d56:	f04f 3aff 	mov.w	sl, #4294967295
 8004d5a:	e7e7      	b.n	8004d2c <_strtod_l+0xfc>
 8004d5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	9219      	str	r2, [sp, #100]	; 0x64
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	2b30      	cmp	r3, #48	; 0x30
 8004d66:	d0f9      	beq.n	8004d5c <_strtod_l+0x12c>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0a1      	beq.n	8004cb0 <_strtod_l+0x80>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f04f 0900 	mov.w	r9, #0
 8004d72:	9308      	str	r3, [sp, #32]
 8004d74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d76:	930a      	str	r3, [sp, #40]	; 0x28
 8004d78:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d7c:	f8cd 9018 	str.w	r9, [sp, #24]
 8004d80:	220a      	movs	r2, #10
 8004d82:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004d84:	7806      	ldrb	r6, [r0, #0]
 8004d86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004d8a:	b2d9      	uxtb	r1, r3
 8004d8c:	2909      	cmp	r1, #9
 8004d8e:	d979      	bls.n	8004e84 <_strtod_l+0x254>
 8004d90:	462a      	mov	r2, r5
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	f001 fde6 	bl	8006964 <strncmp>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	f000 8082 	beq.w	8004ea2 <_strtod_l+0x272>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	9d06      	ldr	r5, [sp, #24]
 8004da2:	4633      	mov	r3, r6
 8004da4:	4602      	mov	r2, r0
 8004da6:	4601      	mov	r1, r0
 8004da8:	2b65      	cmp	r3, #101	; 0x65
 8004daa:	d002      	beq.n	8004db2 <_strtod_l+0x182>
 8004dac:	2b45      	cmp	r3, #69	; 0x45
 8004dae:	f040 80e8 	bne.w	8004f82 <_strtod_l+0x352>
 8004db2:	b925      	cbnz	r5, 8004dbe <_strtod_l+0x18e>
 8004db4:	b910      	cbnz	r0, 8004dbc <_strtod_l+0x18c>
 8004db6:	9b08      	ldr	r3, [sp, #32]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d097      	beq.n	8004cec <_strtod_l+0xbc>
 8004dbc:	2500      	movs	r5, #0
 8004dbe:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8004dc0:	1c63      	adds	r3, r4, #1
 8004dc2:	9319      	str	r3, [sp, #100]	; 0x64
 8004dc4:	7863      	ldrb	r3, [r4, #1]
 8004dc6:	2b2b      	cmp	r3, #43	; 0x2b
 8004dc8:	f000 80c8 	beq.w	8004f5c <_strtod_l+0x32c>
 8004dcc:	2b2d      	cmp	r3, #45	; 0x2d
 8004dce:	f000 80cb 	beq.w	8004f68 <_strtod_l+0x338>
 8004dd2:	2600      	movs	r6, #0
 8004dd4:	9605      	str	r6, [sp, #20]
 8004dd6:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004dda:	2e09      	cmp	r6, #9
 8004ddc:	f200 80d0 	bhi.w	8004f80 <_strtod_l+0x350>
 8004de0:	2b30      	cmp	r3, #48	; 0x30
 8004de2:	f000 80c3 	beq.w	8004f6c <_strtod_l+0x33c>
 8004de6:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8004dea:	2e08      	cmp	r6, #8
 8004dec:	f200 80c9 	bhi.w	8004f82 <_strtod_l+0x352>
 8004df0:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004df4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004df6:	f04f 0c0a 	mov.w	ip, #10
 8004dfa:	461f      	mov	r7, r3
 8004dfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dfe:	1c5e      	adds	r6, r3, #1
 8004e00:	9619      	str	r6, [sp, #100]	; 0x64
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004e08:	f1b8 0f09 	cmp.w	r8, #9
 8004e0c:	f240 80b3 	bls.w	8004f76 <_strtod_l+0x346>
 8004e10:	1bf6      	subs	r6, r6, r7
 8004e12:	2e08      	cmp	r6, #8
 8004e14:	f644 681f 	movw	r8, #19999	; 0x4e1f
 8004e18:	dc02      	bgt.n	8004e20 <_strtod_l+0x1f0>
 8004e1a:	45f0      	cmp	r8, lr
 8004e1c:	bfa8      	it	ge
 8004e1e:	46f0      	movge	r8, lr
 8004e20:	9e05      	ldr	r6, [sp, #20]
 8004e22:	b10e      	cbz	r6, 8004e28 <_strtod_l+0x1f8>
 8004e24:	f1c8 0800 	rsb	r8, r8, #0
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	f040 80d0 	bne.w	8004fce <_strtod_l+0x39e>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	f47f af3e 	bne.w	8004cb0 <_strtod_l+0x80>
 8004e34:	9a08      	ldr	r2, [sp, #32]
 8004e36:	2a00      	cmp	r2, #0
 8004e38:	f47f af3a 	bne.w	8004cb0 <_strtod_l+0x80>
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	f47f af55 	bne.w	8004cec <_strtod_l+0xbc>
 8004e42:	2b4e      	cmp	r3, #78	; 0x4e
 8004e44:	f000 80a6 	beq.w	8004f94 <_strtod_l+0x364>
 8004e48:	f300 809e 	bgt.w	8004f88 <_strtod_l+0x358>
 8004e4c:	2b49      	cmp	r3, #73	; 0x49
 8004e4e:	f47f af4d 	bne.w	8004cec <_strtod_l+0xbc>
 8004e52:	493e      	ldr	r1, [pc, #248]	; (8004f4c <_strtod_l+0x31c>)
 8004e54:	a819      	add	r0, sp, #100	; 0x64
 8004e56:	f001 f84f 	bl	8005ef8 <__match>
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	f43f af46 	beq.w	8004cec <_strtod_l+0xbc>
 8004e60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e62:	493b      	ldr	r1, [pc, #236]	; (8004f50 <_strtod_l+0x320>)
 8004e64:	3b01      	subs	r3, #1
 8004e66:	a819      	add	r0, sp, #100	; 0x64
 8004e68:	9319      	str	r3, [sp, #100]	; 0x64
 8004e6a:	f001 f845 	bl	8005ef8 <__match>
 8004e6e:	b910      	cbnz	r0, 8004e76 <_strtod_l+0x246>
 8004e70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e72:	3301      	adds	r3, #1
 8004e74:	9319      	str	r3, [sp, #100]	; 0x64
 8004e76:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8004f54 <_strtod_l+0x324>
 8004e7a:	f04f 0a00 	mov.w	sl, #0
 8004e7e:	e717      	b.n	8004cb0 <_strtod_l+0x80>
 8004e80:	2300      	movs	r3, #0
 8004e82:	e774      	b.n	8004d6e <_strtod_l+0x13e>
 8004e84:	9906      	ldr	r1, [sp, #24]
 8004e86:	2908      	cmp	r1, #8
 8004e88:	bfdd      	ittte	le
 8004e8a:	9907      	ldrle	r1, [sp, #28]
 8004e8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e90:	9307      	strle	r3, [sp, #28]
 8004e92:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004e96:	9b06      	ldr	r3, [sp, #24]
 8004e98:	3001      	adds	r0, #1
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	9306      	str	r3, [sp, #24]
 8004e9e:	9019      	str	r0, [sp, #100]	; 0x64
 8004ea0:	e76f      	b.n	8004d82 <_strtod_l+0x152>
 8004ea2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ea4:	195a      	adds	r2, r3, r5
 8004ea6:	9219      	str	r2, [sp, #100]	; 0x64
 8004ea8:	9a06      	ldr	r2, [sp, #24]
 8004eaa:	5d5b      	ldrb	r3, [r3, r5]
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	d148      	bne.n	8004f42 <_strtod_l+0x312>
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	2b30      	cmp	r3, #48	; 0x30
 8004eb4:	d02a      	beq.n	8004f0c <_strtod_l+0x2dc>
 8004eb6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004eba:	2a08      	cmp	r2, #8
 8004ebc:	f200 8491 	bhi.w	80057e2 <_strtod_l+0xbb2>
 8004ec0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004ec2:	920a      	str	r2, [sp, #40]	; 0x28
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	4605      	mov	r5, r0
 8004eca:	3b30      	subs	r3, #48	; 0x30
 8004ecc:	f100 0101 	add.w	r1, r0, #1
 8004ed0:	d011      	beq.n	8004ef6 <_strtod_l+0x2c6>
 8004ed2:	440a      	add	r2, r1
 8004ed4:	eb00 0c05 	add.w	ip, r0, r5
 8004ed8:	4629      	mov	r1, r5
 8004eda:	260a      	movs	r6, #10
 8004edc:	4561      	cmp	r1, ip
 8004ede:	d11b      	bne.n	8004f18 <_strtod_l+0x2e8>
 8004ee0:	4428      	add	r0, r5
 8004ee2:	2808      	cmp	r0, #8
 8004ee4:	f100 0501 	add.w	r5, r0, #1
 8004ee8:	dc25      	bgt.n	8004f36 <_strtod_l+0x306>
 8004eea:	9807      	ldr	r0, [sp, #28]
 8004eec:	210a      	movs	r1, #10
 8004eee:	fb01 3300 	mla	r3, r1, r0, r3
 8004ef2:	9307      	str	r3, [sp, #28]
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ef8:	1c58      	adds	r0, r3, #1
 8004efa:	9019      	str	r0, [sp, #100]	; 0x64
 8004efc:	785b      	ldrb	r3, [r3, #1]
 8004efe:	4608      	mov	r0, r1
 8004f00:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004f04:	2909      	cmp	r1, #9
 8004f06:	d9e0      	bls.n	8004eca <_strtod_l+0x29a>
 8004f08:	2101      	movs	r1, #1
 8004f0a:	e74d      	b.n	8004da8 <_strtod_l+0x178>
 8004f0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	9219      	str	r2, [sp, #100]	; 0x64
 8004f12:	3001      	adds	r0, #1
 8004f14:	785b      	ldrb	r3, [r3, #1]
 8004f16:	e7cc      	b.n	8004eb2 <_strtod_l+0x282>
 8004f18:	3101      	adds	r1, #1
 8004f1a:	f101 3eff 	add.w	lr, r1, #4294967295
 8004f1e:	f1be 0f08 	cmp.w	lr, #8
 8004f22:	dc03      	bgt.n	8004f2c <_strtod_l+0x2fc>
 8004f24:	9f07      	ldr	r7, [sp, #28]
 8004f26:	4377      	muls	r7, r6
 8004f28:	9707      	str	r7, [sp, #28]
 8004f2a:	e7d7      	b.n	8004edc <_strtod_l+0x2ac>
 8004f2c:	2910      	cmp	r1, #16
 8004f2e:	bfd8      	it	le
 8004f30:	fb06 f909 	mulle.w	r9, r6, r9
 8004f34:	e7d2      	b.n	8004edc <_strtod_l+0x2ac>
 8004f36:	2d10      	cmp	r5, #16
 8004f38:	bfdc      	itt	le
 8004f3a:	210a      	movle	r1, #10
 8004f3c:	fb01 3909 	mlale	r9, r1, r9, r3
 8004f40:	e7d8      	b.n	8004ef4 <_strtod_l+0x2c4>
 8004f42:	4602      	mov	r2, r0
 8004f44:	9d06      	ldr	r5, [sp, #24]
 8004f46:	e7db      	b.n	8004f00 <_strtod_l+0x2d0>
 8004f48:	08006bc4 	.word	0x08006bc4
 8004f4c:	08006bb8 	.word	0x08006bb8
 8004f50:	08006bbb 	.word	0x08006bbb
 8004f54:	7ff00000 	.word	0x7ff00000
 8004f58:	2101      	movs	r1, #1
 8004f5a:	e72b      	b.n	8004db4 <_strtod_l+0x184>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	9305      	str	r3, [sp, #20]
 8004f60:	1ca3      	adds	r3, r4, #2
 8004f62:	9319      	str	r3, [sp, #100]	; 0x64
 8004f64:	78a3      	ldrb	r3, [r4, #2]
 8004f66:	e736      	b.n	8004dd6 <_strtod_l+0x1a6>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e7f8      	b.n	8004f5e <_strtod_l+0x32e>
 8004f6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f6e:	1c5e      	adds	r6, r3, #1
 8004f70:	9619      	str	r6, [sp, #100]	; 0x64
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	e734      	b.n	8004de0 <_strtod_l+0x1b0>
 8004f76:	fb0c 3e0e 	mla	lr, ip, lr, r3
 8004f7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004f7e:	e73d      	b.n	8004dfc <_strtod_l+0x1cc>
 8004f80:	9419      	str	r4, [sp, #100]	; 0x64
 8004f82:	f04f 0800 	mov.w	r8, #0
 8004f86:	e74f      	b.n	8004e28 <_strtod_l+0x1f8>
 8004f88:	2b69      	cmp	r3, #105	; 0x69
 8004f8a:	f43f af62 	beq.w	8004e52 <_strtod_l+0x222>
 8004f8e:	2b6e      	cmp	r3, #110	; 0x6e
 8004f90:	f47f aeac 	bne.w	8004cec <_strtod_l+0xbc>
 8004f94:	4988      	ldr	r1, [pc, #544]	; (80051b8 <_strtod_l+0x588>)
 8004f96:	a819      	add	r0, sp, #100	; 0x64
 8004f98:	f000 ffae 	bl	8005ef8 <__match>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f43f aea5 	beq.w	8004cec <_strtod_l+0xbc>
 8004fa2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	2b28      	cmp	r3, #40	; 0x28
 8004fa8:	d10e      	bne.n	8004fc8 <_strtod_l+0x398>
 8004faa:	aa1c      	add	r2, sp, #112	; 0x70
 8004fac:	4983      	ldr	r1, [pc, #524]	; (80051bc <_strtod_l+0x58c>)
 8004fae:	a819      	add	r0, sp, #100	; 0x64
 8004fb0:	f000 ffb5 	bl	8005f1e <__hexnan>
 8004fb4:	2805      	cmp	r0, #5
 8004fb6:	d107      	bne.n	8004fc8 <_strtod_l+0x398>
 8004fb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004fba:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004fbe:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004fc2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004fc6:	e673      	b.n	8004cb0 <_strtod_l+0x80>
 8004fc8:	f8df b200 	ldr.w	fp, [pc, #512]	; 80051cc <_strtod_l+0x59c>
 8004fcc:	e755      	b.n	8004e7a <_strtod_l+0x24a>
 8004fce:	9b06      	ldr	r3, [sp, #24]
 8004fd0:	9807      	ldr	r0, [sp, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bf08      	it	eq
 8004fd6:	462b      	moveq	r3, r5
 8004fd8:	2d10      	cmp	r5, #16
 8004fda:	462c      	mov	r4, r5
 8004fdc:	eba8 0802 	sub.w	r8, r8, r2
 8004fe0:	bfa8      	it	ge
 8004fe2:	2410      	movge	r4, #16
 8004fe4:	9306      	str	r3, [sp, #24]
 8004fe6:	f7fb fa4b 	bl	8000480 <__aeabi_ui2d>
 8004fea:	2c09      	cmp	r4, #9
 8004fec:	4682      	mov	sl, r0
 8004fee:	468b      	mov	fp, r1
 8004ff0:	dd13      	ble.n	800501a <_strtod_l+0x3ea>
 8004ff2:	4b73      	ldr	r3, [pc, #460]	; (80051c0 <_strtod_l+0x590>)
 8004ff4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ff8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004ffc:	f7fb fab6 	bl	800056c <__aeabi_dmul>
 8005000:	4606      	mov	r6, r0
 8005002:	4648      	mov	r0, r9
 8005004:	460f      	mov	r7, r1
 8005006:	f7fb fa3b 	bl	8000480 <__aeabi_ui2d>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4630      	mov	r0, r6
 8005010:	4639      	mov	r1, r7
 8005012:	f7fb f8f9 	bl	8000208 <__adddf3>
 8005016:	4682      	mov	sl, r0
 8005018:	468b      	mov	fp, r1
 800501a:	2d0f      	cmp	r5, #15
 800501c:	dc36      	bgt.n	800508c <_strtod_l+0x45c>
 800501e:	f1b8 0f00 	cmp.w	r8, #0
 8005022:	f43f ae45 	beq.w	8004cb0 <_strtod_l+0x80>
 8005026:	dd24      	ble.n	8005072 <_strtod_l+0x442>
 8005028:	f1b8 0f16 	cmp.w	r8, #22
 800502c:	dc0b      	bgt.n	8005046 <_strtod_l+0x416>
 800502e:	4d64      	ldr	r5, [pc, #400]	; (80051c0 <_strtod_l+0x590>)
 8005030:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 8005034:	e9d8 0100 	ldrd	r0, r1, [r8]
 8005038:	4652      	mov	r2, sl
 800503a:	465b      	mov	r3, fp
 800503c:	f7fb fa96 	bl	800056c <__aeabi_dmul>
 8005040:	4682      	mov	sl, r0
 8005042:	468b      	mov	fp, r1
 8005044:	e634      	b.n	8004cb0 <_strtod_l+0x80>
 8005046:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800504a:	4598      	cmp	r8, r3
 800504c:	dc1e      	bgt.n	800508c <_strtod_l+0x45c>
 800504e:	4c5c      	ldr	r4, [pc, #368]	; (80051c0 <_strtod_l+0x590>)
 8005050:	f1c5 050f 	rsb	r5, r5, #15
 8005054:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005058:	eba8 0505 	sub.w	r5, r8, r5
 800505c:	4652      	mov	r2, sl
 800505e:	465b      	mov	r3, fp
 8005060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005064:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005068:	f7fb fa80 	bl	800056c <__aeabi_dmul>
 800506c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005070:	e7e4      	b.n	800503c <_strtod_l+0x40c>
 8005072:	f118 0f16 	cmn.w	r8, #22
 8005076:	db09      	blt.n	800508c <_strtod_l+0x45c>
 8005078:	4d51      	ldr	r5, [pc, #324]	; (80051c0 <_strtod_l+0x590>)
 800507a:	eba5 08c8 	sub.w	r8, r5, r8, lsl #3
 800507e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005082:	4650      	mov	r0, sl
 8005084:	4659      	mov	r1, fp
 8005086:	f7fb fb9b 	bl	80007c0 <__aeabi_ddiv>
 800508a:	e7d9      	b.n	8005040 <_strtod_l+0x410>
 800508c:	1b2c      	subs	r4, r5, r4
 800508e:	4444      	add	r4, r8
 8005090:	2c00      	cmp	r4, #0
 8005092:	dd70      	ble.n	8005176 <_strtod_l+0x546>
 8005094:	f014 030f 	ands.w	r3, r4, #15
 8005098:	d00a      	beq.n	80050b0 <_strtod_l+0x480>
 800509a:	4949      	ldr	r1, [pc, #292]	; (80051c0 <_strtod_l+0x590>)
 800509c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050a0:	4652      	mov	r2, sl
 80050a2:	465b      	mov	r3, fp
 80050a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050a8:	f7fb fa60 	bl	800056c <__aeabi_dmul>
 80050ac:	4682      	mov	sl, r0
 80050ae:	468b      	mov	fp, r1
 80050b0:	f034 040f 	bics.w	r4, r4, #15
 80050b4:	d050      	beq.n	8005158 <_strtod_l+0x528>
 80050b6:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80050ba:	dd23      	ble.n	8005104 <_strtod_l+0x4d4>
 80050bc:	2400      	movs	r4, #0
 80050be:	4625      	mov	r5, r4
 80050c0:	9407      	str	r4, [sp, #28]
 80050c2:	9406      	str	r4, [sp, #24]
 80050c4:	9a04      	ldr	r2, [sp, #16]
 80050c6:	f8df b108 	ldr.w	fp, [pc, #264]	; 80051d0 <_strtod_l+0x5a0>
 80050ca:	2322      	movs	r3, #34	; 0x22
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	f04f 0a00 	mov.w	sl, #0
 80050d2:	9b07      	ldr	r3, [sp, #28]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f43f adeb 	beq.w	8004cb0 <_strtod_l+0x80>
 80050da:	991a      	ldr	r1, [sp, #104]	; 0x68
 80050dc:	9804      	ldr	r0, [sp, #16]
 80050de:	f001 f80c 	bl	80060fa <_Bfree>
 80050e2:	9906      	ldr	r1, [sp, #24]
 80050e4:	9804      	ldr	r0, [sp, #16]
 80050e6:	f001 f808 	bl	80060fa <_Bfree>
 80050ea:	4629      	mov	r1, r5
 80050ec:	9804      	ldr	r0, [sp, #16]
 80050ee:	f001 f804 	bl	80060fa <_Bfree>
 80050f2:	9907      	ldr	r1, [sp, #28]
 80050f4:	9804      	ldr	r0, [sp, #16]
 80050f6:	f001 f800 	bl	80060fa <_Bfree>
 80050fa:	4621      	mov	r1, r4
 80050fc:	9804      	ldr	r0, [sp, #16]
 80050fe:	f000 fffc 	bl	80060fa <_Bfree>
 8005102:	e5d5      	b.n	8004cb0 <_strtod_l+0x80>
 8005104:	4e2f      	ldr	r6, [pc, #188]	; (80051c4 <_strtod_l+0x594>)
 8005106:	2300      	movs	r3, #0
 8005108:	1124      	asrs	r4, r4, #4
 800510a:	4650      	mov	r0, sl
 800510c:	4659      	mov	r1, fp
 800510e:	4699      	mov	r9, r3
 8005110:	4637      	mov	r7, r6
 8005112:	2c01      	cmp	r4, #1
 8005114:	dc23      	bgt.n	800515e <_strtod_l+0x52e>
 8005116:	b10b      	cbz	r3, 800511c <_strtod_l+0x4ec>
 8005118:	4682      	mov	sl, r0
 800511a:	468b      	mov	fp, r1
 800511c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005120:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
 8005124:	4652      	mov	r2, sl
 8005126:	465b      	mov	r3, fp
 8005128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800512c:	f7fb fa1e 	bl	800056c <__aeabi_dmul>
 8005130:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005134:	468b      	mov	fp, r1
 8005136:	460a      	mov	r2, r1
 8005138:	0d1b      	lsrs	r3, r3, #20
 800513a:	4923      	ldr	r1, [pc, #140]	; (80051c8 <_strtod_l+0x598>)
 800513c:	051b      	lsls	r3, r3, #20
 800513e:	428b      	cmp	r3, r1
 8005140:	4682      	mov	sl, r0
 8005142:	d8bb      	bhi.n	80050bc <_strtod_l+0x48c>
 8005144:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005148:	428b      	cmp	r3, r1
 800514a:	bf86      	itte	hi
 800514c:	f8df b084 	ldrhi.w	fp, [pc, #132]	; 80051d4 <_strtod_l+0x5a4>
 8005150:	f04f 3aff 	movhi.w	sl, #4294967295
 8005154:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005158:	2300      	movs	r3, #0
 800515a:	9305      	str	r3, [sp, #20]
 800515c:	e06d      	b.n	800523a <_strtod_l+0x60a>
 800515e:	07e2      	lsls	r2, r4, #31
 8005160:	d504      	bpl.n	800516c <_strtod_l+0x53c>
 8005162:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005166:	f7fb fa01 	bl	800056c <__aeabi_dmul>
 800516a:	2301      	movs	r3, #1
 800516c:	f109 0901 	add.w	r9, r9, #1
 8005170:	1064      	asrs	r4, r4, #1
 8005172:	3608      	adds	r6, #8
 8005174:	e7cd      	b.n	8005112 <_strtod_l+0x4e2>
 8005176:	d0ef      	beq.n	8005158 <_strtod_l+0x528>
 8005178:	4264      	negs	r4, r4
 800517a:	f014 020f 	ands.w	r2, r4, #15
 800517e:	d00a      	beq.n	8005196 <_strtod_l+0x566>
 8005180:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <_strtod_l+0x590>)
 8005182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005186:	4650      	mov	r0, sl
 8005188:	4659      	mov	r1, fp
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fb fb17 	bl	80007c0 <__aeabi_ddiv>
 8005192:	4682      	mov	sl, r0
 8005194:	468b      	mov	fp, r1
 8005196:	1124      	asrs	r4, r4, #4
 8005198:	d0de      	beq.n	8005158 <_strtod_l+0x528>
 800519a:	2c1f      	cmp	r4, #31
 800519c:	dd1c      	ble.n	80051d8 <_strtod_l+0x5a8>
 800519e:	2400      	movs	r4, #0
 80051a0:	4625      	mov	r5, r4
 80051a2:	9407      	str	r4, [sp, #28]
 80051a4:	9406      	str	r4, [sp, #24]
 80051a6:	9a04      	ldr	r2, [sp, #16]
 80051a8:	2322      	movs	r3, #34	; 0x22
 80051aa:	f04f 0a00 	mov.w	sl, #0
 80051ae:	f04f 0b00 	mov.w	fp, #0
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	e78d      	b.n	80050d2 <_strtod_l+0x4a2>
 80051b6:	bf00      	nop
 80051b8:	08006bc1 	.word	0x08006bc1
 80051bc:	08006bd8 	.word	0x08006bd8
 80051c0:	08006c50 	.word	0x08006c50
 80051c4:	08006c28 	.word	0x08006c28
 80051c8:	7ca00000 	.word	0x7ca00000
 80051cc:	fff80000 	.word	0xfff80000
 80051d0:	7ff00000 	.word	0x7ff00000
 80051d4:	7fefffff 	.word	0x7fefffff
 80051d8:	f014 0310 	ands.w	r3, r4, #16
 80051dc:	bf18      	it	ne
 80051de:	236a      	movne	r3, #106	; 0x6a
 80051e0:	4ea0      	ldr	r6, [pc, #640]	; (8005464 <_strtod_l+0x834>)
 80051e2:	9305      	str	r3, [sp, #20]
 80051e4:	4650      	mov	r0, sl
 80051e6:	4659      	mov	r1, fp
 80051e8:	2300      	movs	r3, #0
 80051ea:	2c00      	cmp	r4, #0
 80051ec:	f300 8106 	bgt.w	80053fc <_strtod_l+0x7cc>
 80051f0:	b10b      	cbz	r3, 80051f6 <_strtod_l+0x5c6>
 80051f2:	4682      	mov	sl, r0
 80051f4:	468b      	mov	fp, r1
 80051f6:	9b05      	ldr	r3, [sp, #20]
 80051f8:	b1bb      	cbz	r3, 800522a <_strtod_l+0x5fa>
 80051fa:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80051fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005202:	2b00      	cmp	r3, #0
 8005204:	4659      	mov	r1, fp
 8005206:	dd10      	ble.n	800522a <_strtod_l+0x5fa>
 8005208:	2b1f      	cmp	r3, #31
 800520a:	f340 8101 	ble.w	8005410 <_strtod_l+0x7e0>
 800520e:	2b34      	cmp	r3, #52	; 0x34
 8005210:	bfde      	ittt	le
 8005212:	3b20      	suble	r3, #32
 8005214:	f04f 32ff 	movle.w	r2, #4294967295
 8005218:	fa02 f303 	lslle.w	r3, r2, r3
 800521c:	f04f 0a00 	mov.w	sl, #0
 8005220:	bfcc      	ite	gt
 8005222:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005226:	ea03 0b01 	andle.w	fp, r3, r1
 800522a:	2200      	movs	r2, #0
 800522c:	2300      	movs	r3, #0
 800522e:	4650      	mov	r0, sl
 8005230:	4659      	mov	r1, fp
 8005232:	f7fb fc03 	bl	8000a3c <__aeabi_dcmpeq>
 8005236:	2800      	cmp	r0, #0
 8005238:	d1b1      	bne.n	800519e <_strtod_l+0x56e>
 800523a:	9b07      	ldr	r3, [sp, #28]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	9a06      	ldr	r2, [sp, #24]
 8005240:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005242:	9804      	ldr	r0, [sp, #16]
 8005244:	462b      	mov	r3, r5
 8005246:	f000 ffaa 	bl	800619e <__s2b>
 800524a:	9007      	str	r0, [sp, #28]
 800524c:	2800      	cmp	r0, #0
 800524e:	f43f af35 	beq.w	80050bc <_strtod_l+0x48c>
 8005252:	f1b8 0f00 	cmp.w	r8, #0
 8005256:	f1c8 0300 	rsb	r3, r8, #0
 800525a:	bfa8      	it	ge
 800525c:	2300      	movge	r3, #0
 800525e:	930e      	str	r3, [sp, #56]	; 0x38
 8005260:	2400      	movs	r4, #0
 8005262:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8005266:	930f      	str	r3, [sp, #60]	; 0x3c
 8005268:	4625      	mov	r5, r4
 800526a:	9b07      	ldr	r3, [sp, #28]
 800526c:	9804      	ldr	r0, [sp, #16]
 800526e:	6859      	ldr	r1, [r3, #4]
 8005270:	f000 ff0f 	bl	8006092 <_Balloc>
 8005274:	9006      	str	r0, [sp, #24]
 8005276:	2800      	cmp	r0, #0
 8005278:	f43f af24 	beq.w	80050c4 <_strtod_l+0x494>
 800527c:	9b07      	ldr	r3, [sp, #28]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	3202      	adds	r2, #2
 8005282:	f103 010c 	add.w	r1, r3, #12
 8005286:	0092      	lsls	r2, r2, #2
 8005288:	300c      	adds	r0, #12
 800528a:	f000 fef7 	bl	800607c <memcpy>
 800528e:	aa1c      	add	r2, sp, #112	; 0x70
 8005290:	a91b      	add	r1, sp, #108	; 0x6c
 8005292:	ec4b ab10 	vmov	d0, sl, fp
 8005296:	9804      	ldr	r0, [sp, #16]
 8005298:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800529c:	f001 fa30 	bl	8006700 <__d2b>
 80052a0:	901a      	str	r0, [sp, #104]	; 0x68
 80052a2:	2800      	cmp	r0, #0
 80052a4:	f43f af0e 	beq.w	80050c4 <_strtod_l+0x494>
 80052a8:	2101      	movs	r1, #1
 80052aa:	9804      	ldr	r0, [sp, #16]
 80052ac:	f001 f803 	bl	80062b6 <__i2b>
 80052b0:	4605      	mov	r5, r0
 80052b2:	2800      	cmp	r0, #0
 80052b4:	f43f af06 	beq.w	80050c4 <_strtod_l+0x494>
 80052b8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80052ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80052bc:	2e00      	cmp	r6, #0
 80052be:	bfab      	itete	ge
 80052c0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80052c2:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 80052c4:	9f0f      	ldrge	r7, [sp, #60]	; 0x3c
 80052c6:	f8dd 8038 	ldrlt.w	r8, [sp, #56]	; 0x38
 80052ca:	bfac      	ite	ge
 80052cc:	eb03 0806 	addge.w	r8, r3, r6
 80052d0:	1b9f      	sublt	r7, r3, r6
 80052d2:	9b05      	ldr	r3, [sp, #20]
 80052d4:	1af6      	subs	r6, r6, r3
 80052d6:	4416      	add	r6, r2
 80052d8:	4b63      	ldr	r3, [pc, #396]	; (8005468 <_strtod_l+0x838>)
 80052da:	3e01      	subs	r6, #1
 80052dc:	429e      	cmp	r6, r3
 80052de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80052e2:	f280 80a8 	bge.w	8005436 <_strtod_l+0x806>
 80052e6:	1b9b      	subs	r3, r3, r6
 80052e8:	2b1f      	cmp	r3, #31
 80052ea:	eba2 0203 	sub.w	r2, r2, r3
 80052ee:	f04f 0901 	mov.w	r9, #1
 80052f2:	f300 8094 	bgt.w	800541e <_strtod_l+0x7ee>
 80052f6:	fa09 f303 	lsl.w	r3, r9, r3
 80052fa:	9314      	str	r3, [sp, #80]	; 0x50
 80052fc:	2600      	movs	r6, #0
 80052fe:	eb08 0902 	add.w	r9, r8, r2
 8005302:	9b05      	ldr	r3, [sp, #20]
 8005304:	45c8      	cmp	r8, r9
 8005306:	4417      	add	r7, r2
 8005308:	441f      	add	r7, r3
 800530a:	4643      	mov	r3, r8
 800530c:	bfa8      	it	ge
 800530e:	464b      	movge	r3, r9
 8005310:	42bb      	cmp	r3, r7
 8005312:	bfa8      	it	ge
 8005314:	463b      	movge	r3, r7
 8005316:	2b00      	cmp	r3, #0
 8005318:	bfc2      	ittt	gt
 800531a:	eba9 0903 	subgt.w	r9, r9, r3
 800531e:	1aff      	subgt	r7, r7, r3
 8005320:	eba8 0803 	subgt.w	r8, r8, r3
 8005324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005326:	b1bb      	cbz	r3, 8005358 <_strtod_l+0x728>
 8005328:	4629      	mov	r1, r5
 800532a:	461a      	mov	r2, r3
 800532c:	9804      	ldr	r0, [sp, #16]
 800532e:	f001 f859 	bl	80063e4 <__pow5mult>
 8005332:	4605      	mov	r5, r0
 8005334:	2800      	cmp	r0, #0
 8005336:	f43f aec5 	beq.w	80050c4 <_strtod_l+0x494>
 800533a:	4601      	mov	r1, r0
 800533c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800533e:	9804      	ldr	r0, [sp, #16]
 8005340:	f000 ffc2 	bl	80062c8 <__multiply>
 8005344:	9008      	str	r0, [sp, #32]
 8005346:	2800      	cmp	r0, #0
 8005348:	f43f aebc 	beq.w	80050c4 <_strtod_l+0x494>
 800534c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800534e:	9804      	ldr	r0, [sp, #16]
 8005350:	f000 fed3 	bl	80060fa <_Bfree>
 8005354:	9b08      	ldr	r3, [sp, #32]
 8005356:	931a      	str	r3, [sp, #104]	; 0x68
 8005358:	f1b9 0f00 	cmp.w	r9, #0
 800535c:	dc6f      	bgt.n	800543e <_strtod_l+0x80e>
 800535e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d175      	bne.n	8005450 <_strtod_l+0x820>
 8005364:	2f00      	cmp	r7, #0
 8005366:	dd08      	ble.n	800537a <_strtod_l+0x74a>
 8005368:	463a      	mov	r2, r7
 800536a:	9906      	ldr	r1, [sp, #24]
 800536c:	9804      	ldr	r0, [sp, #16]
 800536e:	f001 f887 	bl	8006480 <__lshift>
 8005372:	9006      	str	r0, [sp, #24]
 8005374:	2800      	cmp	r0, #0
 8005376:	f43f aea5 	beq.w	80050c4 <_strtod_l+0x494>
 800537a:	f1b8 0f00 	cmp.w	r8, #0
 800537e:	dd08      	ble.n	8005392 <_strtod_l+0x762>
 8005380:	4629      	mov	r1, r5
 8005382:	4642      	mov	r2, r8
 8005384:	9804      	ldr	r0, [sp, #16]
 8005386:	f001 f87b 	bl	8006480 <__lshift>
 800538a:	4605      	mov	r5, r0
 800538c:	2800      	cmp	r0, #0
 800538e:	f43f ae99 	beq.w	80050c4 <_strtod_l+0x494>
 8005392:	9a06      	ldr	r2, [sp, #24]
 8005394:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005396:	9804      	ldr	r0, [sp, #16]
 8005398:	f001 f8dd 	bl	8006556 <__mdiff>
 800539c:	4604      	mov	r4, r0
 800539e:	2800      	cmp	r0, #0
 80053a0:	f43f ae90 	beq.w	80050c4 <_strtod_l+0x494>
 80053a4:	68c3      	ldr	r3, [r0, #12]
 80053a6:	9308      	str	r3, [sp, #32]
 80053a8:	2300      	movs	r3, #0
 80053aa:	60c3      	str	r3, [r0, #12]
 80053ac:	4629      	mov	r1, r5
 80053ae:	f001 f8b8 	bl	8006522 <__mcmp>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	da5a      	bge.n	800546c <_strtod_l+0x83c>
 80053b6:	9b08      	ldr	r3, [sp, #32]
 80053b8:	b9e3      	cbnz	r3, 80053f4 <_strtod_l+0x7c4>
 80053ba:	f1ba 0f00 	cmp.w	sl, #0
 80053be:	d119      	bne.n	80053f4 <_strtod_l+0x7c4>
 80053c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053c4:	b9b3      	cbnz	r3, 80053f4 <_strtod_l+0x7c4>
 80053c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80053ca:	0d1b      	lsrs	r3, r3, #20
 80053cc:	051b      	lsls	r3, r3, #20
 80053ce:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80053d2:	d90f      	bls.n	80053f4 <_strtod_l+0x7c4>
 80053d4:	6963      	ldr	r3, [r4, #20]
 80053d6:	b913      	cbnz	r3, 80053de <_strtod_l+0x7ae>
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	dd0a      	ble.n	80053f4 <_strtod_l+0x7c4>
 80053de:	4621      	mov	r1, r4
 80053e0:	2201      	movs	r2, #1
 80053e2:	9804      	ldr	r0, [sp, #16]
 80053e4:	f001 f84c 	bl	8006480 <__lshift>
 80053e8:	4629      	mov	r1, r5
 80053ea:	4604      	mov	r4, r0
 80053ec:	f001 f899 	bl	8006522 <__mcmp>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	dc6c      	bgt.n	80054ce <_strtod_l+0x89e>
 80053f4:	9b05      	ldr	r3, [sp, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d176      	bne.n	80054e8 <_strtod_l+0x8b8>
 80053fa:	e66e      	b.n	80050da <_strtod_l+0x4aa>
 80053fc:	07e2      	lsls	r2, r4, #31
 80053fe:	d504      	bpl.n	800540a <_strtod_l+0x7da>
 8005400:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005404:	f7fb f8b2 	bl	800056c <__aeabi_dmul>
 8005408:	2301      	movs	r3, #1
 800540a:	1064      	asrs	r4, r4, #1
 800540c:	3608      	adds	r6, #8
 800540e:	e6ec      	b.n	80051ea <_strtod_l+0x5ba>
 8005410:	f04f 32ff 	mov.w	r2, #4294967295
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	ea03 0a0a 	and.w	sl, r3, sl
 800541c:	e705      	b.n	800522a <_strtod_l+0x5fa>
 800541e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005422:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005426:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800542a:	36e2      	adds	r6, #226	; 0xe2
 800542c:	fa09 f606 	lsl.w	r6, r9, r6
 8005430:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8005434:	e763      	b.n	80052fe <_strtod_l+0x6ce>
 8005436:	2301      	movs	r3, #1
 8005438:	2600      	movs	r6, #0
 800543a:	9314      	str	r3, [sp, #80]	; 0x50
 800543c:	e75f      	b.n	80052fe <_strtod_l+0x6ce>
 800543e:	464a      	mov	r2, r9
 8005440:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005442:	9804      	ldr	r0, [sp, #16]
 8005444:	f001 f81c 	bl	8006480 <__lshift>
 8005448:	901a      	str	r0, [sp, #104]	; 0x68
 800544a:	2800      	cmp	r0, #0
 800544c:	d187      	bne.n	800535e <_strtod_l+0x72e>
 800544e:	e639      	b.n	80050c4 <_strtod_l+0x494>
 8005450:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005452:	9906      	ldr	r1, [sp, #24]
 8005454:	9804      	ldr	r0, [sp, #16]
 8005456:	f000 ffc5 	bl	80063e4 <__pow5mult>
 800545a:	9006      	str	r0, [sp, #24]
 800545c:	2800      	cmp	r0, #0
 800545e:	d181      	bne.n	8005364 <_strtod_l+0x734>
 8005460:	e630      	b.n	80050c4 <_strtod_l+0x494>
 8005462:	bf00      	nop
 8005464:	08006bf0 	.word	0x08006bf0
 8005468:	fffffc02 	.word	0xfffffc02
 800546c:	f040 8086 	bne.w	800557c <_strtod_l+0x94c>
 8005470:	9a08      	ldr	r2, [sp, #32]
 8005472:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005476:	b332      	cbz	r2, 80054c6 <_strtod_l+0x896>
 8005478:	4aad      	ldr	r2, [pc, #692]	; (8005730 <_strtod_l+0xb00>)
 800547a:	4293      	cmp	r3, r2
 800547c:	4659      	mov	r1, fp
 800547e:	d152      	bne.n	8005526 <_strtod_l+0x8f6>
 8005480:	9b05      	ldr	r3, [sp, #20]
 8005482:	4650      	mov	r0, sl
 8005484:	b1d3      	cbz	r3, 80054bc <_strtod_l+0x88c>
 8005486:	4aab      	ldr	r2, [pc, #684]	; (8005734 <_strtod_l+0xb04>)
 8005488:	400a      	ands	r2, r1
 800548a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800548e:	f04f 37ff 	mov.w	r7, #4294967295
 8005492:	d816      	bhi.n	80054c2 <_strtod_l+0x892>
 8005494:	0d12      	lsrs	r2, r2, #20
 8005496:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800549a:	fa07 f303 	lsl.w	r3, r7, r3
 800549e:	4283      	cmp	r3, r0
 80054a0:	d141      	bne.n	8005526 <_strtod_l+0x8f6>
 80054a2:	4aa5      	ldr	r2, [pc, #660]	; (8005738 <_strtod_l+0xb08>)
 80054a4:	4291      	cmp	r1, r2
 80054a6:	d102      	bne.n	80054ae <_strtod_l+0x87e>
 80054a8:	3301      	adds	r3, #1
 80054aa:	f43f ae0b 	beq.w	80050c4 <_strtod_l+0x494>
 80054ae:	4ba1      	ldr	r3, [pc, #644]	; (8005734 <_strtod_l+0xb04>)
 80054b0:	400b      	ands	r3, r1
 80054b2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80054b6:	f04f 0a00 	mov.w	sl, #0
 80054ba:	e79b      	b.n	80053f4 <_strtod_l+0x7c4>
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295
 80054c0:	e7ed      	b.n	800549e <_strtod_l+0x86e>
 80054c2:	463b      	mov	r3, r7
 80054c4:	e7eb      	b.n	800549e <_strtod_l+0x86e>
 80054c6:	bb73      	cbnz	r3, 8005526 <_strtod_l+0x8f6>
 80054c8:	f1ba 0f00 	cmp.w	sl, #0
 80054cc:	d12b      	bne.n	8005526 <_strtod_l+0x8f6>
 80054ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80054d2:	9a05      	ldr	r2, [sp, #20]
 80054d4:	0d1b      	lsrs	r3, r3, #20
 80054d6:	051b      	lsls	r3, r3, #20
 80054d8:	b1e2      	cbz	r2, 8005514 <_strtod_l+0x8e4>
 80054da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80054de:	dc19      	bgt.n	8005514 <_strtod_l+0x8e4>
 80054e0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80054e4:	f77f ae5f 	ble.w	80051a6 <_strtod_l+0x576>
 80054e8:	4b94      	ldr	r3, [pc, #592]	; (800573c <_strtod_l+0xb0c>)
 80054ea:	930d      	str	r3, [sp, #52]	; 0x34
 80054ec:	2300      	movs	r3, #0
 80054ee:	930c      	str	r3, [sp, #48]	; 0x30
 80054f0:	4650      	mov	r0, sl
 80054f2:	4659      	mov	r1, fp
 80054f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80054f8:	f7fb f838 	bl	800056c <__aeabi_dmul>
 80054fc:	4682      	mov	sl, r0
 80054fe:	468b      	mov	fp, r1
 8005500:	2900      	cmp	r1, #0
 8005502:	f47f adea 	bne.w	80050da <_strtod_l+0x4aa>
 8005506:	2800      	cmp	r0, #0
 8005508:	f47f ade7 	bne.w	80050da <_strtod_l+0x4aa>
 800550c:	9a04      	ldr	r2, [sp, #16]
 800550e:	2322      	movs	r3, #34	; 0x22
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	e5e2      	b.n	80050da <_strtod_l+0x4aa>
 8005514:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005518:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800551c:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005520:	f04f 3aff 	mov.w	sl, #4294967295
 8005524:	e766      	b.n	80053f4 <_strtod_l+0x7c4>
 8005526:	b19e      	cbz	r6, 8005550 <_strtod_l+0x920>
 8005528:	ea16 0f0b 	tst.w	r6, fp
 800552c:	f43f af62 	beq.w	80053f4 <_strtod_l+0x7c4>
 8005530:	9b08      	ldr	r3, [sp, #32]
 8005532:	9a05      	ldr	r2, [sp, #20]
 8005534:	4650      	mov	r0, sl
 8005536:	4659      	mov	r1, fp
 8005538:	b173      	cbz	r3, 8005558 <_strtod_l+0x928>
 800553a:	f7ff fb5c 	bl	8004bf6 <sulp>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005546:	f7fa fe5f 	bl	8000208 <__adddf3>
 800554a:	4682      	mov	sl, r0
 800554c:	468b      	mov	fp, r1
 800554e:	e751      	b.n	80053f4 <_strtod_l+0x7c4>
 8005550:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005552:	ea13 0f0a 	tst.w	r3, sl
 8005556:	e7e9      	b.n	800552c <_strtod_l+0x8fc>
 8005558:	f7ff fb4d 	bl	8004bf6 <sulp>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005564:	f7fa fe4e 	bl	8000204 <__aeabi_dsub>
 8005568:	2200      	movs	r2, #0
 800556a:	2300      	movs	r3, #0
 800556c:	4682      	mov	sl, r0
 800556e:	468b      	mov	fp, r1
 8005570:	f7fb fa64 	bl	8000a3c <__aeabi_dcmpeq>
 8005574:	2800      	cmp	r0, #0
 8005576:	f47f ae16 	bne.w	80051a6 <_strtod_l+0x576>
 800557a:	e73b      	b.n	80053f4 <_strtod_l+0x7c4>
 800557c:	4629      	mov	r1, r5
 800557e:	4620      	mov	r0, r4
 8005580:	f001 f90d 	bl	800679e <__ratio>
 8005584:	ec57 6b10 	vmov	r6, r7, d0
 8005588:	2200      	movs	r2, #0
 800558a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800558e:	ee10 0a10 	vmov	r0, s0
 8005592:	4639      	mov	r1, r7
 8005594:	f7fb fa66 	bl	8000a64 <__aeabi_dcmple>
 8005598:	2800      	cmp	r0, #0
 800559a:	d074      	beq.n	8005686 <_strtod_l+0xa56>
 800559c:	9b08      	ldr	r3, [sp, #32]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d046      	beq.n	8005630 <_strtod_l+0xa00>
 80055a2:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8005740 <_strtod_l+0xb10>
 80055a6:	f04f 0800 	mov.w	r8, #0
 80055aa:	4f65      	ldr	r7, [pc, #404]	; (8005740 <_strtod_l+0xb10>)
 80055ac:	2600      	movs	r6, #0
 80055ae:	4b61      	ldr	r3, [pc, #388]	; (8005734 <_strtod_l+0xb04>)
 80055b0:	ea0b 0303 	and.w	r3, fp, r3
 80055b4:	9314      	str	r3, [sp, #80]	; 0x50
 80055b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80055b8:	4b62      	ldr	r3, [pc, #392]	; (8005744 <_strtod_l+0xb14>)
 80055ba:	429a      	cmp	r2, r3
 80055bc:	f040 80ca 	bne.w	8005754 <_strtod_l+0xb24>
 80055c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80055c8:	ec4b ab10 	vmov	d0, sl, fp
 80055cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80055d0:	f001 f820 	bl	8006614 <__ulp>
 80055d4:	4640      	mov	r0, r8
 80055d6:	ec53 2b10 	vmov	r2, r3, d0
 80055da:	4649      	mov	r1, r9
 80055dc:	f7fa ffc6 	bl	800056c <__aeabi_dmul>
 80055e0:	4652      	mov	r2, sl
 80055e2:	465b      	mov	r3, fp
 80055e4:	f7fa fe10 	bl	8000208 <__adddf3>
 80055e8:	4a52      	ldr	r2, [pc, #328]	; (8005734 <_strtod_l+0xb04>)
 80055ea:	4b57      	ldr	r3, [pc, #348]	; (8005748 <_strtod_l+0xb18>)
 80055ec:	400a      	ands	r2, r1
 80055ee:	429a      	cmp	r2, r3
 80055f0:	4682      	mov	sl, r0
 80055f2:	d95c      	bls.n	80056ae <_strtod_l+0xa7e>
 80055f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055f6:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d103      	bne.n	8005606 <_strtod_l+0x9d6>
 80055fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005600:	3301      	adds	r3, #1
 8005602:	f43f ad5f 	beq.w	80050c4 <_strtod_l+0x494>
 8005606:	f8df b130 	ldr.w	fp, [pc, #304]	; 8005738 <_strtod_l+0xb08>
 800560a:	f04f 3aff 	mov.w	sl, #4294967295
 800560e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005610:	9804      	ldr	r0, [sp, #16]
 8005612:	f000 fd72 	bl	80060fa <_Bfree>
 8005616:	9906      	ldr	r1, [sp, #24]
 8005618:	9804      	ldr	r0, [sp, #16]
 800561a:	f000 fd6e 	bl	80060fa <_Bfree>
 800561e:	4629      	mov	r1, r5
 8005620:	9804      	ldr	r0, [sp, #16]
 8005622:	f000 fd6a 	bl	80060fa <_Bfree>
 8005626:	4621      	mov	r1, r4
 8005628:	9804      	ldr	r0, [sp, #16]
 800562a:	f000 fd66 	bl	80060fa <_Bfree>
 800562e:	e61c      	b.n	800526a <_strtod_l+0x63a>
 8005630:	f1ba 0f00 	cmp.w	sl, #0
 8005634:	d118      	bne.n	8005668 <_strtod_l+0xa38>
 8005636:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800563a:	b9e3      	cbnz	r3, 8005676 <_strtod_l+0xa46>
 800563c:	2200      	movs	r2, #0
 800563e:	4b40      	ldr	r3, [pc, #256]	; (8005740 <_strtod_l+0xb10>)
 8005640:	4630      	mov	r0, r6
 8005642:	4639      	mov	r1, r7
 8005644:	f7fb fa04 	bl	8000a50 <__aeabi_dcmplt>
 8005648:	b9d0      	cbnz	r0, 8005680 <_strtod_l+0xa50>
 800564a:	4630      	mov	r0, r6
 800564c:	4639      	mov	r1, r7
 800564e:	2200      	movs	r2, #0
 8005650:	4b3e      	ldr	r3, [pc, #248]	; (800574c <_strtod_l+0xb1c>)
 8005652:	f7fa ff8b 	bl	800056c <__aeabi_dmul>
 8005656:	4606      	mov	r6, r0
 8005658:	460f      	mov	r7, r1
 800565a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800565e:	9616      	str	r6, [sp, #88]	; 0x58
 8005660:	9317      	str	r3, [sp, #92]	; 0x5c
 8005662:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
 8005666:	e7a2      	b.n	80055ae <_strtod_l+0x97e>
 8005668:	f1ba 0f01 	cmp.w	sl, #1
 800566c:	d103      	bne.n	8005676 <_strtod_l+0xa46>
 800566e:	f1bb 0f00 	cmp.w	fp, #0
 8005672:	f43f ad98 	beq.w	80051a6 <_strtod_l+0x576>
 8005676:	f04f 0800 	mov.w	r8, #0
 800567a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8005750 <_strtod_l+0xb20>
 800567e:	e794      	b.n	80055aa <_strtod_l+0x97a>
 8005680:	2600      	movs	r6, #0
 8005682:	4f32      	ldr	r7, [pc, #200]	; (800574c <_strtod_l+0xb1c>)
 8005684:	e7e9      	b.n	800565a <_strtod_l+0xa2a>
 8005686:	4b31      	ldr	r3, [pc, #196]	; (800574c <_strtod_l+0xb1c>)
 8005688:	4630      	mov	r0, r6
 800568a:	4639      	mov	r1, r7
 800568c:	2200      	movs	r2, #0
 800568e:	f7fa ff6d 	bl	800056c <__aeabi_dmul>
 8005692:	9b08      	ldr	r3, [sp, #32]
 8005694:	4606      	mov	r6, r0
 8005696:	460f      	mov	r7, r1
 8005698:	b933      	cbnz	r3, 80056a8 <_strtod_l+0xa78>
 800569a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800569e:	9010      	str	r0, [sp, #64]	; 0x40
 80056a0:	9311      	str	r3, [sp, #68]	; 0x44
 80056a2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80056a6:	e782      	b.n	80055ae <_strtod_l+0x97e>
 80056a8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80056ac:	e7f9      	b.n	80056a2 <_strtod_l+0xa72>
 80056ae:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 80056b2:	9b05      	ldr	r3, [sp, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1aa      	bne.n	800560e <_strtod_l+0x9de>
 80056b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80056bc:	0d1b      	lsrs	r3, r3, #20
 80056be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80056c0:	051b      	lsls	r3, r3, #20
 80056c2:	429a      	cmp	r2, r3
 80056c4:	46d8      	mov	r8, fp
 80056c6:	d1a2      	bne.n	800560e <_strtod_l+0x9de>
 80056c8:	4639      	mov	r1, r7
 80056ca:	4630      	mov	r0, r6
 80056cc:	f7fb f9e8 	bl	8000aa0 <__aeabi_d2iz>
 80056d0:	f7fa fee6 	bl	80004a0 <__aeabi_i2d>
 80056d4:	460b      	mov	r3, r1
 80056d6:	4602      	mov	r2, r0
 80056d8:	4639      	mov	r1, r7
 80056da:	4630      	mov	r0, r6
 80056dc:	f7fa fd92 	bl	8000204 <__aeabi_dsub>
 80056e0:	9b08      	ldr	r3, [sp, #32]
 80056e2:	4606      	mov	r6, r0
 80056e4:	460f      	mov	r7, r1
 80056e6:	b933      	cbnz	r3, 80056f6 <_strtod_l+0xac6>
 80056e8:	f1ba 0f00 	cmp.w	sl, #0
 80056ec:	d103      	bne.n	80056f6 <_strtod_l+0xac6>
 80056ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d068      	beq.n	80057c8 <_strtod_l+0xb98>
 80056f6:	a30a      	add	r3, pc, #40	; (adr r3, 8005720 <_strtod_l+0xaf0>)
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	4630      	mov	r0, r6
 80056fe:	4639      	mov	r1, r7
 8005700:	f7fb f9a6 	bl	8000a50 <__aeabi_dcmplt>
 8005704:	2800      	cmp	r0, #0
 8005706:	f47f ace8 	bne.w	80050da <_strtod_l+0x4aa>
 800570a:	a307      	add	r3, pc, #28	; (adr r3, 8005728 <_strtod_l+0xaf8>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	4630      	mov	r0, r6
 8005712:	4639      	mov	r1, r7
 8005714:	f7fb f9ba 	bl	8000a8c <__aeabi_dcmpgt>
 8005718:	2800      	cmp	r0, #0
 800571a:	f43f af78 	beq.w	800560e <_strtod_l+0x9de>
 800571e:	e4dc      	b.n	80050da <_strtod_l+0x4aa>
 8005720:	94a03595 	.word	0x94a03595
 8005724:	3fdfffff 	.word	0x3fdfffff
 8005728:	35afe535 	.word	0x35afe535
 800572c:	3fe00000 	.word	0x3fe00000
 8005730:	000fffff 	.word	0x000fffff
 8005734:	7ff00000 	.word	0x7ff00000
 8005738:	7fefffff 	.word	0x7fefffff
 800573c:	39500000 	.word	0x39500000
 8005740:	3ff00000 	.word	0x3ff00000
 8005744:	7fe00000 	.word	0x7fe00000
 8005748:	7c9fffff 	.word	0x7c9fffff
 800574c:	3fe00000 	.word	0x3fe00000
 8005750:	bff00000 	.word	0xbff00000
 8005754:	9b05      	ldr	r3, [sp, #20]
 8005756:	b31b      	cbz	r3, 80057a0 <_strtod_l+0xb70>
 8005758:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800575a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800575e:	d81f      	bhi.n	80057a0 <_strtod_l+0xb70>
 8005760:	a325      	add	r3, pc, #148	; (adr r3, 80057f8 <_strtod_l+0xbc8>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	4630      	mov	r0, r6
 8005768:	4639      	mov	r1, r7
 800576a:	f7fb f97b 	bl	8000a64 <__aeabi_dcmple>
 800576e:	b190      	cbz	r0, 8005796 <_strtod_l+0xb66>
 8005770:	4639      	mov	r1, r7
 8005772:	4630      	mov	r0, r6
 8005774:	f7fb f9bc 	bl	8000af0 <__aeabi_d2uiz>
 8005778:	2800      	cmp	r0, #0
 800577a:	bf08      	it	eq
 800577c:	2001      	moveq	r0, #1
 800577e:	f7fa fe7f 	bl	8000480 <__aeabi_ui2d>
 8005782:	9b08      	ldr	r3, [sp, #32]
 8005784:	4606      	mov	r6, r0
 8005786:	460f      	mov	r7, r1
 8005788:	b9db      	cbnz	r3, 80057c2 <_strtod_l+0xb92>
 800578a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800578e:	9012      	str	r0, [sp, #72]	; 0x48
 8005790:	9313      	str	r3, [sp, #76]	; 0x4c
 8005792:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
 8005796:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005798:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 800579c:	eba3 0902 	sub.w	r9, r3, r2
 80057a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80057a4:	f000 ff36 	bl	8006614 <__ulp>
 80057a8:	4640      	mov	r0, r8
 80057aa:	ec53 2b10 	vmov	r2, r3, d0
 80057ae:	4649      	mov	r1, r9
 80057b0:	f7fa fedc 	bl	800056c <__aeabi_dmul>
 80057b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057b8:	f7fa fd26 	bl	8000208 <__adddf3>
 80057bc:	4682      	mov	sl, r0
 80057be:	468b      	mov	fp, r1
 80057c0:	e777      	b.n	80056b2 <_strtod_l+0xa82>
 80057c2:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80057c6:	e7e4      	b.n	8005792 <_strtod_l+0xb62>
 80057c8:	a30d      	add	r3, pc, #52	; (adr r3, 8005800 <_strtod_l+0xbd0>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f7fb f93f 	bl	8000a50 <__aeabi_dcmplt>
 80057d2:	e7a1      	b.n	8005718 <_strtod_l+0xae8>
 80057d4:	2300      	movs	r3, #0
 80057d6:	9309      	str	r3, [sp, #36]	; 0x24
 80057d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80057da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	f7ff ba6b 	b.w	8004cb8 <_strtod_l+0x88>
 80057e2:	2b65      	cmp	r3, #101	; 0x65
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f43f abb6 	beq.w	8004f58 <_strtod_l+0x328>
 80057ec:	4615      	mov	r5, r2
 80057ee:	2101      	movs	r1, #1
 80057f0:	f7ff badc 	b.w	8004dac <_strtod_l+0x17c>
 80057f4:	f3af 8000 	nop.w
 80057f8:	ffc00000 	.word	0xffc00000
 80057fc:	41dfffff 	.word	0x41dfffff
 8005800:	94a03595 	.word	0x94a03595
 8005804:	3fcfffff 	.word	0x3fcfffff

08005808 <strtod>:
 8005808:	4b07      	ldr	r3, [pc, #28]	; (8005828 <strtod+0x20>)
 800580a:	4a08      	ldr	r2, [pc, #32]	; (800582c <strtod+0x24>)
 800580c:	b410      	push	{r4}
 800580e:	681c      	ldr	r4, [r3, #0]
 8005810:	6a23      	ldr	r3, [r4, #32]
 8005812:	2b00      	cmp	r3, #0
 8005814:	bf08      	it	eq
 8005816:	4613      	moveq	r3, r2
 8005818:	460a      	mov	r2, r1
 800581a:	4601      	mov	r1, r0
 800581c:	4620      	mov	r0, r4
 800581e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005822:	f7ff ba05 	b.w	8004c30 <_strtod_l>
 8005826:	bf00      	nop
 8005828:	200000c4 	.word	0x200000c4
 800582c:	20000128 	.word	0x20000128

08005830 <strtok>:
 8005830:	4b13      	ldr	r3, [pc, #76]	; (8005880 <strtok+0x50>)
 8005832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	681d      	ldr	r5, [r3, #0]
 8005838:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800583a:	4606      	mov	r6, r0
 800583c:	460f      	mov	r7, r1
 800583e:	b9b4      	cbnz	r4, 800586e <strtok+0x3e>
 8005840:	2050      	movs	r0, #80	; 0x50
 8005842:	f000 fc01 	bl	8006048 <malloc>
 8005846:	65a8      	str	r0, [r5, #88]	; 0x58
 8005848:	6004      	str	r4, [r0, #0]
 800584a:	6044      	str	r4, [r0, #4]
 800584c:	6084      	str	r4, [r0, #8]
 800584e:	60c4      	str	r4, [r0, #12]
 8005850:	6104      	str	r4, [r0, #16]
 8005852:	6144      	str	r4, [r0, #20]
 8005854:	6184      	str	r4, [r0, #24]
 8005856:	6284      	str	r4, [r0, #40]	; 0x28
 8005858:	62c4      	str	r4, [r0, #44]	; 0x2c
 800585a:	6304      	str	r4, [r0, #48]	; 0x30
 800585c:	6344      	str	r4, [r0, #52]	; 0x34
 800585e:	6384      	str	r4, [r0, #56]	; 0x38
 8005860:	63c4      	str	r4, [r0, #60]	; 0x3c
 8005862:	6404      	str	r4, [r0, #64]	; 0x40
 8005864:	6444      	str	r4, [r0, #68]	; 0x44
 8005866:	6484      	str	r4, [r0, #72]	; 0x48
 8005868:	64c4      	str	r4, [r0, #76]	; 0x4c
 800586a:	7704      	strb	r4, [r0, #28]
 800586c:	6244      	str	r4, [r0, #36]	; 0x24
 800586e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005870:	4639      	mov	r1, r7
 8005872:	4630      	mov	r0, r6
 8005874:	2301      	movs	r3, #1
 8005876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800587a:	f000 b803 	b.w	8005884 <__strtok_r>
 800587e:	bf00      	nop
 8005880:	200000c4 	.word	0x200000c4

08005884 <__strtok_r>:
 8005884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005886:	b918      	cbnz	r0, 8005890 <__strtok_r+0xc>
 8005888:	6810      	ldr	r0, [r2, #0]
 800588a:	b908      	cbnz	r0, 8005890 <__strtok_r+0xc>
 800588c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800588e:	4620      	mov	r0, r4
 8005890:	4604      	mov	r4, r0
 8005892:	460f      	mov	r7, r1
 8005894:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005898:	f817 6b01 	ldrb.w	r6, [r7], #1
 800589c:	b91e      	cbnz	r6, 80058a6 <__strtok_r+0x22>
 800589e:	b965      	cbnz	r5, 80058ba <__strtok_r+0x36>
 80058a0:	6015      	str	r5, [r2, #0]
 80058a2:	4628      	mov	r0, r5
 80058a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a6:	42b5      	cmp	r5, r6
 80058a8:	d1f6      	bne.n	8005898 <__strtok_r+0x14>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1ef      	bne.n	800588e <__strtok_r+0xa>
 80058ae:	6014      	str	r4, [r2, #0]
 80058b0:	7003      	strb	r3, [r0, #0]
 80058b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058b4:	461c      	mov	r4, r3
 80058b6:	e00c      	b.n	80058d2 <__strtok_r+0x4e>
 80058b8:	b915      	cbnz	r5, 80058c0 <__strtok_r+0x3c>
 80058ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80058be:	460e      	mov	r6, r1
 80058c0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80058c4:	42ab      	cmp	r3, r5
 80058c6:	d1f7      	bne.n	80058b8 <__strtok_r+0x34>
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f3      	beq.n	80058b4 <__strtok_r+0x30>
 80058cc:	2300      	movs	r3, #0
 80058ce:	f804 3c01 	strb.w	r3, [r4, #-1]
 80058d2:	6014      	str	r4, [r2, #0]
 80058d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058d6 <_strtol_l.isra.0>:
 80058d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058da:	4680      	mov	r8, r0
 80058dc:	4689      	mov	r9, r1
 80058de:	4692      	mov	sl, r2
 80058e0:	461f      	mov	r7, r3
 80058e2:	468b      	mov	fp, r1
 80058e4:	465d      	mov	r5, fp
 80058e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058ec:	f000 fba7 	bl	800603e <__locale_ctype_ptr_l>
 80058f0:	4420      	add	r0, r4
 80058f2:	7846      	ldrb	r6, [r0, #1]
 80058f4:	f016 0608 	ands.w	r6, r6, #8
 80058f8:	d10b      	bne.n	8005912 <_strtol_l.isra.0+0x3c>
 80058fa:	2c2d      	cmp	r4, #45	; 0x2d
 80058fc:	d10b      	bne.n	8005916 <_strtol_l.isra.0+0x40>
 80058fe:	782c      	ldrb	r4, [r5, #0]
 8005900:	2601      	movs	r6, #1
 8005902:	f10b 0502 	add.w	r5, fp, #2
 8005906:	b167      	cbz	r7, 8005922 <_strtol_l.isra.0+0x4c>
 8005908:	2f10      	cmp	r7, #16
 800590a:	d114      	bne.n	8005936 <_strtol_l.isra.0+0x60>
 800590c:	2c30      	cmp	r4, #48	; 0x30
 800590e:	d00a      	beq.n	8005926 <_strtol_l.isra.0+0x50>
 8005910:	e011      	b.n	8005936 <_strtol_l.isra.0+0x60>
 8005912:	46ab      	mov	fp, r5
 8005914:	e7e6      	b.n	80058e4 <_strtol_l.isra.0+0xe>
 8005916:	2c2b      	cmp	r4, #43	; 0x2b
 8005918:	bf04      	itt	eq
 800591a:	782c      	ldrbeq	r4, [r5, #0]
 800591c:	f10b 0502 	addeq.w	r5, fp, #2
 8005920:	e7f1      	b.n	8005906 <_strtol_l.isra.0+0x30>
 8005922:	2c30      	cmp	r4, #48	; 0x30
 8005924:	d127      	bne.n	8005976 <_strtol_l.isra.0+0xa0>
 8005926:	782b      	ldrb	r3, [r5, #0]
 8005928:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800592c:	2b58      	cmp	r3, #88	; 0x58
 800592e:	d14b      	bne.n	80059c8 <_strtol_l.isra.0+0xf2>
 8005930:	786c      	ldrb	r4, [r5, #1]
 8005932:	2710      	movs	r7, #16
 8005934:	3502      	adds	r5, #2
 8005936:	2e00      	cmp	r6, #0
 8005938:	bf0c      	ite	eq
 800593a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800593e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005942:	2200      	movs	r2, #0
 8005944:	fbb1 fef7 	udiv	lr, r1, r7
 8005948:	4610      	mov	r0, r2
 800594a:	fb07 1c1e 	mls	ip, r7, lr, r1
 800594e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005952:	2b09      	cmp	r3, #9
 8005954:	d811      	bhi.n	800597a <_strtol_l.isra.0+0xa4>
 8005956:	461c      	mov	r4, r3
 8005958:	42a7      	cmp	r7, r4
 800595a:	dd1d      	ble.n	8005998 <_strtol_l.isra.0+0xc2>
 800595c:	1c53      	adds	r3, r2, #1
 800595e:	d007      	beq.n	8005970 <_strtol_l.isra.0+0x9a>
 8005960:	4586      	cmp	lr, r0
 8005962:	d316      	bcc.n	8005992 <_strtol_l.isra.0+0xbc>
 8005964:	d101      	bne.n	800596a <_strtol_l.isra.0+0x94>
 8005966:	45a4      	cmp	ip, r4
 8005968:	db13      	blt.n	8005992 <_strtol_l.isra.0+0xbc>
 800596a:	fb00 4007 	mla	r0, r0, r7, r4
 800596e:	2201      	movs	r2, #1
 8005970:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005974:	e7eb      	b.n	800594e <_strtol_l.isra.0+0x78>
 8005976:	270a      	movs	r7, #10
 8005978:	e7dd      	b.n	8005936 <_strtol_l.isra.0+0x60>
 800597a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800597e:	2b19      	cmp	r3, #25
 8005980:	d801      	bhi.n	8005986 <_strtol_l.isra.0+0xb0>
 8005982:	3c37      	subs	r4, #55	; 0x37
 8005984:	e7e8      	b.n	8005958 <_strtol_l.isra.0+0x82>
 8005986:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800598a:	2b19      	cmp	r3, #25
 800598c:	d804      	bhi.n	8005998 <_strtol_l.isra.0+0xc2>
 800598e:	3c57      	subs	r4, #87	; 0x57
 8005990:	e7e2      	b.n	8005958 <_strtol_l.isra.0+0x82>
 8005992:	f04f 32ff 	mov.w	r2, #4294967295
 8005996:	e7eb      	b.n	8005970 <_strtol_l.isra.0+0x9a>
 8005998:	1c53      	adds	r3, r2, #1
 800599a:	d108      	bne.n	80059ae <_strtol_l.isra.0+0xd8>
 800599c:	2322      	movs	r3, #34	; 0x22
 800599e:	f8c8 3000 	str.w	r3, [r8]
 80059a2:	4608      	mov	r0, r1
 80059a4:	f1ba 0f00 	cmp.w	sl, #0
 80059a8:	d107      	bne.n	80059ba <_strtol_l.isra.0+0xe4>
 80059aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	b106      	cbz	r6, 80059b2 <_strtol_l.isra.0+0xdc>
 80059b0:	4240      	negs	r0, r0
 80059b2:	f1ba 0f00 	cmp.w	sl, #0
 80059b6:	d00c      	beq.n	80059d2 <_strtol_l.isra.0+0xfc>
 80059b8:	b122      	cbz	r2, 80059c4 <_strtol_l.isra.0+0xee>
 80059ba:	3d01      	subs	r5, #1
 80059bc:	f8ca 5000 	str.w	r5, [sl]
 80059c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c4:	464d      	mov	r5, r9
 80059c6:	e7f9      	b.n	80059bc <_strtol_l.isra.0+0xe6>
 80059c8:	2430      	movs	r4, #48	; 0x30
 80059ca:	2f00      	cmp	r7, #0
 80059cc:	d1b3      	bne.n	8005936 <_strtol_l.isra.0+0x60>
 80059ce:	2708      	movs	r7, #8
 80059d0:	e7b1      	b.n	8005936 <_strtol_l.isra.0+0x60>
 80059d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080059d8 <strtol>:
 80059d8:	4b08      	ldr	r3, [pc, #32]	; (80059fc <strtol+0x24>)
 80059da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059dc:	681c      	ldr	r4, [r3, #0]
 80059de:	4d08      	ldr	r5, [pc, #32]	; (8005a00 <strtol+0x28>)
 80059e0:	6a23      	ldr	r3, [r4, #32]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	bf08      	it	eq
 80059e6:	462b      	moveq	r3, r5
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	4613      	mov	r3, r2
 80059ec:	460a      	mov	r2, r1
 80059ee:	4601      	mov	r1, r0
 80059f0:	4620      	mov	r0, r4
 80059f2:	f7ff ff70 	bl	80058d6 <_strtol_l.isra.0>
 80059f6:	b003      	add	sp, #12
 80059f8:	bd30      	pop	{r4, r5, pc}
 80059fa:	bf00      	nop
 80059fc:	200000c4 	.word	0x200000c4
 8005a00:	20000128 	.word	0x20000128

08005a04 <rshift>:
 8005a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a06:	6906      	ldr	r6, [r0, #16]
 8005a08:	114b      	asrs	r3, r1, #5
 8005a0a:	42b3      	cmp	r3, r6
 8005a0c:	f100 0514 	add.w	r5, r0, #20
 8005a10:	da2b      	bge.n	8005a6a <rshift+0x66>
 8005a12:	f011 011f 	ands.w	r1, r1, #31
 8005a16:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8005a1a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8005a1e:	d108      	bne.n	8005a32 <rshift+0x2e>
 8005a20:	4629      	mov	r1, r5
 8005a22:	42b2      	cmp	r2, r6
 8005a24:	460b      	mov	r3, r1
 8005a26:	d210      	bcs.n	8005a4a <rshift+0x46>
 8005a28:	f852 3b04 	ldr.w	r3, [r2], #4
 8005a2c:	f841 3b04 	str.w	r3, [r1], #4
 8005a30:	e7f7      	b.n	8005a22 <rshift+0x1e>
 8005a32:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8005a36:	f1c1 0e20 	rsb	lr, r1, #32
 8005a3a:	3204      	adds	r2, #4
 8005a3c:	40cc      	lsrs	r4, r1
 8005a3e:	462b      	mov	r3, r5
 8005a40:	42b2      	cmp	r2, r6
 8005a42:	d308      	bcc.n	8005a56 <rshift+0x52>
 8005a44:	601c      	str	r4, [r3, #0]
 8005a46:	b104      	cbz	r4, 8005a4a <rshift+0x46>
 8005a48:	3304      	adds	r3, #4
 8005a4a:	1b5b      	subs	r3, r3, r5
 8005a4c:	109b      	asrs	r3, r3, #2
 8005a4e:	6103      	str	r3, [r0, #16]
 8005a50:	b903      	cbnz	r3, 8005a54 <rshift+0x50>
 8005a52:	6143      	str	r3, [r0, #20]
 8005a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a56:	6817      	ldr	r7, [r2, #0]
 8005a58:	fa07 f70e 	lsl.w	r7, r7, lr
 8005a5c:	433c      	orrs	r4, r7
 8005a5e:	f843 4b04 	str.w	r4, [r3], #4
 8005a62:	f852 4b04 	ldr.w	r4, [r2], #4
 8005a66:	40cc      	lsrs	r4, r1
 8005a68:	e7ea      	b.n	8005a40 <rshift+0x3c>
 8005a6a:	462b      	mov	r3, r5
 8005a6c:	e7ed      	b.n	8005a4a <rshift+0x46>

08005a6e <__hexdig_fun>:
 8005a6e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005a72:	2b09      	cmp	r3, #9
 8005a74:	d802      	bhi.n	8005a7c <__hexdig_fun+0xe>
 8005a76:	3820      	subs	r0, #32
 8005a78:	b2c0      	uxtb	r0, r0
 8005a7a:	4770      	bx	lr
 8005a7c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005a80:	2b05      	cmp	r3, #5
 8005a82:	d801      	bhi.n	8005a88 <__hexdig_fun+0x1a>
 8005a84:	3847      	subs	r0, #71	; 0x47
 8005a86:	e7f7      	b.n	8005a78 <__hexdig_fun+0xa>
 8005a88:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005a8c:	2b05      	cmp	r3, #5
 8005a8e:	d801      	bhi.n	8005a94 <__hexdig_fun+0x26>
 8005a90:	3827      	subs	r0, #39	; 0x27
 8005a92:	e7f1      	b.n	8005a78 <__hexdig_fun+0xa>
 8005a94:	2000      	movs	r0, #0
 8005a96:	4770      	bx	lr

08005a98 <__gethex>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	b08b      	sub	sp, #44	; 0x2c
 8005a9e:	468a      	mov	sl, r1
 8005aa0:	9002      	str	r0, [sp, #8]
 8005aa2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005aa4:	9306      	str	r3, [sp, #24]
 8005aa6:	4690      	mov	r8, r2
 8005aa8:	f000 facc 	bl	8006044 <__localeconv_l>
 8005aac:	6803      	ldr	r3, [r0, #0]
 8005aae:	9303      	str	r3, [sp, #12]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fa fb9b 	bl	80001ec <strlen>
 8005ab6:	9b03      	ldr	r3, [sp, #12]
 8005ab8:	9001      	str	r0, [sp, #4]
 8005aba:	4403      	add	r3, r0
 8005abc:	f04f 0b00 	mov.w	fp, #0
 8005ac0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005ac4:	9307      	str	r3, [sp, #28]
 8005ac6:	f8da 3000 	ldr.w	r3, [sl]
 8005aca:	3302      	adds	r3, #2
 8005acc:	461f      	mov	r7, r3
 8005ace:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005ad2:	2830      	cmp	r0, #48	; 0x30
 8005ad4:	d06c      	beq.n	8005bb0 <__gethex+0x118>
 8005ad6:	f7ff ffca 	bl	8005a6e <__hexdig_fun>
 8005ada:	4604      	mov	r4, r0
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d16a      	bne.n	8005bb6 <__gethex+0x11e>
 8005ae0:	9a01      	ldr	r2, [sp, #4]
 8005ae2:	9903      	ldr	r1, [sp, #12]
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f000 ff3d 	bl	8006964 <strncmp>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d166      	bne.n	8005bbc <__gethex+0x124>
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	5cf8      	ldrb	r0, [r7, r3]
 8005af2:	18fe      	adds	r6, r7, r3
 8005af4:	f7ff ffbb 	bl	8005a6e <__hexdig_fun>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d062      	beq.n	8005bc2 <__gethex+0x12a>
 8005afc:	4633      	mov	r3, r6
 8005afe:	7818      	ldrb	r0, [r3, #0]
 8005b00:	2830      	cmp	r0, #48	; 0x30
 8005b02:	461f      	mov	r7, r3
 8005b04:	f103 0301 	add.w	r3, r3, #1
 8005b08:	d0f9      	beq.n	8005afe <__gethex+0x66>
 8005b0a:	f7ff ffb0 	bl	8005a6e <__hexdig_fun>
 8005b0e:	fab0 f580 	clz	r5, r0
 8005b12:	096d      	lsrs	r5, r5, #5
 8005b14:	4634      	mov	r4, r6
 8005b16:	f04f 0b01 	mov.w	fp, #1
 8005b1a:	463a      	mov	r2, r7
 8005b1c:	4616      	mov	r6, r2
 8005b1e:	3201      	adds	r2, #1
 8005b20:	7830      	ldrb	r0, [r6, #0]
 8005b22:	f7ff ffa4 	bl	8005a6e <__hexdig_fun>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d1f8      	bne.n	8005b1c <__gethex+0x84>
 8005b2a:	9a01      	ldr	r2, [sp, #4]
 8005b2c:	9903      	ldr	r1, [sp, #12]
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f000 ff18 	bl	8006964 <strncmp>
 8005b34:	b950      	cbnz	r0, 8005b4c <__gethex+0xb4>
 8005b36:	b954      	cbnz	r4, 8005b4e <__gethex+0xb6>
 8005b38:	9b01      	ldr	r3, [sp, #4]
 8005b3a:	18f4      	adds	r4, r6, r3
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	4616      	mov	r6, r2
 8005b40:	3201      	adds	r2, #1
 8005b42:	7830      	ldrb	r0, [r6, #0]
 8005b44:	f7ff ff93 	bl	8005a6e <__hexdig_fun>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d1f8      	bne.n	8005b3e <__gethex+0xa6>
 8005b4c:	b10c      	cbz	r4, 8005b52 <__gethex+0xba>
 8005b4e:	1ba4      	subs	r4, r4, r6
 8005b50:	00a4      	lsls	r4, r4, #2
 8005b52:	7833      	ldrb	r3, [r6, #0]
 8005b54:	2b50      	cmp	r3, #80	; 0x50
 8005b56:	d001      	beq.n	8005b5c <__gethex+0xc4>
 8005b58:	2b70      	cmp	r3, #112	; 0x70
 8005b5a:	d140      	bne.n	8005bde <__gethex+0x146>
 8005b5c:	7873      	ldrb	r3, [r6, #1]
 8005b5e:	2b2b      	cmp	r3, #43	; 0x2b
 8005b60:	d035      	beq.n	8005bce <__gethex+0x136>
 8005b62:	2b2d      	cmp	r3, #45	; 0x2d
 8005b64:	d02f      	beq.n	8005bc6 <__gethex+0x12e>
 8005b66:	1c71      	adds	r1, r6, #1
 8005b68:	f04f 0900 	mov.w	r9, #0
 8005b6c:	7808      	ldrb	r0, [r1, #0]
 8005b6e:	f7ff ff7e 	bl	8005a6e <__hexdig_fun>
 8005b72:	1e43      	subs	r3, r0, #1
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b18      	cmp	r3, #24
 8005b78:	d831      	bhi.n	8005bde <__gethex+0x146>
 8005b7a:	f1a0 0210 	sub.w	r2, r0, #16
 8005b7e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005b82:	f7ff ff74 	bl	8005a6e <__hexdig_fun>
 8005b86:	1e43      	subs	r3, r0, #1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b18      	cmp	r3, #24
 8005b8c:	d922      	bls.n	8005bd4 <__gethex+0x13c>
 8005b8e:	f1b9 0f00 	cmp.w	r9, #0
 8005b92:	d000      	beq.n	8005b96 <__gethex+0xfe>
 8005b94:	4252      	negs	r2, r2
 8005b96:	4414      	add	r4, r2
 8005b98:	f8ca 1000 	str.w	r1, [sl]
 8005b9c:	b30d      	cbz	r5, 8005be2 <__gethex+0x14a>
 8005b9e:	f1bb 0f00 	cmp.w	fp, #0
 8005ba2:	bf14      	ite	ne
 8005ba4:	2700      	movne	r7, #0
 8005ba6:	2706      	moveq	r7, #6
 8005ba8:	4638      	mov	r0, r7
 8005baa:	b00b      	add	sp, #44	; 0x2c
 8005bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb0:	f10b 0b01 	add.w	fp, fp, #1
 8005bb4:	e78a      	b.n	8005acc <__gethex+0x34>
 8005bb6:	2500      	movs	r5, #0
 8005bb8:	462c      	mov	r4, r5
 8005bba:	e7ae      	b.n	8005b1a <__gethex+0x82>
 8005bbc:	463e      	mov	r6, r7
 8005bbe:	2501      	movs	r5, #1
 8005bc0:	e7c7      	b.n	8005b52 <__gethex+0xba>
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	e7fb      	b.n	8005bbe <__gethex+0x126>
 8005bc6:	f04f 0901 	mov.w	r9, #1
 8005bca:	1cb1      	adds	r1, r6, #2
 8005bcc:	e7ce      	b.n	8005b6c <__gethex+0xd4>
 8005bce:	f04f 0900 	mov.w	r9, #0
 8005bd2:	e7fa      	b.n	8005bca <__gethex+0x132>
 8005bd4:	230a      	movs	r3, #10
 8005bd6:	fb03 0202 	mla	r2, r3, r2, r0
 8005bda:	3a10      	subs	r2, #16
 8005bdc:	e7cf      	b.n	8005b7e <__gethex+0xe6>
 8005bde:	4631      	mov	r1, r6
 8005be0:	e7da      	b.n	8005b98 <__gethex+0x100>
 8005be2:	1bf3      	subs	r3, r6, r7
 8005be4:	3b01      	subs	r3, #1
 8005be6:	4629      	mov	r1, r5
 8005be8:	2b07      	cmp	r3, #7
 8005bea:	dc49      	bgt.n	8005c80 <__gethex+0x1e8>
 8005bec:	9802      	ldr	r0, [sp, #8]
 8005bee:	f000 fa50 	bl	8006092 <_Balloc>
 8005bf2:	9b01      	ldr	r3, [sp, #4]
 8005bf4:	f100 0914 	add.w	r9, r0, #20
 8005bf8:	f04f 0b00 	mov.w	fp, #0
 8005bfc:	f1c3 0301 	rsb	r3, r3, #1
 8005c00:	4605      	mov	r5, r0
 8005c02:	f8cd 9010 	str.w	r9, [sp, #16]
 8005c06:	46da      	mov	sl, fp
 8005c08:	9308      	str	r3, [sp, #32]
 8005c0a:	42b7      	cmp	r7, r6
 8005c0c:	d33b      	bcc.n	8005c86 <__gethex+0x1ee>
 8005c0e:	9804      	ldr	r0, [sp, #16]
 8005c10:	f840 ab04 	str.w	sl, [r0], #4
 8005c14:	eba0 0009 	sub.w	r0, r0, r9
 8005c18:	1080      	asrs	r0, r0, #2
 8005c1a:	6128      	str	r0, [r5, #16]
 8005c1c:	0147      	lsls	r7, r0, #5
 8005c1e:	4650      	mov	r0, sl
 8005c20:	f000 fafb 	bl	800621a <__hi0bits>
 8005c24:	f8d8 6000 	ldr.w	r6, [r8]
 8005c28:	1a3f      	subs	r7, r7, r0
 8005c2a:	42b7      	cmp	r7, r6
 8005c2c:	dd64      	ble.n	8005cf8 <__gethex+0x260>
 8005c2e:	1bbf      	subs	r7, r7, r6
 8005c30:	4639      	mov	r1, r7
 8005c32:	4628      	mov	r0, r5
 8005c34:	f000 fdf9 	bl	800682a <__any_on>
 8005c38:	4682      	mov	sl, r0
 8005c3a:	b178      	cbz	r0, 8005c5c <__gethex+0x1c4>
 8005c3c:	1e7b      	subs	r3, r7, #1
 8005c3e:	1159      	asrs	r1, r3, #5
 8005c40:	f003 021f 	and.w	r2, r3, #31
 8005c44:	f04f 0a01 	mov.w	sl, #1
 8005c48:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005c4c:	fa0a f202 	lsl.w	r2, sl, r2
 8005c50:	420a      	tst	r2, r1
 8005c52:	d003      	beq.n	8005c5c <__gethex+0x1c4>
 8005c54:	4553      	cmp	r3, sl
 8005c56:	dc46      	bgt.n	8005ce6 <__gethex+0x24e>
 8005c58:	f04f 0a02 	mov.w	sl, #2
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f7ff fed0 	bl	8005a04 <rshift>
 8005c64:	443c      	add	r4, r7
 8005c66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c6a:	429c      	cmp	r4, r3
 8005c6c:	dd52      	ble.n	8005d14 <__gethex+0x27c>
 8005c6e:	4629      	mov	r1, r5
 8005c70:	9802      	ldr	r0, [sp, #8]
 8005c72:	f000 fa42 	bl	80060fa <_Bfree>
 8005c76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c78:	2300      	movs	r3, #0
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	27a3      	movs	r7, #163	; 0xa3
 8005c7e:	e793      	b.n	8005ba8 <__gethex+0x110>
 8005c80:	3101      	adds	r1, #1
 8005c82:	105b      	asrs	r3, r3, #1
 8005c84:	e7b0      	b.n	8005be8 <__gethex+0x150>
 8005c86:	1e73      	subs	r3, r6, #1
 8005c88:	9305      	str	r3, [sp, #20]
 8005c8a:	9a07      	ldr	r2, [sp, #28]
 8005c8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d018      	beq.n	8005cc6 <__gethex+0x22e>
 8005c94:	f1bb 0f20 	cmp.w	fp, #32
 8005c98:	d107      	bne.n	8005caa <__gethex+0x212>
 8005c9a:	9b04      	ldr	r3, [sp, #16]
 8005c9c:	f8c3 a000 	str.w	sl, [r3]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	f04f 0a00 	mov.w	sl, #0
 8005ca6:	9304      	str	r3, [sp, #16]
 8005ca8:	46d3      	mov	fp, sl
 8005caa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005cae:	f7ff fede 	bl	8005a6e <__hexdig_fun>
 8005cb2:	f000 000f 	and.w	r0, r0, #15
 8005cb6:	fa00 f00b 	lsl.w	r0, r0, fp
 8005cba:	ea4a 0a00 	orr.w	sl, sl, r0
 8005cbe:	f10b 0b04 	add.w	fp, fp, #4
 8005cc2:	9b05      	ldr	r3, [sp, #20]
 8005cc4:	e00d      	b.n	8005ce2 <__gethex+0x24a>
 8005cc6:	9b05      	ldr	r3, [sp, #20]
 8005cc8:	9a08      	ldr	r2, [sp, #32]
 8005cca:	4413      	add	r3, r2
 8005ccc:	429f      	cmp	r7, r3
 8005cce:	d8e1      	bhi.n	8005c94 <__gethex+0x1fc>
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	9a01      	ldr	r2, [sp, #4]
 8005cd4:	9903      	ldr	r1, [sp, #12]
 8005cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd8:	f000 fe44 	bl	8006964 <strncmp>
 8005cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d1d8      	bne.n	8005c94 <__gethex+0x1fc>
 8005ce2:	461e      	mov	r6, r3
 8005ce4:	e791      	b.n	8005c0a <__gethex+0x172>
 8005ce6:	1eb9      	subs	r1, r7, #2
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f000 fd9e 	bl	800682a <__any_on>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d0b2      	beq.n	8005c58 <__gethex+0x1c0>
 8005cf2:	f04f 0a03 	mov.w	sl, #3
 8005cf6:	e7b1      	b.n	8005c5c <__gethex+0x1c4>
 8005cf8:	da09      	bge.n	8005d0e <__gethex+0x276>
 8005cfa:	1bf7      	subs	r7, r6, r7
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	463a      	mov	r2, r7
 8005d00:	9802      	ldr	r0, [sp, #8]
 8005d02:	f000 fbbd 	bl	8006480 <__lshift>
 8005d06:	1be4      	subs	r4, r4, r7
 8005d08:	4605      	mov	r5, r0
 8005d0a:	f100 0914 	add.w	r9, r0, #20
 8005d0e:	f04f 0a00 	mov.w	sl, #0
 8005d12:	e7a8      	b.n	8005c66 <__gethex+0x1ce>
 8005d14:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005d18:	4284      	cmp	r4, r0
 8005d1a:	da6a      	bge.n	8005df2 <__gethex+0x35a>
 8005d1c:	1b04      	subs	r4, r0, r4
 8005d1e:	42a6      	cmp	r6, r4
 8005d20:	dc2e      	bgt.n	8005d80 <__gethex+0x2e8>
 8005d22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d022      	beq.n	8005d70 <__gethex+0x2d8>
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d024      	beq.n	8005d78 <__gethex+0x2e0>
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d115      	bne.n	8005d5e <__gethex+0x2c6>
 8005d32:	42a6      	cmp	r6, r4
 8005d34:	d113      	bne.n	8005d5e <__gethex+0x2c6>
 8005d36:	2e01      	cmp	r6, #1
 8005d38:	dc0b      	bgt.n	8005d52 <__gethex+0x2ba>
 8005d3a:	9a06      	ldr	r2, [sp, #24]
 8005d3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	2301      	movs	r3, #1
 8005d44:	612b      	str	r3, [r5, #16]
 8005d46:	f8c9 3000 	str.w	r3, [r9]
 8005d4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d4c:	2762      	movs	r7, #98	; 0x62
 8005d4e:	601d      	str	r5, [r3, #0]
 8005d50:	e72a      	b.n	8005ba8 <__gethex+0x110>
 8005d52:	1e71      	subs	r1, r6, #1
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 fd68 	bl	800682a <__any_on>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d1ed      	bne.n	8005d3a <__gethex+0x2a2>
 8005d5e:	4629      	mov	r1, r5
 8005d60:	9802      	ldr	r0, [sp, #8]
 8005d62:	f000 f9ca 	bl	80060fa <_Bfree>
 8005d66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005d68:	2300      	movs	r3, #0
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	2750      	movs	r7, #80	; 0x50
 8005d6e:	e71b      	b.n	8005ba8 <__gethex+0x110>
 8005d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0e1      	beq.n	8005d3a <__gethex+0x2a2>
 8005d76:	e7f2      	b.n	8005d5e <__gethex+0x2c6>
 8005d78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1dd      	bne.n	8005d3a <__gethex+0x2a2>
 8005d7e:	e7ee      	b.n	8005d5e <__gethex+0x2c6>
 8005d80:	1e67      	subs	r7, r4, #1
 8005d82:	f1ba 0f00 	cmp.w	sl, #0
 8005d86:	d131      	bne.n	8005dec <__gethex+0x354>
 8005d88:	b127      	cbz	r7, 8005d94 <__gethex+0x2fc>
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 fd4c 	bl	800682a <__any_on>
 8005d92:	4682      	mov	sl, r0
 8005d94:	117a      	asrs	r2, r7, #5
 8005d96:	2301      	movs	r3, #1
 8005d98:	f007 071f 	and.w	r7, r7, #31
 8005d9c:	fa03 f707 	lsl.w	r7, r3, r7
 8005da0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005da4:	4621      	mov	r1, r4
 8005da6:	421f      	tst	r7, r3
 8005da8:	4628      	mov	r0, r5
 8005daa:	bf18      	it	ne
 8005dac:	f04a 0a02 	orrne.w	sl, sl, #2
 8005db0:	1b36      	subs	r6, r6, r4
 8005db2:	f7ff fe27 	bl	8005a04 <rshift>
 8005db6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005dba:	2702      	movs	r7, #2
 8005dbc:	f1ba 0f00 	cmp.w	sl, #0
 8005dc0:	d045      	beq.n	8005e4e <__gethex+0x3b6>
 8005dc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d015      	beq.n	8005df6 <__gethex+0x35e>
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d017      	beq.n	8005dfe <__gethex+0x366>
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d109      	bne.n	8005de6 <__gethex+0x34e>
 8005dd2:	f01a 0f02 	tst.w	sl, #2
 8005dd6:	d006      	beq.n	8005de6 <__gethex+0x34e>
 8005dd8:	f8d9 3000 	ldr.w	r3, [r9]
 8005ddc:	ea4a 0a03 	orr.w	sl, sl, r3
 8005de0:	f01a 0f01 	tst.w	sl, #1
 8005de4:	d10e      	bne.n	8005e04 <__gethex+0x36c>
 8005de6:	f047 0710 	orr.w	r7, r7, #16
 8005dea:	e030      	b.n	8005e4e <__gethex+0x3b6>
 8005dec:	f04f 0a01 	mov.w	sl, #1
 8005df0:	e7d0      	b.n	8005d94 <__gethex+0x2fc>
 8005df2:	2701      	movs	r7, #1
 8005df4:	e7e2      	b.n	8005dbc <__gethex+0x324>
 8005df6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005df8:	f1c3 0301 	rsb	r3, r3, #1
 8005dfc:	9315      	str	r3, [sp, #84]	; 0x54
 8005dfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f0      	beq.n	8005de6 <__gethex+0x34e>
 8005e04:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005e08:	f105 0314 	add.w	r3, r5, #20
 8005e0c:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005e10:	eb03 010a 	add.w	r1, r3, sl
 8005e14:	2000      	movs	r0, #0
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e1c:	d01c      	beq.n	8005e58 <__gethex+0x3c0>
 8005e1e:	3201      	adds	r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	2f02      	cmp	r7, #2
 8005e24:	f105 0314 	add.w	r3, r5, #20
 8005e28:	d138      	bne.n	8005e9c <__gethex+0x404>
 8005e2a:	f8d8 2000 	ldr.w	r2, [r8]
 8005e2e:	3a01      	subs	r2, #1
 8005e30:	4296      	cmp	r6, r2
 8005e32:	d10a      	bne.n	8005e4a <__gethex+0x3b2>
 8005e34:	1171      	asrs	r1, r6, #5
 8005e36:	2201      	movs	r2, #1
 8005e38:	f006 061f 	and.w	r6, r6, #31
 8005e3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e40:	fa02 f606 	lsl.w	r6, r2, r6
 8005e44:	421e      	tst	r6, r3
 8005e46:	bf18      	it	ne
 8005e48:	4617      	movne	r7, r2
 8005e4a:	f047 0720 	orr.w	r7, r7, #32
 8005e4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e50:	601d      	str	r5, [r3, #0]
 8005e52:	9b06      	ldr	r3, [sp, #24]
 8005e54:	601c      	str	r4, [r3, #0]
 8005e56:	e6a7      	b.n	8005ba8 <__gethex+0x110>
 8005e58:	f843 0b04 	str.w	r0, [r3], #4
 8005e5c:	4299      	cmp	r1, r3
 8005e5e:	d8da      	bhi.n	8005e16 <__gethex+0x37e>
 8005e60:	68ab      	ldr	r3, [r5, #8]
 8005e62:	4599      	cmp	r9, r3
 8005e64:	db12      	blt.n	8005e8c <__gethex+0x3f4>
 8005e66:	6869      	ldr	r1, [r5, #4]
 8005e68:	9802      	ldr	r0, [sp, #8]
 8005e6a:	3101      	adds	r1, #1
 8005e6c:	f000 f911 	bl	8006092 <_Balloc>
 8005e70:	692a      	ldr	r2, [r5, #16]
 8005e72:	3202      	adds	r2, #2
 8005e74:	f105 010c 	add.w	r1, r5, #12
 8005e78:	4683      	mov	fp, r0
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	300c      	adds	r0, #12
 8005e7e:	f000 f8fd 	bl	800607c <memcpy>
 8005e82:	4629      	mov	r1, r5
 8005e84:	9802      	ldr	r0, [sp, #8]
 8005e86:	f000 f938 	bl	80060fa <_Bfree>
 8005e8a:	465d      	mov	r5, fp
 8005e8c:	692b      	ldr	r3, [r5, #16]
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005e94:	612a      	str	r2, [r5, #16]
 8005e96:	2201      	movs	r2, #1
 8005e98:	615a      	str	r2, [r3, #20]
 8005e9a:	e7c2      	b.n	8005e22 <__gethex+0x38a>
 8005e9c:	692a      	ldr	r2, [r5, #16]
 8005e9e:	4591      	cmp	r9, r2
 8005ea0:	da0b      	bge.n	8005eba <__gethex+0x422>
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f7ff fdad 	bl	8005a04 <rshift>
 8005eaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005eae:	3401      	adds	r4, #1
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	f73f aedc 	bgt.w	8005c6e <__gethex+0x1d6>
 8005eb6:	2701      	movs	r7, #1
 8005eb8:	e7c7      	b.n	8005e4a <__gethex+0x3b2>
 8005eba:	f016 061f 	ands.w	r6, r6, #31
 8005ebe:	d0fa      	beq.n	8005eb6 <__gethex+0x41e>
 8005ec0:	449a      	add	sl, r3
 8005ec2:	f1c6 0620 	rsb	r6, r6, #32
 8005ec6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005eca:	f000 f9a6 	bl	800621a <__hi0bits>
 8005ece:	42b0      	cmp	r0, r6
 8005ed0:	dbe7      	blt.n	8005ea2 <__gethex+0x40a>
 8005ed2:	e7f0      	b.n	8005eb6 <__gethex+0x41e>

08005ed4 <L_shift>:
 8005ed4:	f1c2 0208 	rsb	r2, r2, #8
 8005ed8:	0092      	lsls	r2, r2, #2
 8005eda:	b570      	push	{r4, r5, r6, lr}
 8005edc:	f1c2 0620 	rsb	r6, r2, #32
 8005ee0:	6843      	ldr	r3, [r0, #4]
 8005ee2:	6804      	ldr	r4, [r0, #0]
 8005ee4:	fa03 f506 	lsl.w	r5, r3, r6
 8005ee8:	432c      	orrs	r4, r5
 8005eea:	40d3      	lsrs	r3, r2
 8005eec:	6004      	str	r4, [r0, #0]
 8005eee:	f840 3f04 	str.w	r3, [r0, #4]!
 8005ef2:	4288      	cmp	r0, r1
 8005ef4:	d3f4      	bcc.n	8005ee0 <L_shift+0xc>
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}

08005ef8 <__match>:
 8005ef8:	b530      	push	{r4, r5, lr}
 8005efa:	6803      	ldr	r3, [r0, #0]
 8005efc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f00:	3301      	adds	r3, #1
 8005f02:	b914      	cbnz	r4, 8005f0a <__match+0x12>
 8005f04:	6003      	str	r3, [r0, #0]
 8005f06:	2001      	movs	r0, #1
 8005f08:	bd30      	pop	{r4, r5, pc}
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005f10:	2d19      	cmp	r5, #25
 8005f12:	bf98      	it	ls
 8005f14:	3220      	addls	r2, #32
 8005f16:	42a2      	cmp	r2, r4
 8005f18:	d0f0      	beq.n	8005efc <__match+0x4>
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	bd30      	pop	{r4, r5, pc}

08005f1e <__hexnan>:
 8005f1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f22:	680b      	ldr	r3, [r1, #0]
 8005f24:	6801      	ldr	r1, [r0, #0]
 8005f26:	115f      	asrs	r7, r3, #5
 8005f28:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005f2c:	f013 031f 	ands.w	r3, r3, #31
 8005f30:	b087      	sub	sp, #28
 8005f32:	bf18      	it	ne
 8005f34:	3704      	addne	r7, #4
 8005f36:	2500      	movs	r5, #0
 8005f38:	1f3e      	subs	r6, r7, #4
 8005f3a:	4682      	mov	sl, r0
 8005f3c:	4690      	mov	r8, r2
 8005f3e:	9302      	str	r3, [sp, #8]
 8005f40:	f847 5c04 	str.w	r5, [r7, #-4]
 8005f44:	46b1      	mov	r9, r6
 8005f46:	4634      	mov	r4, r6
 8005f48:	9501      	str	r5, [sp, #4]
 8005f4a:	46ab      	mov	fp, r5
 8005f4c:	784a      	ldrb	r2, [r1, #1]
 8005f4e:	1c4b      	adds	r3, r1, #1
 8005f50:	9303      	str	r3, [sp, #12]
 8005f52:	b342      	cbz	r2, 8005fa6 <__hexnan+0x88>
 8005f54:	4610      	mov	r0, r2
 8005f56:	9105      	str	r1, [sp, #20]
 8005f58:	9204      	str	r2, [sp, #16]
 8005f5a:	f7ff fd88 	bl	8005a6e <__hexdig_fun>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d143      	bne.n	8005fea <__hexnan+0xcc>
 8005f62:	9a04      	ldr	r2, [sp, #16]
 8005f64:	9905      	ldr	r1, [sp, #20]
 8005f66:	2a20      	cmp	r2, #32
 8005f68:	d818      	bhi.n	8005f9c <__hexnan+0x7e>
 8005f6a:	9b01      	ldr	r3, [sp, #4]
 8005f6c:	459b      	cmp	fp, r3
 8005f6e:	dd13      	ble.n	8005f98 <__hexnan+0x7a>
 8005f70:	454c      	cmp	r4, r9
 8005f72:	d206      	bcs.n	8005f82 <__hexnan+0x64>
 8005f74:	2d07      	cmp	r5, #7
 8005f76:	dc04      	bgt.n	8005f82 <__hexnan+0x64>
 8005f78:	462a      	mov	r2, r5
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f7ff ffa9 	bl	8005ed4 <L_shift>
 8005f82:	4544      	cmp	r4, r8
 8005f84:	d944      	bls.n	8006010 <__hexnan+0xf2>
 8005f86:	2300      	movs	r3, #0
 8005f88:	f1a4 0904 	sub.w	r9, r4, #4
 8005f8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f90:	f8cd b004 	str.w	fp, [sp, #4]
 8005f94:	464c      	mov	r4, r9
 8005f96:	461d      	mov	r5, r3
 8005f98:	9903      	ldr	r1, [sp, #12]
 8005f9a:	e7d7      	b.n	8005f4c <__hexnan+0x2e>
 8005f9c:	2a29      	cmp	r2, #41	; 0x29
 8005f9e:	d14a      	bne.n	8006036 <__hexnan+0x118>
 8005fa0:	3102      	adds	r1, #2
 8005fa2:	f8ca 1000 	str.w	r1, [sl]
 8005fa6:	f1bb 0f00 	cmp.w	fp, #0
 8005faa:	d044      	beq.n	8006036 <__hexnan+0x118>
 8005fac:	454c      	cmp	r4, r9
 8005fae:	d206      	bcs.n	8005fbe <__hexnan+0xa0>
 8005fb0:	2d07      	cmp	r5, #7
 8005fb2:	dc04      	bgt.n	8005fbe <__hexnan+0xa0>
 8005fb4:	462a      	mov	r2, r5
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7ff ff8b 	bl	8005ed4 <L_shift>
 8005fbe:	4544      	cmp	r4, r8
 8005fc0:	d928      	bls.n	8006014 <__hexnan+0xf6>
 8005fc2:	4643      	mov	r3, r8
 8005fc4:	f854 2b04 	ldr.w	r2, [r4], #4
 8005fc8:	f843 2b04 	str.w	r2, [r3], #4
 8005fcc:	42a6      	cmp	r6, r4
 8005fce:	d2f9      	bcs.n	8005fc4 <__hexnan+0xa6>
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f843 2b04 	str.w	r2, [r3], #4
 8005fd6:	429e      	cmp	r6, r3
 8005fd8:	d2fb      	bcs.n	8005fd2 <__hexnan+0xb4>
 8005fda:	6833      	ldr	r3, [r6, #0]
 8005fdc:	b91b      	cbnz	r3, 8005fe6 <__hexnan+0xc8>
 8005fde:	4546      	cmp	r6, r8
 8005fe0:	d127      	bne.n	8006032 <__hexnan+0x114>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	6033      	str	r3, [r6, #0]
 8005fe6:	2005      	movs	r0, #5
 8005fe8:	e026      	b.n	8006038 <__hexnan+0x11a>
 8005fea:	3501      	adds	r5, #1
 8005fec:	2d08      	cmp	r5, #8
 8005fee:	f10b 0b01 	add.w	fp, fp, #1
 8005ff2:	dd06      	ble.n	8006002 <__hexnan+0xe4>
 8005ff4:	4544      	cmp	r4, r8
 8005ff6:	d9cf      	bls.n	8005f98 <__hexnan+0x7a>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f844 3c04 	str.w	r3, [r4, #-4]
 8005ffe:	2501      	movs	r5, #1
 8006000:	3c04      	subs	r4, #4
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	f000 000f 	and.w	r0, r0, #15
 8006008:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800600c:	6020      	str	r0, [r4, #0]
 800600e:	e7c3      	b.n	8005f98 <__hexnan+0x7a>
 8006010:	2508      	movs	r5, #8
 8006012:	e7c1      	b.n	8005f98 <__hexnan+0x7a>
 8006014:	9b02      	ldr	r3, [sp, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0df      	beq.n	8005fda <__hexnan+0xbc>
 800601a:	f04f 32ff 	mov.w	r2, #4294967295
 800601e:	f1c3 0320 	rsb	r3, r3, #32
 8006022:	fa22 f303 	lsr.w	r3, r2, r3
 8006026:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800602a:	401a      	ands	r2, r3
 800602c:	f847 2c04 	str.w	r2, [r7, #-4]
 8006030:	e7d3      	b.n	8005fda <__hexnan+0xbc>
 8006032:	3e04      	subs	r6, #4
 8006034:	e7d1      	b.n	8005fda <__hexnan+0xbc>
 8006036:	2004      	movs	r0, #4
 8006038:	b007      	add	sp, #28
 800603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800603e <__locale_ctype_ptr_l>:
 800603e:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006042:	4770      	bx	lr

08006044 <__localeconv_l>:
 8006044:	30f0      	adds	r0, #240	; 0xf0
 8006046:	4770      	bx	lr

08006048 <malloc>:
 8006048:	4b02      	ldr	r3, [pc, #8]	; (8006054 <malloc+0xc>)
 800604a:	4601      	mov	r1, r0
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	f000 bc1b 	b.w	8006888 <_malloc_r>
 8006052:	bf00      	nop
 8006054:	200000c4 	.word	0x200000c4

08006058 <__ascii_mbtowc>:
 8006058:	b082      	sub	sp, #8
 800605a:	b901      	cbnz	r1, 800605e <__ascii_mbtowc+0x6>
 800605c:	a901      	add	r1, sp, #4
 800605e:	b142      	cbz	r2, 8006072 <__ascii_mbtowc+0x1a>
 8006060:	b14b      	cbz	r3, 8006076 <__ascii_mbtowc+0x1e>
 8006062:	7813      	ldrb	r3, [r2, #0]
 8006064:	600b      	str	r3, [r1, #0]
 8006066:	7812      	ldrb	r2, [r2, #0]
 8006068:	1c10      	adds	r0, r2, #0
 800606a:	bf18      	it	ne
 800606c:	2001      	movne	r0, #1
 800606e:	b002      	add	sp, #8
 8006070:	4770      	bx	lr
 8006072:	4610      	mov	r0, r2
 8006074:	e7fb      	b.n	800606e <__ascii_mbtowc+0x16>
 8006076:	f06f 0001 	mvn.w	r0, #1
 800607a:	e7f8      	b.n	800606e <__ascii_mbtowc+0x16>

0800607c <memcpy>:
 800607c:	b510      	push	{r4, lr}
 800607e:	1e43      	subs	r3, r0, #1
 8006080:	440a      	add	r2, r1
 8006082:	4291      	cmp	r1, r2
 8006084:	d100      	bne.n	8006088 <memcpy+0xc>
 8006086:	bd10      	pop	{r4, pc}
 8006088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800608c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006090:	e7f7      	b.n	8006082 <memcpy+0x6>

08006092 <_Balloc>:
 8006092:	b570      	push	{r4, r5, r6, lr}
 8006094:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006096:	4604      	mov	r4, r0
 8006098:	460e      	mov	r6, r1
 800609a:	b93d      	cbnz	r5, 80060ac <_Balloc+0x1a>
 800609c:	2010      	movs	r0, #16
 800609e:	f7ff ffd3 	bl	8006048 <malloc>
 80060a2:	6260      	str	r0, [r4, #36]	; 0x24
 80060a4:	6045      	str	r5, [r0, #4]
 80060a6:	6085      	str	r5, [r0, #8]
 80060a8:	6005      	str	r5, [r0, #0]
 80060aa:	60c5      	str	r5, [r0, #12]
 80060ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80060ae:	68eb      	ldr	r3, [r5, #12]
 80060b0:	b183      	cbz	r3, 80060d4 <_Balloc+0x42>
 80060b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80060ba:	b9b8      	cbnz	r0, 80060ec <_Balloc+0x5a>
 80060bc:	2101      	movs	r1, #1
 80060be:	fa01 f506 	lsl.w	r5, r1, r6
 80060c2:	1d6a      	adds	r2, r5, #5
 80060c4:	0092      	lsls	r2, r2, #2
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 fbd0 	bl	800686c <_calloc_r>
 80060cc:	b160      	cbz	r0, 80060e8 <_Balloc+0x56>
 80060ce:	6046      	str	r6, [r0, #4]
 80060d0:	6085      	str	r5, [r0, #8]
 80060d2:	e00e      	b.n	80060f2 <_Balloc+0x60>
 80060d4:	2221      	movs	r2, #33	; 0x21
 80060d6:	2104      	movs	r1, #4
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fbc7 	bl	800686c <_calloc_r>
 80060de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e0:	60e8      	str	r0, [r5, #12]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e4      	bne.n	80060b2 <_Balloc+0x20>
 80060e8:	2000      	movs	r0, #0
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
 80060ec:	6802      	ldr	r2, [r0, #0]
 80060ee:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80060f2:	2300      	movs	r3, #0
 80060f4:	6103      	str	r3, [r0, #16]
 80060f6:	60c3      	str	r3, [r0, #12]
 80060f8:	bd70      	pop	{r4, r5, r6, pc}

080060fa <_Bfree>:
 80060fa:	b570      	push	{r4, r5, r6, lr}
 80060fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80060fe:	4606      	mov	r6, r0
 8006100:	460d      	mov	r5, r1
 8006102:	b93c      	cbnz	r4, 8006114 <_Bfree+0x1a>
 8006104:	2010      	movs	r0, #16
 8006106:	f7ff ff9f 	bl	8006048 <malloc>
 800610a:	6270      	str	r0, [r6, #36]	; 0x24
 800610c:	6044      	str	r4, [r0, #4]
 800610e:	6084      	str	r4, [r0, #8]
 8006110:	6004      	str	r4, [r0, #0]
 8006112:	60c4      	str	r4, [r0, #12]
 8006114:	b13d      	cbz	r5, 8006126 <_Bfree+0x2c>
 8006116:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006118:	686a      	ldr	r2, [r5, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006120:	6029      	str	r1, [r5, #0]
 8006122:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006126:	bd70      	pop	{r4, r5, r6, pc}

08006128 <__multadd>:
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	690d      	ldr	r5, [r1, #16]
 800612e:	461f      	mov	r7, r3
 8006130:	4606      	mov	r6, r0
 8006132:	460c      	mov	r4, r1
 8006134:	f101 0e14 	add.w	lr, r1, #20
 8006138:	2300      	movs	r3, #0
 800613a:	f8de 0000 	ldr.w	r0, [lr]
 800613e:	b281      	uxth	r1, r0
 8006140:	fb02 7101 	mla	r1, r2, r1, r7
 8006144:	0c0f      	lsrs	r7, r1, #16
 8006146:	0c00      	lsrs	r0, r0, #16
 8006148:	fb02 7000 	mla	r0, r2, r0, r7
 800614c:	b289      	uxth	r1, r1
 800614e:	3301      	adds	r3, #1
 8006150:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006154:	429d      	cmp	r5, r3
 8006156:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800615a:	f84e 1b04 	str.w	r1, [lr], #4
 800615e:	dcec      	bgt.n	800613a <__multadd+0x12>
 8006160:	b1d7      	cbz	r7, 8006198 <__multadd+0x70>
 8006162:	68a3      	ldr	r3, [r4, #8]
 8006164:	429d      	cmp	r5, r3
 8006166:	db12      	blt.n	800618e <__multadd+0x66>
 8006168:	6861      	ldr	r1, [r4, #4]
 800616a:	4630      	mov	r0, r6
 800616c:	3101      	adds	r1, #1
 800616e:	f7ff ff90 	bl	8006092 <_Balloc>
 8006172:	6922      	ldr	r2, [r4, #16]
 8006174:	3202      	adds	r2, #2
 8006176:	f104 010c 	add.w	r1, r4, #12
 800617a:	4680      	mov	r8, r0
 800617c:	0092      	lsls	r2, r2, #2
 800617e:	300c      	adds	r0, #12
 8006180:	f7ff ff7c 	bl	800607c <memcpy>
 8006184:	4621      	mov	r1, r4
 8006186:	4630      	mov	r0, r6
 8006188:	f7ff ffb7 	bl	80060fa <_Bfree>
 800618c:	4644      	mov	r4, r8
 800618e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006192:	3501      	adds	r5, #1
 8006194:	615f      	str	r7, [r3, #20]
 8006196:	6125      	str	r5, [r4, #16]
 8006198:	4620      	mov	r0, r4
 800619a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800619e <__s2b>:
 800619e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a2:	460c      	mov	r4, r1
 80061a4:	4615      	mov	r5, r2
 80061a6:	461f      	mov	r7, r3
 80061a8:	2209      	movs	r2, #9
 80061aa:	3308      	adds	r3, #8
 80061ac:	4606      	mov	r6, r0
 80061ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80061b2:	2100      	movs	r1, #0
 80061b4:	2201      	movs	r2, #1
 80061b6:	429a      	cmp	r2, r3
 80061b8:	db20      	blt.n	80061fc <__s2b+0x5e>
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ff69 	bl	8006092 <_Balloc>
 80061c0:	9b08      	ldr	r3, [sp, #32]
 80061c2:	6143      	str	r3, [r0, #20]
 80061c4:	2d09      	cmp	r5, #9
 80061c6:	f04f 0301 	mov.w	r3, #1
 80061ca:	6103      	str	r3, [r0, #16]
 80061cc:	dd19      	ble.n	8006202 <__s2b+0x64>
 80061ce:	f104 0909 	add.w	r9, r4, #9
 80061d2:	46c8      	mov	r8, r9
 80061d4:	442c      	add	r4, r5
 80061d6:	f818 3b01 	ldrb.w	r3, [r8], #1
 80061da:	4601      	mov	r1, r0
 80061dc:	3b30      	subs	r3, #48	; 0x30
 80061de:	220a      	movs	r2, #10
 80061e0:	4630      	mov	r0, r6
 80061e2:	f7ff ffa1 	bl	8006128 <__multadd>
 80061e6:	45a0      	cmp	r8, r4
 80061e8:	d1f5      	bne.n	80061d6 <__s2b+0x38>
 80061ea:	f1a5 0408 	sub.w	r4, r5, #8
 80061ee:	444c      	add	r4, r9
 80061f0:	1b2d      	subs	r5, r5, r4
 80061f2:	1963      	adds	r3, r4, r5
 80061f4:	42bb      	cmp	r3, r7
 80061f6:	db07      	blt.n	8006208 <__s2b+0x6a>
 80061f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fc:	0052      	lsls	r2, r2, #1
 80061fe:	3101      	adds	r1, #1
 8006200:	e7d9      	b.n	80061b6 <__s2b+0x18>
 8006202:	340a      	adds	r4, #10
 8006204:	2509      	movs	r5, #9
 8006206:	e7f3      	b.n	80061f0 <__s2b+0x52>
 8006208:	f814 3b01 	ldrb.w	r3, [r4], #1
 800620c:	4601      	mov	r1, r0
 800620e:	3b30      	subs	r3, #48	; 0x30
 8006210:	220a      	movs	r2, #10
 8006212:	4630      	mov	r0, r6
 8006214:	f7ff ff88 	bl	8006128 <__multadd>
 8006218:	e7eb      	b.n	80061f2 <__s2b+0x54>

0800621a <__hi0bits>:
 800621a:	0c02      	lsrs	r2, r0, #16
 800621c:	0412      	lsls	r2, r2, #16
 800621e:	4603      	mov	r3, r0
 8006220:	b9b2      	cbnz	r2, 8006250 <__hi0bits+0x36>
 8006222:	0403      	lsls	r3, r0, #16
 8006224:	2010      	movs	r0, #16
 8006226:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800622a:	bf04      	itt	eq
 800622c:	021b      	lsleq	r3, r3, #8
 800622e:	3008      	addeq	r0, #8
 8006230:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006234:	bf04      	itt	eq
 8006236:	011b      	lsleq	r3, r3, #4
 8006238:	3004      	addeq	r0, #4
 800623a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800623e:	bf04      	itt	eq
 8006240:	009b      	lsleq	r3, r3, #2
 8006242:	3002      	addeq	r0, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	db06      	blt.n	8006256 <__hi0bits+0x3c>
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	d503      	bpl.n	8006254 <__hi0bits+0x3a>
 800624c:	3001      	adds	r0, #1
 800624e:	4770      	bx	lr
 8006250:	2000      	movs	r0, #0
 8006252:	e7e8      	b.n	8006226 <__hi0bits+0xc>
 8006254:	2020      	movs	r0, #32
 8006256:	4770      	bx	lr

08006258 <__lo0bits>:
 8006258:	6803      	ldr	r3, [r0, #0]
 800625a:	f013 0207 	ands.w	r2, r3, #7
 800625e:	4601      	mov	r1, r0
 8006260:	d00b      	beq.n	800627a <__lo0bits+0x22>
 8006262:	07da      	lsls	r2, r3, #31
 8006264:	d423      	bmi.n	80062ae <__lo0bits+0x56>
 8006266:	0798      	lsls	r0, r3, #30
 8006268:	bf49      	itett	mi
 800626a:	085b      	lsrmi	r3, r3, #1
 800626c:	089b      	lsrpl	r3, r3, #2
 800626e:	2001      	movmi	r0, #1
 8006270:	600b      	strmi	r3, [r1, #0]
 8006272:	bf5c      	itt	pl
 8006274:	600b      	strpl	r3, [r1, #0]
 8006276:	2002      	movpl	r0, #2
 8006278:	4770      	bx	lr
 800627a:	b298      	uxth	r0, r3
 800627c:	b9a8      	cbnz	r0, 80062aa <__lo0bits+0x52>
 800627e:	0c1b      	lsrs	r3, r3, #16
 8006280:	2010      	movs	r0, #16
 8006282:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006286:	bf04      	itt	eq
 8006288:	0a1b      	lsreq	r3, r3, #8
 800628a:	3008      	addeq	r0, #8
 800628c:	071a      	lsls	r2, r3, #28
 800628e:	bf04      	itt	eq
 8006290:	091b      	lsreq	r3, r3, #4
 8006292:	3004      	addeq	r0, #4
 8006294:	079a      	lsls	r2, r3, #30
 8006296:	bf04      	itt	eq
 8006298:	089b      	lsreq	r3, r3, #2
 800629a:	3002      	addeq	r0, #2
 800629c:	07da      	lsls	r2, r3, #31
 800629e:	d402      	bmi.n	80062a6 <__lo0bits+0x4e>
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	d006      	beq.n	80062b2 <__lo0bits+0x5a>
 80062a4:	3001      	adds	r0, #1
 80062a6:	600b      	str	r3, [r1, #0]
 80062a8:	4770      	bx	lr
 80062aa:	4610      	mov	r0, r2
 80062ac:	e7e9      	b.n	8006282 <__lo0bits+0x2a>
 80062ae:	2000      	movs	r0, #0
 80062b0:	4770      	bx	lr
 80062b2:	2020      	movs	r0, #32
 80062b4:	4770      	bx	lr

080062b6 <__i2b>:
 80062b6:	b510      	push	{r4, lr}
 80062b8:	460c      	mov	r4, r1
 80062ba:	2101      	movs	r1, #1
 80062bc:	f7ff fee9 	bl	8006092 <_Balloc>
 80062c0:	2201      	movs	r2, #1
 80062c2:	6144      	str	r4, [r0, #20]
 80062c4:	6102      	str	r2, [r0, #16]
 80062c6:	bd10      	pop	{r4, pc}

080062c8 <__multiply>:
 80062c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	4614      	mov	r4, r2
 80062ce:	690a      	ldr	r2, [r1, #16]
 80062d0:	6923      	ldr	r3, [r4, #16]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	bfb8      	it	lt
 80062d6:	460b      	movlt	r3, r1
 80062d8:	4689      	mov	r9, r1
 80062da:	bfbc      	itt	lt
 80062dc:	46a1      	movlt	r9, r4
 80062de:	461c      	movlt	r4, r3
 80062e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80062e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80062e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80062ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80062f0:	eb07 060a 	add.w	r6, r7, sl
 80062f4:	429e      	cmp	r6, r3
 80062f6:	bfc8      	it	gt
 80062f8:	3101      	addgt	r1, #1
 80062fa:	f7ff feca 	bl	8006092 <_Balloc>
 80062fe:	f100 0514 	add.w	r5, r0, #20
 8006302:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006306:	462b      	mov	r3, r5
 8006308:	2200      	movs	r2, #0
 800630a:	4543      	cmp	r3, r8
 800630c:	d316      	bcc.n	800633c <__multiply+0x74>
 800630e:	f104 0214 	add.w	r2, r4, #20
 8006312:	f109 0114 	add.w	r1, r9, #20
 8006316:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800631a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	9c01      	ldr	r4, [sp, #4]
 8006322:	4294      	cmp	r4, r2
 8006324:	4613      	mov	r3, r2
 8006326:	d80c      	bhi.n	8006342 <__multiply+0x7a>
 8006328:	2e00      	cmp	r6, #0
 800632a:	dd03      	ble.n	8006334 <__multiply+0x6c>
 800632c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006330:	2b00      	cmp	r3, #0
 8006332:	d054      	beq.n	80063de <__multiply+0x116>
 8006334:	6106      	str	r6, [r0, #16]
 8006336:	b003      	add	sp, #12
 8006338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633c:	f843 2b04 	str.w	r2, [r3], #4
 8006340:	e7e3      	b.n	800630a <__multiply+0x42>
 8006342:	f8b3 a000 	ldrh.w	sl, [r3]
 8006346:	3204      	adds	r2, #4
 8006348:	f1ba 0f00 	cmp.w	sl, #0
 800634c:	d020      	beq.n	8006390 <__multiply+0xc8>
 800634e:	46ae      	mov	lr, r5
 8006350:	4689      	mov	r9, r1
 8006352:	f04f 0c00 	mov.w	ip, #0
 8006356:	f859 4b04 	ldr.w	r4, [r9], #4
 800635a:	f8be b000 	ldrh.w	fp, [lr]
 800635e:	b2a3      	uxth	r3, r4
 8006360:	fb0a b303 	mla	r3, sl, r3, fp
 8006364:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006368:	f8de 4000 	ldr.w	r4, [lr]
 800636c:	4463      	add	r3, ip
 800636e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006372:	fb0a c40b 	mla	r4, sl, fp, ip
 8006376:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800637a:	b29b      	uxth	r3, r3
 800637c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006380:	454f      	cmp	r7, r9
 8006382:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006386:	f84e 3b04 	str.w	r3, [lr], #4
 800638a:	d8e4      	bhi.n	8006356 <__multiply+0x8e>
 800638c:	f8ce c000 	str.w	ip, [lr]
 8006390:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006394:	f1b9 0f00 	cmp.w	r9, #0
 8006398:	d01f      	beq.n	80063da <__multiply+0x112>
 800639a:	682b      	ldr	r3, [r5, #0]
 800639c:	46ae      	mov	lr, r5
 800639e:	468c      	mov	ip, r1
 80063a0:	f04f 0a00 	mov.w	sl, #0
 80063a4:	f8bc 4000 	ldrh.w	r4, [ip]
 80063a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80063ac:	fb09 b404 	mla	r4, r9, r4, fp
 80063b0:	44a2      	add	sl, r4
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80063b8:	f84e 3b04 	str.w	r3, [lr], #4
 80063bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063c0:	f8be 4000 	ldrh.w	r4, [lr]
 80063c4:	0c1b      	lsrs	r3, r3, #16
 80063c6:	fb09 4303 	mla	r3, r9, r3, r4
 80063ca:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80063ce:	4567      	cmp	r7, ip
 80063d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063d4:	d8e6      	bhi.n	80063a4 <__multiply+0xdc>
 80063d6:	f8ce 3000 	str.w	r3, [lr]
 80063da:	3504      	adds	r5, #4
 80063dc:	e7a0      	b.n	8006320 <__multiply+0x58>
 80063de:	3e01      	subs	r6, #1
 80063e0:	e7a2      	b.n	8006328 <__multiply+0x60>
	...

080063e4 <__pow5mult>:
 80063e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e8:	4615      	mov	r5, r2
 80063ea:	f012 0203 	ands.w	r2, r2, #3
 80063ee:	4606      	mov	r6, r0
 80063f0:	460f      	mov	r7, r1
 80063f2:	d007      	beq.n	8006404 <__pow5mult+0x20>
 80063f4:	3a01      	subs	r2, #1
 80063f6:	4c21      	ldr	r4, [pc, #132]	; (800647c <__pow5mult+0x98>)
 80063f8:	2300      	movs	r3, #0
 80063fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063fe:	f7ff fe93 	bl	8006128 <__multadd>
 8006402:	4607      	mov	r7, r0
 8006404:	10ad      	asrs	r5, r5, #2
 8006406:	d035      	beq.n	8006474 <__pow5mult+0x90>
 8006408:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800640a:	b93c      	cbnz	r4, 800641c <__pow5mult+0x38>
 800640c:	2010      	movs	r0, #16
 800640e:	f7ff fe1b 	bl	8006048 <malloc>
 8006412:	6270      	str	r0, [r6, #36]	; 0x24
 8006414:	6044      	str	r4, [r0, #4]
 8006416:	6084      	str	r4, [r0, #8]
 8006418:	6004      	str	r4, [r0, #0]
 800641a:	60c4      	str	r4, [r0, #12]
 800641c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006424:	b94c      	cbnz	r4, 800643a <__pow5mult+0x56>
 8006426:	f240 2171 	movw	r1, #625	; 0x271
 800642a:	4630      	mov	r0, r6
 800642c:	f7ff ff43 	bl	80062b6 <__i2b>
 8006430:	2300      	movs	r3, #0
 8006432:	f8c8 0008 	str.w	r0, [r8, #8]
 8006436:	4604      	mov	r4, r0
 8006438:	6003      	str	r3, [r0, #0]
 800643a:	f04f 0800 	mov.w	r8, #0
 800643e:	07eb      	lsls	r3, r5, #31
 8006440:	d50a      	bpl.n	8006458 <__pow5mult+0x74>
 8006442:	4639      	mov	r1, r7
 8006444:	4622      	mov	r2, r4
 8006446:	4630      	mov	r0, r6
 8006448:	f7ff ff3e 	bl	80062c8 <__multiply>
 800644c:	4639      	mov	r1, r7
 800644e:	4681      	mov	r9, r0
 8006450:	4630      	mov	r0, r6
 8006452:	f7ff fe52 	bl	80060fa <_Bfree>
 8006456:	464f      	mov	r7, r9
 8006458:	106d      	asrs	r5, r5, #1
 800645a:	d00b      	beq.n	8006474 <__pow5mult+0x90>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	b938      	cbnz	r0, 8006470 <__pow5mult+0x8c>
 8006460:	4622      	mov	r2, r4
 8006462:	4621      	mov	r1, r4
 8006464:	4630      	mov	r0, r6
 8006466:	f7ff ff2f 	bl	80062c8 <__multiply>
 800646a:	6020      	str	r0, [r4, #0]
 800646c:	f8c0 8000 	str.w	r8, [r0]
 8006470:	4604      	mov	r4, r0
 8006472:	e7e4      	b.n	800643e <__pow5mult+0x5a>
 8006474:	4638      	mov	r0, r7
 8006476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647a:	bf00      	nop
 800647c:	08006d18 	.word	0x08006d18

08006480 <__lshift>:
 8006480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006484:	460c      	mov	r4, r1
 8006486:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800648a:	6923      	ldr	r3, [r4, #16]
 800648c:	6849      	ldr	r1, [r1, #4]
 800648e:	eb0a 0903 	add.w	r9, sl, r3
 8006492:	68a3      	ldr	r3, [r4, #8]
 8006494:	4607      	mov	r7, r0
 8006496:	4616      	mov	r6, r2
 8006498:	f109 0501 	add.w	r5, r9, #1
 800649c:	42ab      	cmp	r3, r5
 800649e:	db31      	blt.n	8006504 <__lshift+0x84>
 80064a0:	4638      	mov	r0, r7
 80064a2:	f7ff fdf6 	bl	8006092 <_Balloc>
 80064a6:	2200      	movs	r2, #0
 80064a8:	4680      	mov	r8, r0
 80064aa:	f100 0314 	add.w	r3, r0, #20
 80064ae:	4611      	mov	r1, r2
 80064b0:	4552      	cmp	r2, sl
 80064b2:	db2a      	blt.n	800650a <__lshift+0x8a>
 80064b4:	6920      	ldr	r0, [r4, #16]
 80064b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064ba:	f104 0114 	add.w	r1, r4, #20
 80064be:	f016 021f 	ands.w	r2, r6, #31
 80064c2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80064c6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80064ca:	d022      	beq.n	8006512 <__lshift+0x92>
 80064cc:	f1c2 0c20 	rsb	ip, r2, #32
 80064d0:	2000      	movs	r0, #0
 80064d2:	680e      	ldr	r6, [r1, #0]
 80064d4:	4096      	lsls	r6, r2
 80064d6:	4330      	orrs	r0, r6
 80064d8:	f843 0b04 	str.w	r0, [r3], #4
 80064dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80064e0:	458e      	cmp	lr, r1
 80064e2:	fa20 f00c 	lsr.w	r0, r0, ip
 80064e6:	d8f4      	bhi.n	80064d2 <__lshift+0x52>
 80064e8:	6018      	str	r0, [r3, #0]
 80064ea:	b108      	cbz	r0, 80064f0 <__lshift+0x70>
 80064ec:	f109 0502 	add.w	r5, r9, #2
 80064f0:	3d01      	subs	r5, #1
 80064f2:	4638      	mov	r0, r7
 80064f4:	f8c8 5010 	str.w	r5, [r8, #16]
 80064f8:	4621      	mov	r1, r4
 80064fa:	f7ff fdfe 	bl	80060fa <_Bfree>
 80064fe:	4640      	mov	r0, r8
 8006500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006504:	3101      	adds	r1, #1
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	e7c8      	b.n	800649c <__lshift+0x1c>
 800650a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800650e:	3201      	adds	r2, #1
 8006510:	e7ce      	b.n	80064b0 <__lshift+0x30>
 8006512:	3b04      	subs	r3, #4
 8006514:	f851 2b04 	ldr.w	r2, [r1], #4
 8006518:	f843 2f04 	str.w	r2, [r3, #4]!
 800651c:	458e      	cmp	lr, r1
 800651e:	d8f9      	bhi.n	8006514 <__lshift+0x94>
 8006520:	e7e6      	b.n	80064f0 <__lshift+0x70>

08006522 <__mcmp>:
 8006522:	6903      	ldr	r3, [r0, #16]
 8006524:	690a      	ldr	r2, [r1, #16]
 8006526:	1a9b      	subs	r3, r3, r2
 8006528:	b530      	push	{r4, r5, lr}
 800652a:	d10c      	bne.n	8006546 <__mcmp+0x24>
 800652c:	0092      	lsls	r2, r2, #2
 800652e:	3014      	adds	r0, #20
 8006530:	3114      	adds	r1, #20
 8006532:	1884      	adds	r4, r0, r2
 8006534:	4411      	add	r1, r2
 8006536:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800653a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800653e:	4295      	cmp	r5, r2
 8006540:	d003      	beq.n	800654a <__mcmp+0x28>
 8006542:	d305      	bcc.n	8006550 <__mcmp+0x2e>
 8006544:	2301      	movs	r3, #1
 8006546:	4618      	mov	r0, r3
 8006548:	bd30      	pop	{r4, r5, pc}
 800654a:	42a0      	cmp	r0, r4
 800654c:	d3f3      	bcc.n	8006536 <__mcmp+0x14>
 800654e:	e7fa      	b.n	8006546 <__mcmp+0x24>
 8006550:	f04f 33ff 	mov.w	r3, #4294967295
 8006554:	e7f7      	b.n	8006546 <__mcmp+0x24>

08006556 <__mdiff>:
 8006556:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800655a:	460d      	mov	r5, r1
 800655c:	4607      	mov	r7, r0
 800655e:	4611      	mov	r1, r2
 8006560:	4628      	mov	r0, r5
 8006562:	4614      	mov	r4, r2
 8006564:	f7ff ffdd 	bl	8006522 <__mcmp>
 8006568:	1e06      	subs	r6, r0, #0
 800656a:	d108      	bne.n	800657e <__mdiff+0x28>
 800656c:	4631      	mov	r1, r6
 800656e:	4638      	mov	r0, r7
 8006570:	f7ff fd8f 	bl	8006092 <_Balloc>
 8006574:	2301      	movs	r3, #1
 8006576:	6103      	str	r3, [r0, #16]
 8006578:	6146      	str	r6, [r0, #20]
 800657a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657e:	bfa4      	itt	ge
 8006580:	4623      	movge	r3, r4
 8006582:	462c      	movge	r4, r5
 8006584:	4638      	mov	r0, r7
 8006586:	6861      	ldr	r1, [r4, #4]
 8006588:	bfa6      	itte	ge
 800658a:	461d      	movge	r5, r3
 800658c:	2600      	movge	r6, #0
 800658e:	2601      	movlt	r6, #1
 8006590:	f7ff fd7f 	bl	8006092 <_Balloc>
 8006594:	692b      	ldr	r3, [r5, #16]
 8006596:	60c6      	str	r6, [r0, #12]
 8006598:	6926      	ldr	r6, [r4, #16]
 800659a:	f105 0914 	add.w	r9, r5, #20
 800659e:	f104 0214 	add.w	r2, r4, #20
 80065a2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80065a6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80065aa:	f100 0514 	add.w	r5, r0, #20
 80065ae:	f04f 0c00 	mov.w	ip, #0
 80065b2:	f852 ab04 	ldr.w	sl, [r2], #4
 80065b6:	f859 4b04 	ldr.w	r4, [r9], #4
 80065ba:	fa1c f18a 	uxtah	r1, ip, sl
 80065be:	b2a3      	uxth	r3, r4
 80065c0:	1ac9      	subs	r1, r1, r3
 80065c2:	0c23      	lsrs	r3, r4, #16
 80065c4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80065c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80065cc:	b289      	uxth	r1, r1
 80065ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80065d2:	45c8      	cmp	r8, r9
 80065d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80065d8:	4696      	mov	lr, r2
 80065da:	f845 3b04 	str.w	r3, [r5], #4
 80065de:	d8e8      	bhi.n	80065b2 <__mdiff+0x5c>
 80065e0:	45be      	cmp	lr, r7
 80065e2:	d305      	bcc.n	80065f0 <__mdiff+0x9a>
 80065e4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80065e8:	b18b      	cbz	r3, 800660e <__mdiff+0xb8>
 80065ea:	6106      	str	r6, [r0, #16]
 80065ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f0:	f85e 1b04 	ldr.w	r1, [lr], #4
 80065f4:	fa1c f381 	uxtah	r3, ip, r1
 80065f8:	141a      	asrs	r2, r3, #16
 80065fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065fe:	b29b      	uxth	r3, r3
 8006600:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006604:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006608:	f845 3b04 	str.w	r3, [r5], #4
 800660c:	e7e8      	b.n	80065e0 <__mdiff+0x8a>
 800660e:	3e01      	subs	r6, #1
 8006610:	e7e8      	b.n	80065e4 <__mdiff+0x8e>
	...

08006614 <__ulp>:
 8006614:	4b12      	ldr	r3, [pc, #72]	; (8006660 <__ulp+0x4c>)
 8006616:	ee10 2a90 	vmov	r2, s1
 800661a:	401a      	ands	r2, r3
 800661c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8006620:	2b00      	cmp	r3, #0
 8006622:	dd04      	ble.n	800662e <__ulp+0x1a>
 8006624:	2000      	movs	r0, #0
 8006626:	4619      	mov	r1, r3
 8006628:	ec41 0b10 	vmov	d0, r0, r1
 800662c:	4770      	bx	lr
 800662e:	425b      	negs	r3, r3
 8006630:	151b      	asrs	r3, r3, #20
 8006632:	2b13      	cmp	r3, #19
 8006634:	f04f 0000 	mov.w	r0, #0
 8006638:	f04f 0100 	mov.w	r1, #0
 800663c:	dc04      	bgt.n	8006648 <__ulp+0x34>
 800663e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006642:	fa42 f103 	asr.w	r1, r2, r3
 8006646:	e7ef      	b.n	8006628 <__ulp+0x14>
 8006648:	3b14      	subs	r3, #20
 800664a:	2b1e      	cmp	r3, #30
 800664c:	f04f 0201 	mov.w	r2, #1
 8006650:	bfda      	itte	le
 8006652:	f1c3 031f 	rsble	r3, r3, #31
 8006656:	fa02 f303 	lslle.w	r3, r2, r3
 800665a:	4613      	movgt	r3, r2
 800665c:	4618      	mov	r0, r3
 800665e:	e7e3      	b.n	8006628 <__ulp+0x14>
 8006660:	7ff00000 	.word	0x7ff00000

08006664 <__b2d>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	6905      	ldr	r5, [r0, #16]
 8006668:	f100 0714 	add.w	r7, r0, #20
 800666c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006670:	1f2e      	subs	r6, r5, #4
 8006672:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006676:	4620      	mov	r0, r4
 8006678:	f7ff fdcf 	bl	800621a <__hi0bits>
 800667c:	f1c0 0320 	rsb	r3, r0, #32
 8006680:	280a      	cmp	r0, #10
 8006682:	600b      	str	r3, [r1, #0]
 8006684:	f8df e074 	ldr.w	lr, [pc, #116]	; 80066fc <__b2d+0x98>
 8006688:	dc14      	bgt.n	80066b4 <__b2d+0x50>
 800668a:	f1c0 0c0b 	rsb	ip, r0, #11
 800668e:	fa24 f10c 	lsr.w	r1, r4, ip
 8006692:	42b7      	cmp	r7, r6
 8006694:	ea41 030e 	orr.w	r3, r1, lr
 8006698:	bf34      	ite	cc
 800669a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800669e:	2100      	movcs	r1, #0
 80066a0:	3015      	adds	r0, #21
 80066a2:	fa04 f000 	lsl.w	r0, r4, r0
 80066a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80066aa:	ea40 0201 	orr.w	r2, r0, r1
 80066ae:	ec43 2b10 	vmov	d0, r2, r3
 80066b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b4:	42b7      	cmp	r7, r6
 80066b6:	bf3a      	itte	cc
 80066b8:	f1a5 0608 	subcc.w	r6, r5, #8
 80066bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80066c0:	2100      	movcs	r1, #0
 80066c2:	380b      	subs	r0, #11
 80066c4:	d015      	beq.n	80066f2 <__b2d+0x8e>
 80066c6:	4084      	lsls	r4, r0
 80066c8:	f1c0 0520 	rsb	r5, r0, #32
 80066cc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80066d0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80066d4:	42be      	cmp	r6, r7
 80066d6:	fa21 fe05 	lsr.w	lr, r1, r5
 80066da:	ea44 030e 	orr.w	r3, r4, lr
 80066de:	bf8c      	ite	hi
 80066e0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80066e4:	2400      	movls	r4, #0
 80066e6:	fa01 f000 	lsl.w	r0, r1, r0
 80066ea:	40ec      	lsrs	r4, r5
 80066ec:	ea40 0204 	orr.w	r2, r0, r4
 80066f0:	e7dd      	b.n	80066ae <__b2d+0x4a>
 80066f2:	ea44 030e 	orr.w	r3, r4, lr
 80066f6:	460a      	mov	r2, r1
 80066f8:	e7d9      	b.n	80066ae <__b2d+0x4a>
 80066fa:	bf00      	nop
 80066fc:	3ff00000 	.word	0x3ff00000

08006700 <__d2b>:
 8006700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006704:	460e      	mov	r6, r1
 8006706:	2101      	movs	r1, #1
 8006708:	ec59 8b10 	vmov	r8, r9, d0
 800670c:	4615      	mov	r5, r2
 800670e:	f7ff fcc0 	bl	8006092 <_Balloc>
 8006712:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006716:	4607      	mov	r7, r0
 8006718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800671c:	bb34      	cbnz	r4, 800676c <__d2b+0x6c>
 800671e:	9301      	str	r3, [sp, #4]
 8006720:	f1b8 0f00 	cmp.w	r8, #0
 8006724:	d027      	beq.n	8006776 <__d2b+0x76>
 8006726:	a802      	add	r0, sp, #8
 8006728:	f840 8d08 	str.w	r8, [r0, #-8]!
 800672c:	f7ff fd94 	bl	8006258 <__lo0bits>
 8006730:	9900      	ldr	r1, [sp, #0]
 8006732:	b1f0      	cbz	r0, 8006772 <__d2b+0x72>
 8006734:	9a01      	ldr	r2, [sp, #4]
 8006736:	f1c0 0320 	rsb	r3, r0, #32
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	430b      	orrs	r3, r1
 8006740:	40c2      	lsrs	r2, r0
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	9201      	str	r2, [sp, #4]
 8006746:	9b01      	ldr	r3, [sp, #4]
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	2b00      	cmp	r3, #0
 800674c:	bf14      	ite	ne
 800674e:	2102      	movne	r1, #2
 8006750:	2101      	moveq	r1, #1
 8006752:	6139      	str	r1, [r7, #16]
 8006754:	b1c4      	cbz	r4, 8006788 <__d2b+0x88>
 8006756:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800675a:	4404      	add	r4, r0
 800675c:	6034      	str	r4, [r6, #0]
 800675e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006762:	6028      	str	r0, [r5, #0]
 8006764:	4638      	mov	r0, r7
 8006766:	b003      	add	sp, #12
 8006768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800676c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006770:	e7d5      	b.n	800671e <__d2b+0x1e>
 8006772:	6179      	str	r1, [r7, #20]
 8006774:	e7e7      	b.n	8006746 <__d2b+0x46>
 8006776:	a801      	add	r0, sp, #4
 8006778:	f7ff fd6e 	bl	8006258 <__lo0bits>
 800677c:	9b01      	ldr	r3, [sp, #4]
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	2101      	movs	r1, #1
 8006782:	6139      	str	r1, [r7, #16]
 8006784:	3020      	adds	r0, #32
 8006786:	e7e5      	b.n	8006754 <__d2b+0x54>
 8006788:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800678c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006790:	6030      	str	r0, [r6, #0]
 8006792:	6918      	ldr	r0, [r3, #16]
 8006794:	f7ff fd41 	bl	800621a <__hi0bits>
 8006798:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800679c:	e7e1      	b.n	8006762 <__d2b+0x62>

0800679e <__ratio>:
 800679e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067a2:	4688      	mov	r8, r1
 80067a4:	4669      	mov	r1, sp
 80067a6:	4681      	mov	r9, r0
 80067a8:	f7ff ff5c 	bl	8006664 <__b2d>
 80067ac:	a901      	add	r1, sp, #4
 80067ae:	4640      	mov	r0, r8
 80067b0:	ec55 4b10 	vmov	r4, r5, d0
 80067b4:	f7ff ff56 	bl	8006664 <__b2d>
 80067b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80067bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80067c0:	1a9a      	subs	r2, r3, r2
 80067c2:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80067c6:	1acb      	subs	r3, r1, r3
 80067c8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80067cc:	ec57 6b10 	vmov	r6, r7, d0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	bfd6      	itet	le
 80067d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80067d8:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80067dc:	eb07 5703 	addle.w	r7, r7, r3, lsl #20
 80067e0:	4632      	mov	r2, r6
 80067e2:	463b      	mov	r3, r7
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7f9 ffea 	bl	80007c0 <__aeabi_ddiv>
 80067ec:	ec41 0b10 	vmov	d0, r0, r1
 80067f0:	b003      	add	sp, #12
 80067f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080067f6 <__copybits>:
 80067f6:	3901      	subs	r1, #1
 80067f8:	b510      	push	{r4, lr}
 80067fa:	1149      	asrs	r1, r1, #5
 80067fc:	6914      	ldr	r4, [r2, #16]
 80067fe:	3101      	adds	r1, #1
 8006800:	f102 0314 	add.w	r3, r2, #20
 8006804:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006808:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800680c:	42a3      	cmp	r3, r4
 800680e:	4602      	mov	r2, r0
 8006810:	d303      	bcc.n	800681a <__copybits+0x24>
 8006812:	2300      	movs	r3, #0
 8006814:	428a      	cmp	r2, r1
 8006816:	d305      	bcc.n	8006824 <__copybits+0x2e>
 8006818:	bd10      	pop	{r4, pc}
 800681a:	f853 2b04 	ldr.w	r2, [r3], #4
 800681e:	f840 2b04 	str.w	r2, [r0], #4
 8006822:	e7f3      	b.n	800680c <__copybits+0x16>
 8006824:	f842 3b04 	str.w	r3, [r2], #4
 8006828:	e7f4      	b.n	8006814 <__copybits+0x1e>

0800682a <__any_on>:
 800682a:	f100 0214 	add.w	r2, r0, #20
 800682e:	6900      	ldr	r0, [r0, #16]
 8006830:	114b      	asrs	r3, r1, #5
 8006832:	4298      	cmp	r0, r3
 8006834:	b510      	push	{r4, lr}
 8006836:	db11      	blt.n	800685c <__any_on+0x32>
 8006838:	dd0a      	ble.n	8006850 <__any_on+0x26>
 800683a:	f011 011f 	ands.w	r1, r1, #31
 800683e:	d007      	beq.n	8006850 <__any_on+0x26>
 8006840:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006844:	fa24 f001 	lsr.w	r0, r4, r1
 8006848:	fa00 f101 	lsl.w	r1, r0, r1
 800684c:	428c      	cmp	r4, r1
 800684e:	d10b      	bne.n	8006868 <__any_on+0x3e>
 8006850:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006854:	4293      	cmp	r3, r2
 8006856:	d803      	bhi.n	8006860 <__any_on+0x36>
 8006858:	2000      	movs	r0, #0
 800685a:	bd10      	pop	{r4, pc}
 800685c:	4603      	mov	r3, r0
 800685e:	e7f7      	b.n	8006850 <__any_on+0x26>
 8006860:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006864:	2900      	cmp	r1, #0
 8006866:	d0f5      	beq.n	8006854 <__any_on+0x2a>
 8006868:	2001      	movs	r0, #1
 800686a:	bd10      	pop	{r4, pc}

0800686c <_calloc_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	fb02 f401 	mul.w	r4, r2, r1
 8006872:	4621      	mov	r1, r4
 8006874:	f000 f808 	bl	8006888 <_malloc_r>
 8006878:	4605      	mov	r5, r0
 800687a:	b118      	cbz	r0, 8006884 <_calloc_r+0x18>
 800687c:	4622      	mov	r2, r4
 800687e:	2100      	movs	r1, #0
 8006880:	f7fe f980 	bl	8004b84 <memset>
 8006884:	4628      	mov	r0, r5
 8006886:	bd38      	pop	{r3, r4, r5, pc}

08006888 <_malloc_r>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	1ccd      	adds	r5, r1, #3
 800688c:	f025 0503 	bic.w	r5, r5, #3
 8006890:	3508      	adds	r5, #8
 8006892:	2d0c      	cmp	r5, #12
 8006894:	bf38      	it	cc
 8006896:	250c      	movcc	r5, #12
 8006898:	2d00      	cmp	r5, #0
 800689a:	4606      	mov	r6, r0
 800689c:	db01      	blt.n	80068a2 <_malloc_r+0x1a>
 800689e:	42a9      	cmp	r1, r5
 80068a0:	d903      	bls.n	80068aa <_malloc_r+0x22>
 80068a2:	230c      	movs	r3, #12
 80068a4:	6033      	str	r3, [r6, #0]
 80068a6:	2000      	movs	r0, #0
 80068a8:	bd70      	pop	{r4, r5, r6, pc}
 80068aa:	f000 f87a 	bl	80069a2 <__malloc_lock>
 80068ae:	4a23      	ldr	r2, [pc, #140]	; (800693c <_malloc_r+0xb4>)
 80068b0:	6814      	ldr	r4, [r2, #0]
 80068b2:	4621      	mov	r1, r4
 80068b4:	b991      	cbnz	r1, 80068dc <_malloc_r+0x54>
 80068b6:	4c22      	ldr	r4, [pc, #136]	; (8006940 <_malloc_r+0xb8>)
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	b91b      	cbnz	r3, 80068c4 <_malloc_r+0x3c>
 80068bc:	4630      	mov	r0, r6
 80068be:	f000 f841 	bl	8006944 <_sbrk_r>
 80068c2:	6020      	str	r0, [r4, #0]
 80068c4:	4629      	mov	r1, r5
 80068c6:	4630      	mov	r0, r6
 80068c8:	f000 f83c 	bl	8006944 <_sbrk_r>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d126      	bne.n	800691e <_malloc_r+0x96>
 80068d0:	230c      	movs	r3, #12
 80068d2:	6033      	str	r3, [r6, #0]
 80068d4:	4630      	mov	r0, r6
 80068d6:	f000 f865 	bl	80069a4 <__malloc_unlock>
 80068da:	e7e4      	b.n	80068a6 <_malloc_r+0x1e>
 80068dc:	680b      	ldr	r3, [r1, #0]
 80068de:	1b5b      	subs	r3, r3, r5
 80068e0:	d41a      	bmi.n	8006918 <_malloc_r+0x90>
 80068e2:	2b0b      	cmp	r3, #11
 80068e4:	d90f      	bls.n	8006906 <_malloc_r+0x7e>
 80068e6:	600b      	str	r3, [r1, #0]
 80068e8:	50cd      	str	r5, [r1, r3]
 80068ea:	18cc      	adds	r4, r1, r3
 80068ec:	4630      	mov	r0, r6
 80068ee:	f000 f859 	bl	80069a4 <__malloc_unlock>
 80068f2:	f104 000b 	add.w	r0, r4, #11
 80068f6:	1d23      	adds	r3, r4, #4
 80068f8:	f020 0007 	bic.w	r0, r0, #7
 80068fc:	1ac3      	subs	r3, r0, r3
 80068fe:	d01b      	beq.n	8006938 <_malloc_r+0xb0>
 8006900:	425a      	negs	r2, r3
 8006902:	50e2      	str	r2, [r4, r3]
 8006904:	bd70      	pop	{r4, r5, r6, pc}
 8006906:	428c      	cmp	r4, r1
 8006908:	bf0d      	iteet	eq
 800690a:	6863      	ldreq	r3, [r4, #4]
 800690c:	684b      	ldrne	r3, [r1, #4]
 800690e:	6063      	strne	r3, [r4, #4]
 8006910:	6013      	streq	r3, [r2, #0]
 8006912:	bf18      	it	ne
 8006914:	460c      	movne	r4, r1
 8006916:	e7e9      	b.n	80068ec <_malloc_r+0x64>
 8006918:	460c      	mov	r4, r1
 800691a:	6849      	ldr	r1, [r1, #4]
 800691c:	e7ca      	b.n	80068b4 <_malloc_r+0x2c>
 800691e:	1cc4      	adds	r4, r0, #3
 8006920:	f024 0403 	bic.w	r4, r4, #3
 8006924:	42a0      	cmp	r0, r4
 8006926:	d005      	beq.n	8006934 <_malloc_r+0xac>
 8006928:	1a21      	subs	r1, r4, r0
 800692a:	4630      	mov	r0, r6
 800692c:	f000 f80a 	bl	8006944 <_sbrk_r>
 8006930:	3001      	adds	r0, #1
 8006932:	d0cd      	beq.n	80068d0 <_malloc_r+0x48>
 8006934:	6025      	str	r5, [r4, #0]
 8006936:	e7d9      	b.n	80068ec <_malloc_r+0x64>
 8006938:	bd70      	pop	{r4, r5, r6, pc}
 800693a:	bf00      	nop
 800693c:	200002f4 	.word	0x200002f4
 8006940:	200002f8 	.word	0x200002f8

08006944 <_sbrk_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4c06      	ldr	r4, [pc, #24]	; (8006960 <_sbrk_r+0x1c>)
 8006948:	2300      	movs	r3, #0
 800694a:	4605      	mov	r5, r0
 800694c:	4608      	mov	r0, r1
 800694e:	6023      	str	r3, [r4, #0]
 8006950:	f000 f82a 	bl	80069a8 <_sbrk>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_sbrk_r+0x1a>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	b103      	cbz	r3, 800695e <_sbrk_r+0x1a>
 800695c:	602b      	str	r3, [r5, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	20013a60 	.word	0x20013a60

08006964 <strncmp>:
 8006964:	b510      	push	{r4, lr}
 8006966:	b16a      	cbz	r2, 8006984 <strncmp+0x20>
 8006968:	3901      	subs	r1, #1
 800696a:	1884      	adds	r4, r0, r2
 800696c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006970:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006974:	4293      	cmp	r3, r2
 8006976:	d103      	bne.n	8006980 <strncmp+0x1c>
 8006978:	42a0      	cmp	r0, r4
 800697a:	d001      	beq.n	8006980 <strncmp+0x1c>
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f5      	bne.n	800696c <strncmp+0x8>
 8006980:	1a98      	subs	r0, r3, r2
 8006982:	bd10      	pop	{r4, pc}
 8006984:	4610      	mov	r0, r2
 8006986:	bd10      	pop	{r4, pc}

08006988 <__ascii_wctomb>:
 8006988:	b149      	cbz	r1, 800699e <__ascii_wctomb+0x16>
 800698a:	2aff      	cmp	r2, #255	; 0xff
 800698c:	bf85      	ittet	hi
 800698e:	238a      	movhi	r3, #138	; 0x8a
 8006990:	6003      	strhi	r3, [r0, #0]
 8006992:	700a      	strbls	r2, [r1, #0]
 8006994:	f04f 30ff 	movhi.w	r0, #4294967295
 8006998:	bf98      	it	ls
 800699a:	2001      	movls	r0, #1
 800699c:	4770      	bx	lr
 800699e:	4608      	mov	r0, r1
 80069a0:	4770      	bx	lr

080069a2 <__malloc_lock>:
 80069a2:	4770      	bx	lr

080069a4 <__malloc_unlock>:
 80069a4:	4770      	bx	lr
	...

080069a8 <_sbrk>:
 80069a8:	4b04      	ldr	r3, [pc, #16]	; (80069bc <_sbrk+0x14>)
 80069aa:	6819      	ldr	r1, [r3, #0]
 80069ac:	4602      	mov	r2, r0
 80069ae:	b909      	cbnz	r1, 80069b4 <_sbrk+0xc>
 80069b0:	4903      	ldr	r1, [pc, #12]	; (80069c0 <_sbrk+0x18>)
 80069b2:	6019      	str	r1, [r3, #0]
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	4402      	add	r2, r0
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	4770      	bx	lr
 80069bc:	200002fc 	.word	0x200002fc
 80069c0:	20013a64 	.word	0x20013a64

080069c4 <_init>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr

080069d0 <_fini>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	bf00      	nop
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr
