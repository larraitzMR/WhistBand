
WhistBand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .user_data    00000040  08040000  08040000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .init_array   00000004  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08003500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00013614  2000007c  0800357c  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20013690  0800357c  00023690  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016099  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000029bb  00000000  00000000  00046109  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bb8  00000000  00000000  00048ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000aa0  00000000  00000000  00049680  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005df1  00000000  00000000  0004a120  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003b27  00000000  00000000  0004ff11  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00053a38  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002e7c  00000000  00000000  00053ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00056930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003458 	.word	0x08003458

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08003458 	.word	0x08003458

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <BSP_LED_Init>:
  * @param  Led: Specifies the Led to be configured. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b088      	sub	sp, #32
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80001f2:	2300      	movs	r3, #0
 80001f4:	60bb      	str	r3, [r7, #8]
 80001f6:	4a15      	ldr	r2, [pc, #84]	; (800024c <BSP_LED_Init+0x64>)
 80001f8:	4b14      	ldr	r3, [pc, #80]	; (800024c <BSP_LED_Init+0x64>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	6313      	str	r3, [r2, #48]	; 0x30
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <BSP_LED_Init+0x64>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	f003 0301 	and.w	r3, r3, #1
 800020a:	60bb      	str	r3, [r7, #8]
 800020c:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800020e:	2320      	movs	r3, #32
 8000210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000212:	2301      	movs	r3, #1
 8000214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <BSP_LED_Init+0x68>)
 8000222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000226:	f107 020c 	add.w	r2, r7, #12
 800022a:	4611      	mov	r1, r2
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fd5f 	bl	8000cf0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <BSP_LED_Init+0x68>)
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	2120      	movs	r1, #32
 800023c:	2200      	movs	r2, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fed8 	bl	8000ff4 <HAL_GPIO_WritePin>
}
 8000244:	bf00      	nop
 8000246:	3720      	adds	r7, #32
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40023800 	.word	0x40023800
 8000250:	20000000 	.word	0x20000000

08000254 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	4a05      	ldr	r2, [pc, #20]	; (8000278 <BSP_LED_On+0x24>)
 8000262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000266:	2120      	movs	r1, #32
 8000268:	2201      	movs	r2, #1
 800026a:	4618      	mov	r0, r3
 800026c:	f000 fec2 	bl	8000ff4 <HAL_GPIO_WritePin>
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000000 	.word	0x20000000

0800027c <BSP_LED_Toggle>:
  * @param  Led: Specifies the Led to be toggled. 
  *   This parameter can be one of following parameters:
  *     @arg LED2  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <BSP_LED_Toggle+0x24>)
 800028a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028e:	2220      	movs	r2, #32
 8000290:	4611      	mov	r1, r2
 8000292:	4618      	mov	r0, r3
 8000294:	f000 fec7 	bl	8001026 <HAL_GPIO_TogglePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80002a8:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <HAL_Init+0x40>)
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HAL_Init+0x40>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80002b4:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <HAL_Init+0x40>)
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <HAL_Init+0x40>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <HAL_Init+0x40>)
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <HAL_Init+0x40>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002cc:	2003      	movs	r0, #3
 80002ce:	f000 f929 	bl	8000524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 f808 	bl	80002e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80002d8:	f002 feb7 	bl	800304a <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80002dc:	2300      	movs	r3, #0
}
 80002de:	4618      	mov	r0, r3
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40023c00 	.word	0x40023c00

080002e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80002f0:	4b09      	ldr	r3, [pc, #36]	; (8000318 <HAL_InitTick+0x30>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <HAL_InitTick+0x34>)
 80002f6:	fba2 2303 	umull	r2, r3, r2, r3
 80002fa:	099b      	lsrs	r3, r3, #6
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 f946 	bl	800058e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000302:	2200      	movs	r2, #0
 8000304:	6879      	ldr	r1, [r7, #4]
 8000306:	f04f 30ff 	mov.w	r0, #4294967295
 800030a:	f000 f916 	bl	800053a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800030e:	2300      	movs	r3, #0
}
 8000310:	4618      	mov	r0, r3
 8000312:	3708      	adds	r7, #8
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000078 	.word	0x20000078
 800031c:	10624dd3 	.word	0x10624dd3

08000320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  uwTick++;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <HAL_IncTick+0x18>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3301      	adds	r3, #1
 800032a:	4a03      	ldr	r2, [pc, #12]	; (8000338 <HAL_IncTick+0x18>)
 800032c:	6013      	str	r3, [r2, #0]
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	200000a4 	.word	0x200000a4

0800033c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  return uwTick;
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <HAL_GetTick+0x14>)
 8000342:	681b      	ldr	r3, [r3, #0]
}
 8000344:	4618      	mov	r0, r3
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	200000a4 	.word	0x200000a4

08000354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800035c:	f7ff ffee 	bl	800033c <HAL_GetTick>
 8000360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800036c:	d002      	beq.n	8000374 <HAL_Delay+0x20>
  {
     wait++;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3301      	adds	r3, #1
 8000372:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000374:	bf00      	nop
 8000376:	f7ff ffe1 	bl	800033c <HAL_GetTick>
 800037a:	4602      	mov	r2, r0
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	1ad2      	subs	r2, r2, r3
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	429a      	cmp	r2, r3
 8000384:	d3f7      	bcc.n	8000376 <HAL_Delay+0x22>
  {
  }
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f003 0307 	and.w	r3, r3, #7
 800039e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003ac:	4013      	ands	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	60d3      	str	r3, [r2, #12]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <NVIC_GetPriorityGrouping+0x18>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	f003 0307 	and.w	r3, r3, #7
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003fe:	4909      	ldr	r1, [pc, #36]	; (8000424 <NVIC_EnableIRQ+0x30>)
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	095b      	lsrs	r3, r3, #5
 8000406:	79fa      	ldrb	r2, [r7, #7]
 8000408:	f002 021f 	and.w	r2, r2, #31
 800040c:	2001      	movs	r0, #1
 800040e:	fa00 f202 	lsl.w	r2, r0, r2
 8000412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e100 	.word	0xe000e100

08000428 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000438:	2b00      	cmp	r3, #0
 800043a:	da0b      	bge.n	8000454 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043c:	490d      	ldr	r1, [pc, #52]	; (8000474 <NVIC_SetPriority+0x4c>)
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	f003 030f 	and.w	r3, r3, #15
 8000444:	3b04      	subs	r3, #4
 8000446:	683a      	ldr	r2, [r7, #0]
 8000448:	b2d2      	uxtb	r2, r2
 800044a:	0112      	lsls	r2, r2, #4
 800044c:	b2d2      	uxtb	r2, r2
 800044e:	440b      	add	r3, r1
 8000450:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000452:	e009      	b.n	8000468 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000454:	4908      	ldr	r1, [pc, #32]	; (8000478 <NVIC_SetPriority+0x50>)
 8000456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045a:	683a      	ldr	r2, [r7, #0]
 800045c:	b2d2      	uxtb	r2, r2
 800045e:	0112      	lsls	r2, r2, #4
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	440b      	add	r3, r1
 8000464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000ed00 	.word	0xe000ed00
 8000478:	e000e100 	.word	0xe000e100

0800047c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800047c:	b480      	push	{r7}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f003 0307 	and.w	r3, r3, #7
 800048e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	f1c3 0307 	rsb	r3, r3, #7
 8000496:	2b04      	cmp	r3, #4
 8000498:	bf28      	it	cs
 800049a:	2304      	movcs	r3, #4
 800049c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	3304      	adds	r3, #4
 80004a2:	2b06      	cmp	r3, #6
 80004a4:	d902      	bls.n	80004ac <NVIC_EncodePriority+0x30>
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	3b03      	subs	r3, #3
 80004aa:	e000      	b.n	80004ae <NVIC_EncodePriority+0x32>
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004b0:	2201      	movs	r2, #1
 80004b2:	69bb      	ldr	r3, [r7, #24]
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	1e5a      	subs	r2, r3, #1
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	401a      	ands	r2, r3
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004c2:	2101      	movs	r1, #1
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ca:	1e59      	subs	r1, r3, #1
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d0:	4313      	orrs	r3, r2
         );
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3724      	adds	r7, #36	; 0x24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
	...

080004e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004f0:	d301      	bcc.n	80004f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004f2:	2301      	movs	r3, #1
 80004f4:	e00f      	b.n	8000516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <SysTick_Config+0x40>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004fe:	210f      	movs	r1, #15
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f7ff ff90 	bl	8000428 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <SysTick_Config+0x40>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <SysTick_Config+0x40>)
 8000510:	2207      	movs	r2, #7
 8000512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	e000e010 	.word	0xe000e010

08000524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ff2f 	bl	8000390 <NVIC_SetPriorityGrouping>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800053a:	b580      	push	{r7, lr}
 800053c:	b086      	sub	sp, #24
 800053e:	af00      	add	r7, sp, #0
 8000540:	4603      	mov	r3, r0
 8000542:	60b9      	str	r1, [r7, #8]
 8000544:	607a      	str	r2, [r7, #4]
 8000546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800054c:	f7ff ff44 	bl	80003d8 <NVIC_GetPriorityGrouping>
 8000550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	68b9      	ldr	r1, [r7, #8]
 8000556:	6978      	ldr	r0, [r7, #20]
 8000558:	f7ff ff90 	bl	800047c <NVIC_EncodePriority>
 800055c:	4602      	mov	r2, r0
 800055e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000562:	4611      	mov	r1, r2
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff5f 	bl	8000428 <NVIC_SetPriority>
}
 800056a:	bf00      	nop
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	4603      	mov	r3, r0
 800057a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800057c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ff37 	bl	80003f4 <NVIC_EnableIRQ>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff ffa2 	bl	80004e0 <SysTick_Config>
 800059c:	4603      	mov	r3, r0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80005aa:	f002 fc4d 	bl	8002e48 <HAL_SYSTICK_Callback>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80005c0:	f7ff febc 	bl	800033c <HAL_GetTick>
 80005c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d101      	bne.n	80005d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	e099      	b.n	8000704 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2202      	movs	r2, #2
 80005dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	6812      	ldr	r2, [r2, #0]
 80005e8:	6812      	ldr	r2, [r2, #0]
 80005ea:	f022 0201 	bic.w	r2, r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80005f0:	e00f      	b.n	8000612 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80005f2:	f7ff fea3 	bl	800033c <HAL_GetTick>
 80005f6:	4602      	mov	r2, r0
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	d908      	bls.n	8000612 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2220      	movs	r2, #32
 8000604:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2203      	movs	r2, #3
 800060a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800060e:	2303      	movs	r3, #3
 8000610:	e078      	b.n	8000704 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1e8      	bne.n	80005f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	4b38      	ldr	r3, [pc, #224]	; (800070c <HAL_DMA_Init+0x158>)
 800062c:	4013      	ands	r3, r2
 800062e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800063e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800064a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000656:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6a1b      	ldr	r3, [r3, #32]
 800065c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	4313      	orrs	r3, r2
 8000662:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000668:	2b04      	cmp	r3, #4
 800066a:	d107      	bne.n	800067c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	4313      	orrs	r3, r2
 8000676:	697a      	ldr	r2, [r7, #20]
 8000678:	4313      	orrs	r3, r2
 800067a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	f023 0307 	bic.w	r3, r3, #7
 8000692:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	4313      	orrs	r3, r2
 800069c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	d117      	bne.n	80006d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00e      	beq.n	80006d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 fa9f 	bl	8000bfc <DMA_CheckFifoParam>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d008      	beq.n	80006d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2240      	movs	r2, #64	; 0x40
 80006c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80006d2:	2301      	movs	r3, #1
 80006d4:	e016      	b.n	8000704 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f000 fa56 	bl	8000b90 <DMA_CalcBaseAndBitshift>
 80006e4:	4603      	mov	r3, r0
 80006e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006ec:	223f      	movs	r2, #63	; 0x3f
 80006ee:	409a      	lsls	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2201      	movs	r2, #1
 80006fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	f010803f 	.word	0xf010803f

08000710 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000726:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800072e:	2b01      	cmp	r3, #1
 8000730:	d101      	bne.n	8000736 <HAL_DMA_Start_IT+0x26>
 8000732:	2302      	movs	r3, #2
 8000734:	e048      	b.n	80007c8 <HAL_DMA_Start_IT+0xb8>
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2201      	movs	r2, #1
 800073a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b01      	cmp	r3, #1
 8000748:	d137      	bne.n	80007ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2202      	movs	r2, #2
 800074e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	2200      	movs	r2, #0
 8000756:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f000 f9e8 	bl	8000b34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000768:	223f      	movs	r2, #63	; 0x3f
 800076a:	409a      	lsls	r2, r3
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	6812      	ldr	r2, [r2, #0]
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	f042 0216 	orr.w	r2, r2, #22
 800077e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	6952      	ldr	r2, [r2, #20]
 800078a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800078e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	2b00      	cmp	r3, #0
 8000796:	d007      	beq.n	80007a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	6812      	ldr	r2, [r2, #0]
 80007a0:	6812      	ldr	r2, [r2, #0]
 80007a2:	f042 0208 	orr.w	r2, r2, #8
 80007a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	6812      	ldr	r2, [r2, #0]
 80007b2:	f042 0201 	orr.w	r2, r2, #1
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e005      	b.n	80007c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80007c2:	2302      	movs	r3, #2
 80007c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d004      	beq.n	80007ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00c      	b.n	8000808 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2205      	movs	r2, #5
 80007f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	6812      	ldr	r2, [r2, #0]
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	f022 0201 	bic.w	r2, r2, #1
 8000804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000820:	4b93      	ldr	r3, [pc, #588]	; (8000a70 <HAL_DMA_IRQHandler+0x25c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a93      	ldr	r2, [pc, #588]	; (8000a74 <HAL_DMA_IRQHandler+0x260>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	0a9b      	lsrs	r3, r3, #10
 800082c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000832:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800083e:	2208      	movs	r2, #8
 8000840:	409a      	lsls	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4013      	ands	r3, r2
 8000846:	2b00      	cmp	r3, #0
 8000848:	d01a      	beq.n	8000880 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	2b00      	cmp	r3, #0
 8000856:	d013      	beq.n	8000880 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	6812      	ldr	r2, [r2, #0]
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	f022 0204 	bic.w	r2, r2, #4
 8000866:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800086c:	2208      	movs	r2, #8
 800086e:	409a      	lsls	r2, r3
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000878:	f043 0201 	orr.w	r2, r3, #1
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000884:	4a7c      	ldr	r2, [pc, #496]	; (8000a78 <HAL_DMA_IRQHandler+0x264>)
 8000886:	409a      	lsls	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4013      	ands	r3, r2
 800088c:	2b00      	cmp	r3, #0
 800088e:	d012      	beq.n	80008b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00b      	beq.n	80008b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008a2:	4a75      	ldr	r2, [pc, #468]	; (8000a78 <HAL_DMA_IRQHandler+0x264>)
 80008a4:	409a      	lsls	r2, r3
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008ae:	f043 0202 	orr.w	r2, r3, #2
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008ba:	4a70      	ldr	r2, [pc, #448]	; (8000a7c <HAL_DMA_IRQHandler+0x268>)
 80008bc:	409a      	lsls	r2, r3
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4013      	ands	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d012      	beq.n	80008ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f003 0302 	and.w	r3, r3, #2
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00b      	beq.n	80008ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008d8:	4a68      	ldr	r2, [pc, #416]	; (8000a7c <HAL_DMA_IRQHandler+0x268>)
 80008da:	409a      	lsls	r2, r3
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008e4:	f043 0204 	orr.w	r2, r3, #4
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008f0:	2210      	movs	r2, #16
 80008f2:	409a      	lsls	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4013      	ands	r3, r2
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d043      	beq.n	8000984 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	2b00      	cmp	r3, #0
 8000908:	d03c      	beq.n	8000984 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800090e:	2210      	movs	r2, #16
 8000910:	409a      	lsls	r2, r3
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d018      	beq.n	8000956 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800092e:	2b00      	cmp	r3, #0
 8000930:	d108      	bne.n	8000944 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	2b00      	cmp	r3, #0
 8000938:	d024      	beq.n	8000984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	4798      	blx	r3
 8000942:	e01f      	b.n	8000984 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000948:	2b00      	cmp	r3, #0
 800094a:	d01b      	beq.n	8000984 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	4798      	blx	r3
 8000954:	e016      	b.n	8000984 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000960:	2b00      	cmp	r3, #0
 8000962:	d107      	bne.n	8000974 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	6812      	ldr	r2, [r2, #0]
 800096c:	6812      	ldr	r2, [r2, #0]
 800096e:	f022 0208 	bic.w	r2, r2, #8
 8000972:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	2b00      	cmp	r3, #0
 800097a:	d003      	beq.n	8000984 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000988:	2220      	movs	r2, #32
 800098a:	409a      	lsls	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4013      	ands	r3, r2
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 8094 	beq.w	8000abe <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f000 808c 	beq.w	8000abe <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009aa:	2220      	movs	r2, #32
 80009ac:	409a      	lsls	r2, r3
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b05      	cmp	r3, #5
 80009bc:	d137      	bne.n	8000a2e <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	f022 0216 	bic.w	r2, r2, #22
 80009cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	6812      	ldr	r2, [r2, #0]
 80009d6:	6952      	ldr	r2, [r2, #20]
 80009d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d103      	bne.n	80009ee <HAL_DMA_IRQHandler+0x1da>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d007      	beq.n	80009fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	6812      	ldr	r2, [r2, #0]
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	f022 0208 	bic.w	r2, r2, #8
 80009fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a02:	223f      	movs	r2, #63	; 0x3f
 8000a04:	409a      	lsls	r2, r3
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2201      	movs	r2, #1
 8000a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 8083 	beq.w	8000b2a <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	4798      	blx	r3
        }
        return;
 8000a2c:	e07d      	b.n	8000b2a <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d021      	beq.n	8000a80 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d108      	bne.n	8000a5c <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d035      	beq.n	8000abe <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	4798      	blx	r3
 8000a5a:	e030      	b.n	8000abe <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d02c      	beq.n	8000abe <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	4798      	blx	r3
 8000a6c:	e027      	b.n	8000abe <HAL_DMA_IRQHandler+0x2aa>
 8000a6e:	bf00      	nop
 8000a70:	20000078 	.word	0x20000078
 8000a74:	1b4e81b5 	.word	0x1b4e81b5
 8000a78:	00800001 	.word	0x00800001
 8000a7c:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10f      	bne.n	8000aae <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	6812      	ldr	r2, [r2, #0]
 8000a98:	f022 0210 	bic.w	r2, r2, #16
 8000a9c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d032      	beq.n	8000b2c <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d022      	beq.n	8000b18 <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2205      	movs	r2, #5
 8000ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	6812      	ldr	r2, [r2, #0]
 8000ae4:	f022 0201 	bic.w	r2, r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	3301      	adds	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d807      	bhi.n	8000b06 <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f2      	bne.n	8000aea <HAL_DMA_IRQHandler+0x2d6>
 8000b04:	e000      	b.n	8000b08 <HAL_DMA_IRQHandler+0x2f4>
          break;
 8000b06:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d005      	beq.n	8000b2c <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	4798      	blx	r3
 8000b28:	e000      	b.n	8000b2c <HAL_DMA_IRQHandler+0x318>
        return;
 8000b2a:	bf00      	nop
    }
  }
}
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop

08000b34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	6812      	ldr	r2, [r2, #0]
 8000b4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b40      	cmp	r3, #64	; 0x40
 8000b60:	d108      	bne.n	8000b74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000b72:	e007      	b.n	8000b84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	60da      	str	r2, [r3, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	3b10      	subs	r3, #16
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <DMA_CalcBaseAndBitshift+0x64>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	091b      	lsrs	r3, r3, #4
 8000ba8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000baa:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <DMA_CalcBaseAndBitshift+0x68>)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d909      	bls.n	8000bd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000bc6:	f023 0303 	bic.w	r3, r3, #3
 8000bca:	1d1a      	adds	r2, r3, #4
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	659a      	str	r2, [r3, #88]	; 0x58
 8000bd0:	e007      	b.n	8000be2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000bda:	f023 0303 	bic.w	r3, r3, #3
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	aaaaaaab 	.word	0xaaaaaaab
 8000bf8:	080034d8 	.word	0x080034d8

08000bfc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d11f      	bne.n	8000c56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d855      	bhi.n	8000cc8 <DMA_CheckFifoParam+0xcc>
 8000c1c:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <DMA_CheckFifoParam+0x28>)
 8000c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c22:	bf00      	nop
 8000c24:	08000c35 	.word	0x08000c35
 8000c28:	08000c47 	.word	0x08000c47
 8000c2c:	08000c35 	.word	0x08000c35
 8000c30:	08000cc9 	.word	0x08000cc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d045      	beq.n	8000ccc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000c44:	e042      	b.n	8000ccc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000c4e:	d13f      	bne.n	8000cd0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000c54:	e03c      	b.n	8000cd0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c5e:	d121      	bne.n	8000ca4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d836      	bhi.n	8000cd4 <DMA_CheckFifoParam+0xd8>
 8000c66:	a201      	add	r2, pc, #4	; (adr r2, 8000c6c <DMA_CheckFifoParam+0x70>)
 8000c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6c:	08000c7d 	.word	0x08000c7d
 8000c70:	08000c83 	.word	0x08000c83
 8000c74:	08000c7d 	.word	0x08000c7d
 8000c78:	08000c95 	.word	0x08000c95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8000c80:	e02f      	b.n	8000ce2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d024      	beq.n	8000cd8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000c92:	e021      	b.n	8000cd8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000c9c:	d11e      	bne.n	8000cdc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000ca2:	e01b      	b.n	8000cdc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d902      	bls.n	8000cb0 <DMA_CheckFifoParam+0xb4>
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d003      	beq.n	8000cb6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000cae:	e018      	b.n	8000ce2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8000cb4:	e015      	b.n	8000ce2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00e      	beq.n	8000ce0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8000cc6:	e00b      	b.n	8000ce0 <DMA_CheckFifoParam+0xe4>
      break;
 8000cc8:	bf00      	nop
 8000cca:	e00a      	b.n	8000ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ccc:	bf00      	nop
 8000cce:	e008      	b.n	8000ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8000cd0:	bf00      	nop
 8000cd2:	e006      	b.n	8000ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8000cd4:	bf00      	nop
 8000cd6:	e004      	b.n	8000ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8000cd8:	bf00      	nop
 8000cda:	e002      	b.n	8000ce2 <DMA_CheckFifoParam+0xe6>
      break;   
 8000cdc:	bf00      	nop
 8000cde:	e000      	b.n	8000ce2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ce0:	bf00      	nop
    }
  } 
  
  return status; 
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	e159      	b.n	8000fc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	f040 8148 	bne.w	8000fba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x4a>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b12      	cmp	r3, #18
 8000d38:	d123      	bne.n	8000d82 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	08da      	lsrs	r2, r3, #3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3208      	adds	r2, #8
 8000d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	220f      	movs	r2, #15
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	691a      	ldr	r2, [r3, #16]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3208      	adds	r2, #8
 8000d7c:	69b9      	ldr	r1, [r7, #24]
 8000d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0203 	and.w	r2, r3, #3
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d00b      	beq.n	8000dd6 <HAL_GPIO_Init+0xe6>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dca:	2b11      	cmp	r3, #17
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b12      	cmp	r3, #18
 8000dd4:	d130      	bne.n	8000e38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 80a2 	beq.w	8000fba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4a56      	ldr	r2, [pc, #344]	; (8000fd4 <HAL_GPIO_Init+0x2e4>)
 8000e7c:	4b55      	ldr	r3, [pc, #340]	; (8000fd4 <HAL_GPIO_Init+0x2e4>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <HAL_GPIO_Init+0x2e4>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e92:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <HAL_GPIO_Init+0x2e8>)
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <HAL_GPIO_Init+0x2ec>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d019      	beq.n	8000ef2 <HAL_GPIO_Init+0x202>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <HAL_GPIO_Init+0x2f0>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0x1fe>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a46      	ldr	r2, [pc, #280]	; (8000fe4 <HAL_GPIO_Init+0x2f4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d00d      	beq.n	8000eea <HAL_GPIO_Init+0x1fa>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a45      	ldr	r2, [pc, #276]	; (8000fe8 <HAL_GPIO_Init+0x2f8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d007      	beq.n	8000ee6 <HAL_GPIO_Init+0x1f6>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a44      	ldr	r2, [pc, #272]	; (8000fec <HAL_GPIO_Init+0x2fc>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d101      	bne.n	8000ee2 <HAL_GPIO_Init+0x1f2>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e008      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e004      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <HAL_GPIO_Init+0x204>
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	69fa      	ldr	r2, [r7, #28]
 8000ef6:	f002 0203 	and.w	r2, r2, #3
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	4093      	lsls	r3, r2
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f04:	4934      	ldr	r1, [pc, #208]	; (8000fd8 <HAL_GPIO_Init+0x2e8>)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f36:	4a2e      	ldr	r2, [pc, #184]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f3c:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f60:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f66:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8a:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_GPIO_Init+0x300>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	61fb      	str	r3, [r7, #28]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	f67f aea2 	bls.w	8000d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3724      	adds	r7, #36	; 0x24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40013800 	.word	0x40013800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40013c00 	.word	0x40013c00

08000ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001004:	787b      	ldrb	r3, [r7, #1]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001010:	e003      	b.n	800101a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	041a      	lsls	r2, r3, #16
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	619a      	str	r2, [r3, #24]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	405a      	eors	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	615a      	str	r2, [r3, #20]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	4013      	ands	r3, r2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	4618      	mov	r0, r3
 800106c:	f001 ff04 	bl	8002e78 <HAL_GPIO_EXTI_Callback>
  }
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40013c00 	.word	0x40013c00

0800107c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	; 0x38
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d075      	beq.n	8001180 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001094:	4ba4      	ldr	r3, [pc, #656]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b04      	cmp	r3, #4
 800109e:	d00c      	beq.n	80010ba <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a0:	4ba1      	ldr	r3, [pc, #644]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d112      	bne.n	80010d2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ac:	4b9e      	ldr	r3, [pc, #632]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010b8:	d10b      	bne.n	80010d2 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ba:	4b9b      	ldr	r3, [pc, #620]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d05b      	beq.n	800117e <HAL_RCC_OscConfig+0x102>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d157      	bne.n	800117e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e224      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010da:	d106      	bne.n	80010ea <HAL_RCC_OscConfig+0x6e>
 80010dc:	4a92      	ldr	r2, [pc, #584]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010de:	4b92      	ldr	r3, [pc, #584]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e01d      	b.n	8001126 <HAL_RCC_OscConfig+0xaa>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f2:	d10c      	bne.n	800110e <HAL_RCC_OscConfig+0x92>
 80010f4:	4a8c      	ldr	r2, [pc, #560]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010f6:	4b8c      	ldr	r3, [pc, #560]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4a89      	ldr	r2, [pc, #548]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001102:	4b89      	ldr	r3, [pc, #548]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e00b      	b.n	8001126 <HAL_RCC_OscConfig+0xaa>
 800110e:	4a86      	ldr	r2, [pc, #536]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	4b85      	ldr	r3, [pc, #532]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4a83      	ldr	r2, [pc, #524]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	4b82      	ldr	r3, [pc, #520]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001124:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d013      	beq.n	8001156 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff f905 	bl	800033c <HAL_GetTick>
 8001132:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001136:	f7ff f901 	bl	800033c <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	; 0x64
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e1e9      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001148:	4b77      	ldr	r3, [pc, #476]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0xba>
 8001154:	e014      	b.n	8001180 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001156:	f7ff f8f1 	bl	800033c <HAL_GetTick>
 800115a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115e:	f7ff f8ed 	bl	800033c <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b64      	cmp	r3, #100	; 0x64
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1d5      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001170:	4b6d      	ldr	r3, [pc, #436]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0xe2>
 800117c:	e000      	b.n	8001180 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d077      	beq.n	800127c <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118c:	4b66      	ldr	r3, [pc, #408]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00b      	beq.n	80011b0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001198:	4b63      	ldr	r3, [pc, #396]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d126      	bne.n	80011f2 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a4:	4b60      	ldr	r3, [pc, #384]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d120      	bne.n	80011f2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b0:	4b5d      	ldr	r3, [pc, #372]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_OscConfig+0x14c>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e1a9      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4857      	ldr	r0, [pc, #348]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80011ca:	4b57      	ldr	r3, [pc, #348]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6919      	ldr	r1, [r3, #16]
 80011d6:	23f8      	movs	r3, #248	; 0xf8
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	fab3 f383 	clz	r3, r3
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f0:	e044      	b.n	800127c <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d02a      	beq.n	8001250 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011fa:	4b4c      	ldr	r3, [pc, #304]	; (800132c <HAL_RCC_OscConfig+0x2b0>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff f89c 	bl	800033c <HAL_GetTick>
 8001204:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001208:	f7ff f898 	bl	800033c <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e180      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121a:	4b43      	ldr	r3, [pc, #268]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001226:	4840      	ldr	r0, [pc, #256]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6919      	ldr	r1, [r3, #16]
 8001234:	23f8      	movs	r3, #248	; 0xf8
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	fab3 f383 	clz	r3, r3
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	6003      	str	r3, [r0, #0]
 800124e:	e015      	b.n	800127c <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001250:	4b36      	ldr	r3, [pc, #216]	; (800132c <HAL_RCC_OscConfig+0x2b0>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff f871 	bl	800033c <HAL_GetTick>
 800125a:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff f86d 	bl	800033c <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e155      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f0      	bne.n	800125e <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d030      	beq.n	80012ea <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d016      	beq.n	80012be <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <HAL_RCC_OscConfig+0x2b4>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001296:	f7ff f851 	bl	800033c <HAL_GetTick>
 800129a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129e:	f7ff f84d 	bl	800033c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e135      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x222>
 80012bc:	e015      	b.n	80012ea <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <HAL_RCC_OscConfig+0x2b4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c4:	f7ff f83a 	bl	800033c <HAL_GetTick>
 80012c8:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff f836 	bl	800033c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e11e      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8086 	beq.w	8001404 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001306:	6413      	str	r3, [r2, #64]	; 0x40
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_RCC_OscConfig+0x2b8>)
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <HAL_RCC_OscConfig+0x2b8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131e:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001320:	f7ff f80c 	bl	800033c <HAL_GetTick>
 8001324:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001326:	e010      	b.n	800134a <HAL_RCC_OscConfig+0x2ce>
 8001328:	40023800 	.word	0x40023800
 800132c:	42470000 	.word	0x42470000
 8001330:	42470e80 	.word	0x42470e80
 8001334:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001338:	f7ff f800 	bl	800033c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e0e8      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800134a:	4b76      	ldr	r3, [pc, #472]	; (8001524 <HAL_RCC_OscConfig+0x4a8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d106      	bne.n	800136c <HAL_RCC_OscConfig+0x2f0>
 800135e:	4a72      	ldr	r2, [pc, #456]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 8001360:	4b71      	ldr	r3, [pc, #452]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6713      	str	r3, [r2, #112]	; 0x70
 800136a:	e01c      	b.n	80013a6 <HAL_RCC_OscConfig+0x32a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b05      	cmp	r3, #5
 8001372:	d10c      	bne.n	800138e <HAL_RCC_OscConfig+0x312>
 8001374:	4a6c      	ldr	r2, [pc, #432]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 8001376:	4b6c      	ldr	r3, [pc, #432]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 8001378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6713      	str	r3, [r2, #112]	; 0x70
 8001380:	4a69      	ldr	r2, [pc, #420]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 8001382:	4b69      	ldr	r3, [pc, #420]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6713      	str	r3, [r2, #112]	; 0x70
 800138c:	e00b      	b.n	80013a6 <HAL_RCC_OscConfig+0x32a>
 800138e:	4a66      	ldr	r2, [pc, #408]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 8001390:	4b65      	ldr	r3, [pc, #404]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 8001392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	6713      	str	r3, [r2, #112]	; 0x70
 800139a:	4a63      	ldr	r2, [pc, #396]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 800139c:	4b62      	ldr	r3, [pc, #392]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	f023 0304 	bic.w	r3, r3, #4
 80013a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d015      	beq.n	80013da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ae:	f7fe ffc5 	bl	800033c <HAL_GetTick>
 80013b2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b6:	f7fe ffc1 	bl	800033c <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e0a7      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013cc:	4b56      	ldr	r3, [pc, #344]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0ee      	beq.n	80013b6 <HAL_RCC_OscConfig+0x33a>
 80013d8:	e014      	b.n	8001404 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013da:	f7fe ffaf 	bl	800033c <HAL_GetTick>
 80013de:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e0:	e00a      	b.n	80013f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f7fe ffab 	bl	800033c <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e091      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f8:	4b4b      	ldr	r3, [pc, #300]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 80013fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1ee      	bne.n	80013e2 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 8086 	beq.w	800151a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800140e:	4b46      	ldr	r3, [pc, #280]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b08      	cmp	r3, #8
 8001418:	d07d      	beq.n	8001516 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d162      	bne.n	80014e8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b42      	ldr	r3, [pc, #264]	; (800152c <HAL_RCC_OscConfig+0x4b0>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001428:	f7fe ff88 	bl	800033c <HAL_GetTick>
 800142c:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7fe ff84 	bl	800033c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e06c      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	4b39      	ldr	r3, [pc, #228]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800144e:	4836      	ldr	r0, [pc, #216]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69da      	ldr	r2, [r3, #28]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800145e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	60fb      	str	r3, [r7, #12]
  return(result);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	1e59      	subs	r1, r3, #1
 8001480:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	617b      	str	r3, [r7, #20]
  return(result);
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	fab3 f383 	clz	r3, r3
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800149e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80014a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	fab3 f383 	clz	r3, r3
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_RCC_OscConfig+0x4b0>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7fe ff3c 	bl	800033c <HAL_GetTick>
 80014c4:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c8:	f7fe ff38 	bl	800033c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e020      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x44c>
 80014e6:	e018      	b.n	800151a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_RCC_OscConfig+0x4b0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7fe ff25 	bl	800033c <HAL_GetTick>
 80014f2:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f6:	f7fe ff21 	bl	800033c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e009      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <HAL_RCC_OscConfig+0x4ac>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f0      	bne.n	80014f6 <HAL_RCC_OscConfig+0x47a>
 8001514:	e001      	b.n	800151a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3738      	adds	r7, #56	; 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40007000 	.word	0x40007000
 8001528:	40023800 	.word	0x40023800
 800152c:	42470060 	.word	0x42470060

08001530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800153e:	4b81      	ldr	r3, [pc, #516]	; (8001744 <HAL_RCC_ClockConfig+0x214>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 020f 	and.w	r2, r3, #15
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d20c      	bcs.n	8001566 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154c:	4b7d      	ldr	r3, [pc, #500]	; (8001744 <HAL_RCC_ClockConfig+0x214>)
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001554:	4b7b      	ldr	r3, [pc, #492]	; (8001744 <HAL_RCC_ClockConfig+0x214>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 020f 	and.w	r2, r3, #15
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d001      	beq.n	8001566 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0ea      	b.n	800173c <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d008      	beq.n	8001584 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001572:	4975      	ldr	r1, [pc, #468]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 8001574:	4b74      	ldr	r3, [pc, #464]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4313      	orrs	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8086 	beq.w	800169e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b6b      	ldr	r3, [pc, #428]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d119      	bne.n	80015da <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0c8      	b.n	800173c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d003      	beq.n	80015ba <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	4b63      	ldr	r3, [pc, #396]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0b8      	b.n	800173c <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	4b5f      	ldr	r3, [pc, #380]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e0b0      	b.n	800173c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015da:	495b      	ldr	r1, [pc, #364]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 80015dc:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f023 0203 	bic.w	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015ec:	f7fe fea6 	bl	800033c <HAL_GetTick>
 80015f0:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d112      	bne.n	8001620 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f7fe fe9e 	bl	800033c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e094      	b.n	800173c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001612:	4b4d      	ldr	r3, [pc, #308]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b04      	cmp	r3, #4
 800161c:	d1ee      	bne.n	80015fc <HAL_RCC_ClockConfig+0xcc>
 800161e:	e03e      	b.n	800169e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d112      	bne.n	800164e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162a:	f7fe fe87 	bl	800033c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e07d      	b.n	800173c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001640:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b08      	cmp	r3, #8
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_ClockConfig+0xfa>
 800164c:	e027      	b.n	800169e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d11d      	bne.n	8001692 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001656:	e00a      	b.n	800166e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7fe fe70 	bl	800033c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e066      	b.n	800173c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800166e:	4b36      	ldr	r3, [pc, #216]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b0c      	cmp	r3, #12
 8001678:	d1ee      	bne.n	8001658 <HAL_RCC_ClockConfig+0x128>
 800167a:	e010      	b.n	800169e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7fe fe5e 	bl	800033c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e054      	b.n	800173c <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ee      	bne.n	800167c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_RCC_ClockConfig+0x214>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 020f 	and.w	r2, r3, #15
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d90c      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ac:	4b25      	ldr	r3, [pc, #148]	; (8001744 <HAL_RCC_ClockConfig+0x214>)
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <HAL_RCC_ClockConfig+0x214>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 020f 	and.w	r2, r3, #15
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e03a      	b.n	800173c <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d2:	491d      	ldr	r1, [pc, #116]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d009      	beq.n	8001704 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016f0:	4915      	ldr	r1, [pc, #84]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001704:	f000 f826 	bl	8001754 <HAL_RCC_GetSysClockFreq>
 8001708:	4601      	mov	r1, r0
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_RCC_ClockConfig+0x218>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001712:	23f0      	movs	r3, #240	; 0xf0
 8001714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	60fb      	str	r3, [r7, #12]
  return(result);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
 8001728:	4a08      	ldr	r2, [pc, #32]	; (800174c <HAL_RCC_ClockConfig+0x21c>)
 800172a:	5cd3      	ldrb	r3, [r2, r3]
 800172c:	fa21 f303 	lsr.w	r3, r1, r3
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_RCC_ClockConfig+0x220>)
 8001732:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001734:	2000      	movs	r0, #0
 8001736:	f7fe fdd7 	bl	80002e8 <HAL_InitTick>
  
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023c00 	.word	0x40023c00
 8001748:	40023800 	.word	0x40023800
 800174c:	080034e0 	.word	0x080034e0
 8001750:	20000078 	.word	0x20000078

08001754 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b08b      	sub	sp, #44	; 0x2c
 8001758:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800176a:	4b36      	ldr	r3, [pc, #216]	; (8001844 <HAL_RCC_GetSysClockFreq+0xf0>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d006      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x30>
 8001776:	2b08      	cmp	r3, #8
 8001778:	d007      	beq.n	800178a <HAL_RCC_GetSysClockFreq+0x36>
 800177a:	2b00      	cmp	r3, #0
 800177c:	d158      	bne.n	8001830 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001780:	623b      	str	r3, [r7, #32]
       break;
 8001782:	e058      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001784:	4b31      	ldr	r3, [pc, #196]	; (800184c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001786:	623b      	str	r3, [r7, #32]
      break;
 8001788:	e055      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_RCC_GetSysClockFreq+0xf0>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001792:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d017      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80017a0:	4a2a      	ldr	r2, [pc, #168]	; (800184c <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80017a8:	4b26      	ldr	r3, [pc, #152]	; (8001844 <HAL_RCC_GetSysClockFreq+0xf0>)
 80017aa:	6859      	ldr	r1, [r3, #4]
 80017ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017b0:	400b      	ands	r3, r1
 80017b2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80017b6:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	6979      	ldr	r1, [r7, #20]
 80017ba:	fa91 f1a1 	rbit	r1, r1
 80017be:	6139      	str	r1, [r7, #16]
  return(result);
 80017c0:	6939      	ldr	r1, [r7, #16]
 80017c2:	fab1 f181 	clz	r1, r1
 80017c6:	40cb      	lsrs	r3, r1
 80017c8:	fb03 f302 	mul.w	r3, r3, r2
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
 80017ce:	e016      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80017d0:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_RCC_GetSysClockFreq+0xf0>)
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e0:	400b      	ands	r3, r1
 80017e2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80017e6:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	68f9      	ldr	r1, [r7, #12]
 80017ea:	fa91 f1a1 	rbit	r1, r1
 80017ee:	60b9      	str	r1, [r7, #8]
  return(result);
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	fab1 f181 	clz	r1, r1
 80017f6:	40cb      	lsrs	r3, r1
 80017f8:	fb03 f302 	mul.w	r3, r3, r2
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001806:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800180a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	603b      	str	r3, [r7, #0]
  return(result);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8001824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	623b      	str	r3, [r7, #32]
      break;
 800182e:	e002      	b.n	8001836 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001832:	623b      	str	r3, [r7, #32]
      break;
 8001834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001836:	6a3b      	ldr	r3, [r7, #32]
}
 8001838:	4618      	mov	r0, r3
 800183a:	372c      	adds	r7, #44	; 0x2c
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40023800 	.word	0x40023800
 8001848:	00f42400 	.word	0x00f42400
 800184c:	017d7840 	.word	0x017d7840

08001850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_RCC_GetHCLKFreq+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000078 	.word	0x20000078

08001868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800186e:	f7ff ffef 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 8001872:	4601      	mov	r1, r0
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800187c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001880:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	603b      	str	r3, [r7, #0]
  return(result);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	fab3 f383 	clz	r3, r3
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001896:	5cd3      	ldrb	r3, [r2, r3]
 8001898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	080034f0 	.word	0x080034f0

080018ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80018b2:	f7ff ffcd 	bl	8001850 <HAL_RCC_GetHCLKFreq>
 80018b6:	4601      	mov	r1, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80018c0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018c4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	603b      	str	r3, [r7, #0]
  return(result);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	080034f0 	.word	0x080034f0

080018f0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{  
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_WAKEUPTIMER_GET_IT(hrtc, RTC_IT_WUT))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001902:	2b00      	cmp	r3, #0
 8001904:	d012      	beq.n	800192c <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_WUT) != (uint32_t)RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00b      	beq.n	800192c <HAL_RTCEx_WakeUpTimerIRQHandler+0x3c>
    {
      /* WAKEUPTIMER callback */ 
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f001 fa9d 	bl	8002e54 <HAL_RTCEx_WakeUpTimerEventCallback>
      
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	68d2      	ldr	r2, [r2, #12]
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800192a:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_RTCEx_WakeUpTimerIRQHandler+0x54>)
 800192e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001932:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	775a      	strb	r2, [r3, #29]
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40013c00 	.word	0x40013c00

08001948 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10e      	bne.n	8001988 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	f003 0301 	and.w	r3, r3, #1
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001970:	2b00      	cmp	r3, #0
 8001972:	d009      	beq.n	8001988 <HAL_SPI_IRQHandler+0x40>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	2b00      	cmp	r3, #0
 800197c:	d004      	beq.n	8001988 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
    return;
 8001986:	e0b1      	b.n	8001aec <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_SPI_IRQHandler+0x5e>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	4798      	blx	r3
    return;
 80019a4:	e0a2      	b.n	8001aec <HAL_SPI_IRQHandler+0x1a4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f403 73b0 	and.w	r3, r3, #352	; 0x160
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 809d 	beq.w	8001aec <HAL_SPI_IRQHandler+0x1a4>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0320 	and.w	r3, r3, #32
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8097 	beq.w	8001aec <HAL_SPI_IRQHandler+0x1a4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_SPI_IRQHandler+0xc8>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d011      	beq.n	80019f8 <HAL_SPI_IRQHandler+0xb0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d8:	f043 0204 	orr.w	r2, r3, #4
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	e00b      	b.n	8001a10 <HAL_SPI_IRQHandler+0xc8>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
        return;
 8001a0e:	e06d      	b.n	8001aec <HAL_SPI_IRQHandler+0x1a4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d014      	beq.n	8001a44 <HAL_SPI_IRQHandler+0xfc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1e:	f043 0201 	orr.w	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if((itflag & SPI_FLAG_FRE) != RESET)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00c      	beq.n	8001a68 <HAL_SPI_IRQHandler+0x120>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	f043 0208 	orr.w	r2, r3, #8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d03c      	beq.n	8001aea <HAL_SPI_IRQHandler+0x1a2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	6852      	ldr	r2, [r2, #4]
 8001a7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a7e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d104      	bne.n	8001a9c <HAL_SPI_IRQHandler+0x154>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d022      	beq.n	8001ae2 <HAL_SPI_IRQHandler+0x19a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	6852      	ldr	r2, [r2, #4]
 8001aa6:	f022 0203 	bic.w	r2, r2, #3
 8001aaa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_SPI_IRQHandler+0x17e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_SPI_IRQHandler+0x1ac>)
 8001aba:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fe85 	bl	80007d0 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00c      	beq.n	8001ae8 <HAL_SPI_IRQHandler+0x1a0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_SPI_IRQHandler+0x1ac>)
 8001ad4:	651a      	str	r2, [r3, #80]	; 0x50
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fe78 	bl	80007d0 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8001ae0:	e002      	b.n	8001ae8 <HAL_SPI_IRQHandler+0x1a0>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f808 	bl	8001af8 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
  }
}
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	08001b0d 	.word	0x08001b0d

08001af8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 __weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	86da      	strh	r2, [r3, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7ff ffe6 	bl	8001af8 <HAL_SPI_ErrorCallback>
}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e03f      	b.n	8001bc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f001 fa82 	bl	8003064 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2224      	movs	r2, #36	; 0x24
 8001b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	68d2      	ldr	r2, [r2, #12]
 8001b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b76:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fd03 	bl	8002584 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	6912      	ldr	r2, [r2, #16]
 8001b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	6952      	ldr	r2, [r2, #20]
 8001b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b9c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	68d2      	ldr	r2, [r2, #12]
 8001ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bac:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b088      	sub	sp, #32
 8001bd2:	af02      	add	r7, sp, #8
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	f040 8082 	bne.w	8001cf4 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_UART_Transmit+0x2e>
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e07a      	b.n	8001cf6 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_UART_Transmit+0x40>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e073      	b.n	8001cf6 <HAL_UART_Transmit+0x128>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2221      	movs	r2, #33	; 0x21
 8001c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c24:	f7fe fb8a 	bl	800033c <HAL_GetTick>
 8001c28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	88fa      	ldrh	r2, [r7, #6]
 8001c2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	88fa      	ldrh	r2, [r7, #6]
 8001c34:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001c36:	e041      	b.n	8001cbc <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4e:	d121      	bne.n	8001c94 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2200      	movs	r2, #0
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fb19 	bl	8002292 <UART_WaitOnFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e045      	b.n	8001cf6 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	8812      	ldrh	r2, [r2, #0]
 8001c76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c7a:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d103      	bne.n	8001c8c <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	3302      	adds	r3, #2
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	e017      	b.n	8001cbc <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	e013      	b.n	8001cbc <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2180      	movs	r1, #128	; 0x80
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 faf7 	bl	8002292 <UART_WaitOnFlagUntilTimeout>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e023      	b.n	8001cf6 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1c59      	adds	r1, r3, #1
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1b8      	bne.n	8001c38 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2140      	movs	r1, #64	; 0x40
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 fade 	bl	8002292 <UART_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e00a      	b.n	8001cf6 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d153      	bne.n	8001dc2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_UART_Transmit_DMA+0x26>
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e04c      	b.n	8001dc4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_UART_Transmit_DMA+0x38>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e045      	b.n	8001dc4 <HAL_UART_Transmit_DMA+0xc4>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	88fa      	ldrh	r2, [r7, #6]
 8001d4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	88fa      	ldrh	r2, [r7, #6]
 8001d50:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2221      	movs	r2, #33	; 0x21
 8001d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_UART_Transmit_DMA+0xcc>)
 8001d66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <HAL_UART_Transmit_DMA+0xd0>)
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_UART_Transmit_DMA+0xd4>)
 8001d76:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3304      	adds	r3, #4
 8001d94:	461a      	mov	r2, r3
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	f7fe fcba 	bl	8000710 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001da4:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	6952      	ldr	r2, [r2, #20]
 8001db8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dbc:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	0800210d 	.word	0x0800210d
 8001dd0:	0800215f 	.word	0x0800215f
 8001dd4:	080021ff 	.word	0x080021ff

08001dd8 <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	4613      	mov	r3, r2
 8001de4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d166      	bne.n	8001ec0 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_UART_Receive_DMA+0x26>
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e05f      	b.n	8001ec2 <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_UART_Receive_DMA+0x38>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e058      	b.n	8001ec2 <HAL_UART_Receive_DMA+0xea>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2222      	movs	r2, #34	; 0x22
 8001e2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	4a25      	ldr	r2, [pc, #148]	; (8001ecc <HAL_UART_Receive_DMA+0xf4>)
 8001e38:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3e:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <HAL_UART_Receive_DMA+0xf8>)
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e46:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <HAL_UART_Receive_DMA+0xfc>)
 8001e48:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4e:	2200      	movs	r2, #0
 8001e50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3304      	adds	r3, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	f7fe fc51 	bl	8000710 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	68d2      	ldr	r2, [r2, #12]
 8001e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e9a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	6952      	ldr	r2, [r2, #20]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	6952      	ldr	r2, [r2, #20]
 8001eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eba:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e000      	b.n	8001ec2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8001ec0:	2302      	movs	r3, #2
  }
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	0800217b 	.word	0x0800217b
 8001ed0:	080021e3 	.word	0x080021e3
 8001ed4:	080021ff 	.word	0x080021ff

08001ed8 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <HAL_UART_IRQHandler+0x52>
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fab4 	bl	8002490 <UART_Receive_IT>
      return;
 8001f28:	e0cc      	b.n	80020c4 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80ab 	beq.w	8002088 <HAL_UART_IRQHandler+0x1b0>
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <HAL_UART_IRQHandler+0x70>
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80a0 	beq.w	8002088 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_UART_IRQHandler+0x90>
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_UART_IRQHandler+0xb0>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	f043 0202 	orr.w	r2, r3, #2
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <HAL_UART_IRQHandler+0xd0>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa0:	f043 0204 	orr.w	r2, r3, #4
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_UART_IRQHandler+0xf0>
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	f043 0208 	orr.w	r2, r3, #8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d078      	beq.n	80020c2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_UART_IRQHandler+0x112>
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fa53 	bl	8002490 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <HAL_UART_IRQHandler+0x13a>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d031      	beq.n	8002076 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f99d 	bl	8002352 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d023      	beq.n	800206e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	6952      	ldr	r2, [r2, #20]
 8002030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002034:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	2b00      	cmp	r3, #0
 800203c:	d013      	beq.n	8002066 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	4a22      	ldr	r2, [pc, #136]	; (80020cc <HAL_UART_IRQHandler+0x1f4>)
 8002044:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fbc0 	bl	80007d0 <HAL_DMA_Abort_IT>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002060:	4610      	mov	r0, r2
 8002062:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002064:	e00e      	b.n	8002084 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f846 	bl	80020f8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800206c:	e00a      	b.n	8002084 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f842 	bl	80020f8 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002074:	e006      	b.n	8002084 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f83e 	bl	80020f8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002082:	e01e      	b.n	80020c2 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002084:	bf00      	nop
    return;
 8002086:	e01c      	b.n	80020c2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_UART_IRQHandler+0x1cc>
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f98a 	bl	80023b6 <UART_Transmit_IT>
    return;
 80020a2:	e00f      	b.n	80020c4 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_UART_IRQHandler+0x1ec>
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f9d1 	bl	8002460 <UART_EndTransmit_IT>
    return;
 80020be:	bf00      	nop
 80020c0:	e000      	b.n	80020c4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80020c2:	bf00      	nop
  }
}
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	0800238f 	.word	0x0800238f

080020d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d113      	bne.n	8002150 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	6952      	ldr	r2, [r2, #20]
 8002138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800213c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	68d2      	ldr	r2, [r2, #12]
 8002148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800214c:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 800214e:	e002      	b.n	8002156 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fd19 	bl	8002b88 <HAL_UART_TxCpltCallback>
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7ff ffaf 	bl	80020d0 <HAL_UART_TxHalfCpltCallback>
}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d11e      	bne.n	80021d4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	68d2      	ldr	r2, [r2, #12]
 80021a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021aa:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	6952      	ldr	r2, [r2, #20]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	6952      	ldr	r2, [r2, #20]
 80021c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ca:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fd0f 	bl	8002bf8 <HAL_UART_RxCpltCallback>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff ff77 	bl	80020e4 <HAL_UART_RxHalfCpltCallback>
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221a:	2b00      	cmp	r3, #0
 800221c:	bf14      	ite	ne
 800221e:	2301      	movne	r3, #1
 8002220:	2300      	moveq	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b21      	cmp	r3, #33	; 0x21
 8002230:	d108      	bne.n	8002244 <UART_DMAError+0x46>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2200      	movs	r2, #0
 800223c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800223e:	68b8      	ldr	r0, [r7, #8]
 8002240:	f000 f871 	bl	8002326 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	bf14      	ite	ne
 8002252:	2301      	movne	r3, #1
 8002254:	2300      	moveq	r3, #0
 8002256:	b2db      	uxtb	r3, r3
 8002258:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b22      	cmp	r3, #34	; 0x22
 8002264:	d108      	bne.n	8002278 <UART_DMAError+0x7a>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2200      	movs	r2, #0
 8002270:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002272:	68b8      	ldr	r0, [r7, #8]
 8002274:	f000 f86d 	bl	8002352 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	f043 0210 	orr.w	r2, r3, #16
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002284:	68b8      	ldr	r0, [r7, #8]
 8002286:	f7ff ff37 	bl	80020f8 <HAL_UART_ErrorCallback>
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80022a2:	e02c      	b.n	80022fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022aa:	d028      	beq.n	80022fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d007      	beq.n	80022c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80022b2:	f7fe f843 	bl	800033c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	1ad2      	subs	r2, r2, r3
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d91d      	bls.n	80022fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	68d2      	ldr	r2, [r2, #12]
 80022cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	6952      	ldr	r2, [r2, #20]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e00f      	b.n	800231e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	401a      	ands	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	429a      	cmp	r2, r3
 800230c:	bf0c      	ite	eq
 800230e:	2301      	moveq	r3, #1
 8002310:	2300      	movne	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	429a      	cmp	r2, r3
 800231a:	d0c3      	beq.n	80022a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	68d2      	ldr	r2, [r2, #12]
 8002338:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800233c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	68d2      	ldr	r2, [r2, #12]
 8002364:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002368:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	6952      	ldr	r2, [r2, #20]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff fea5 	bl	80020f8 <HAL_UART_ErrorCallback>
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b21      	cmp	r3, #33	; 0x21
 80023c8:	d143      	bne.n	8002452 <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d2:	d119      	bne.n	8002408 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	8812      	ldrh	r2, [r2, #0]
 80023e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e6:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	1c9a      	adds	r2, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	621a      	str	r2, [r3, #32]
 80023fa:	e00e      	b.n	800241a <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	621a      	str	r2, [r3, #32]
 8002406:	e008      	b.n	800241a <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	1c58      	adds	r0, r3, #1
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	6208      	str	r0, [r1, #32]
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29b      	uxth	r3, r3
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4619      	mov	r1, r3
 8002428:	84d1      	strh	r1, [r2, #38]	; 0x26
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10f      	bne.n	800244e <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	68d2      	ldr	r2, [r2, #12]
 8002438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800243c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	68d2      	ldr	r2, [r2, #12]
 8002448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800244c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e000      	b.n	8002454 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002452:	2302      	movs	r3, #2
  }
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	68d2      	ldr	r2, [r2, #12]
 8002472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002476:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fb81 	bl	8002b88 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b22      	cmp	r3, #34	; 0x22
 80024a2:	d169      	bne.n	8002578 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ac:	d123      	bne.n	80024f6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10e      	bne.n	80024da <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	1c9a      	adds	r2, r3, #2
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
 80024d8:	e029      	b.n	800252e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	629a      	str	r2, [r3, #40]	; 0x28
 80024f4:	e01b      	b.n	800252e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10a      	bne.n	8002514 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	1c59      	adds	r1, r3, #1
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6291      	str	r1, [r2, #40]	; 0x28
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	6852      	ldr	r2, [r2, #4]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e00c      	b.n	800252e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	1c59      	adds	r1, r3, #1
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6291      	str	r1, [r2, #40]	; 0x28
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	6852      	ldr	r2, [r2, #4]
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29b      	uxth	r3, r3
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4619      	mov	r1, r3
 800253c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800253e:	2b00      	cmp	r3, #0
 8002540:	d118      	bne.n	8002574 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	68d2      	ldr	r2, [r2, #12]
 800254c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002550:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	6952      	ldr	r2, [r2, #20]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fb44 	bl	8002bf8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e002      	b.n	800257a <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002578:	2302      	movs	r3, #2
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800259e:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025c0:	f023 030c 	bic.w	r3, r3, #12
 80025c4:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4313      	orrs	r3, r2
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f8:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002614:	f040 80e4 	bne.w	80027e0 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4aab      	ldr	r2, [pc, #684]	; (80028cc <UART_SetConfig+0x348>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <UART_SetConfig+0xa8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4aaa      	ldr	r2, [pc, #680]	; (80028d0 <UART_SetConfig+0x34c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d16c      	bne.n	8002706 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681c      	ldr	r4, [r3, #0]
 8002630:	f7ff f93c 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 8002634:	4602      	mov	r2, r0
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	009a      	lsls	r2, r3, #2
 800263e:	441a      	add	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	4aa2      	ldr	r2, [pc, #648]	; (80028d4 <UART_SetConfig+0x350>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	011d      	lsls	r5, r3, #4
 8002654:	f7ff f92a 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 8002658:	4602      	mov	r2, r0
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	009a      	lsls	r2, r3, #2
 8002662:	441a      	add	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	fbb2 f6f3 	udiv	r6, r2, r3
 800266e:	f7ff f91d 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 8002672:	4602      	mov	r2, r0
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	009a      	lsls	r2, r3, #2
 800267c:	441a      	add	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	4a92      	ldr	r2, [pc, #584]	; (80028d4 <UART_SetConfig+0x350>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2264      	movs	r2, #100	; 0x64
 8002692:	fb02 f303 	mul.w	r3, r2, r3
 8002696:	1af3      	subs	r3, r6, r3
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	3332      	adds	r3, #50	; 0x32
 800269c:	4a8d      	ldr	r2, [pc, #564]	; (80028d4 <UART_SetConfig+0x350>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026aa:	441d      	add	r5, r3
 80026ac:	f7ff f8fe 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009a      	lsls	r2, r3, #2
 80026ba:	441a      	add	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80026c6:	f7ff f8f1 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	009a      	lsls	r2, r3, #2
 80026d4:	441a      	add	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	4a7c      	ldr	r2, [pc, #496]	; (80028d4 <UART_SetConfig+0x350>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2264      	movs	r2, #100	; 0x64
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	1af3      	subs	r3, r6, r3
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	3332      	adds	r3, #50	; 0x32
 80026f4:	4a77      	ldr	r2, [pc, #476]	; (80028d4 <UART_SetConfig+0x350>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	442b      	add	r3, r5
 8002702:	60a3      	str	r3, [r4, #8]
 8002704:	e154      	b.n	80029b0 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681c      	ldr	r4, [r3, #0]
 800270a:	f7ff f8ad 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 800270e:	4602      	mov	r2, r0
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	009a      	lsls	r2, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	4a6b      	ldr	r2, [pc, #428]	; (80028d4 <UART_SetConfig+0x350>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	011d      	lsls	r5, r3, #4
 800272e:	f7ff f89b 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 8002732:	4602      	mov	r2, r0
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	009a      	lsls	r2, r3, #2
 800273c:	441a      	add	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fbb2 f6f3 	udiv	r6, r2, r3
 8002748:	f7ff f88e 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 800274c:	4602      	mov	r2, r0
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	009a      	lsls	r2, r3, #2
 8002756:	441a      	add	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	4a5c      	ldr	r2, [pc, #368]	; (80028d4 <UART_SetConfig+0x350>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	2264      	movs	r2, #100	; 0x64
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	1af3      	subs	r3, r6, r3
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	3332      	adds	r3, #50	; 0x32
 8002776:	4a57      	ldr	r2, [pc, #348]	; (80028d4 <UART_SetConfig+0x350>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002784:	441d      	add	r5, r3
 8002786:	f7ff f86f 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 800278a:	4602      	mov	r2, r0
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009a      	lsls	r2, r3, #2
 8002794:	441a      	add	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fbb2 f6f3 	udiv	r6, r2, r3
 80027a0:	f7ff f862 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	009a      	lsls	r2, r3, #2
 80027ae:	441a      	add	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ba:	4a46      	ldr	r2, [pc, #280]	; (80028d4 <UART_SetConfig+0x350>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	2264      	movs	r2, #100	; 0x64
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	1af3      	subs	r3, r6, r3
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	3332      	adds	r3, #50	; 0x32
 80027ce:	4a41      	ldr	r2, [pc, #260]	; (80028d4 <UART_SetConfig+0x350>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	442b      	add	r3, r5
 80027dc:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80027de:	e0e7      	b.n	80029b0 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a39      	ldr	r2, [pc, #228]	; (80028cc <UART_SetConfig+0x348>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <UART_SetConfig+0x270>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a38      	ldr	r2, [pc, #224]	; (80028d0 <UART_SetConfig+0x34c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d171      	bne.n	80028d8 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681c      	ldr	r4, [r3, #0]
 80027f8:	f7ff f858 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009a      	lsls	r2, r3, #2
 8002806:	441a      	add	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	4a30      	ldr	r2, [pc, #192]	; (80028d4 <UART_SetConfig+0x350>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	011d      	lsls	r5, r3, #4
 800281c:	f7ff f846 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 8002820:	4602      	mov	r2, r0
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	009a      	lsls	r2, r3, #2
 800282a:	441a      	add	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	fbb2 f6f3 	udiv	r6, r2, r3
 8002836:	f7ff f839 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 800283a:	4602      	mov	r2, r0
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009a      	lsls	r2, r3, #2
 8002844:	441a      	add	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	4a20      	ldr	r2, [pc, #128]	; (80028d4 <UART_SetConfig+0x350>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	2264      	movs	r2, #100	; 0x64
 800285a:	fb02 f303 	mul.w	r3, r2, r3
 800285e:	1af3      	subs	r3, r6, r3
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	3332      	adds	r3, #50	; 0x32
 8002864:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <UART_SetConfig+0x350>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002870:	441d      	add	r5, r3
 8002872:	f7ff f81b 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 8002876:	4602      	mov	r2, r0
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	009a      	lsls	r2, r3, #2
 8002880:	441a      	add	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	fbb2 f6f3 	udiv	r6, r2, r3
 800288c:	f7ff f80e 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 8002890:	4602      	mov	r2, r0
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	009a      	lsls	r2, r3, #2
 800289a:	441a      	add	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <UART_SetConfig+0x350>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	2264      	movs	r2, #100	; 0x64
 80028b0:	fb02 f303 	mul.w	r3, r2, r3
 80028b4:	1af3      	subs	r3, r6, r3
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	3332      	adds	r3, #50	; 0x32
 80028ba:	4a06      	ldr	r2, [pc, #24]	; (80028d4 <UART_SetConfig+0x350>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	442b      	add	r3, r5
 80028c8:	60a3      	str	r3, [r4, #8]
 80028ca:	e071      	b.n	80029b0 <UART_SetConfig+0x42c>
 80028cc:	40011000 	.word	0x40011000
 80028d0:	40011400 	.word	0x40011400
 80028d4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681c      	ldr	r4, [r3, #0]
 80028dc:	f7fe ffc4 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	009a      	lsls	r2, r3, #2
 80028ea:	441a      	add	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	4a30      	ldr	r2, [pc, #192]	; (80029b8 <UART_SetConfig+0x434>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	011d      	lsls	r5, r3, #4
 8002900:	f7fe ffb2 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 8002904:	4602      	mov	r2, r0
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	009a      	lsls	r2, r3, #2
 800290e:	441a      	add	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	fbb2 f6f3 	udiv	r6, r2, r3
 800291a:	f7fe ffa5 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 800291e:	4602      	mov	r2, r0
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	009a      	lsls	r2, r3, #2
 8002928:	441a      	add	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <UART_SetConfig+0x434>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2264      	movs	r2, #100	; 0x64
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	1af3      	subs	r3, r6, r3
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	3332      	adds	r3, #50	; 0x32
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <UART_SetConfig+0x434>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002954:	441d      	add	r5, r3
 8002956:	f7fe ff87 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 800295a:	4602      	mov	r2, r0
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009a      	lsls	r2, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002970:	f7fe ff7a 	bl	8001868 <HAL_RCC_GetPCLK1Freq>
 8002974:	4602      	mov	r2, r0
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	009a      	lsls	r2, r3, #2
 800297e:	441a      	add	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	fbb2 f3f3 	udiv	r3, r2, r3
 800298a:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <UART_SetConfig+0x434>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	2264      	movs	r2, #100	; 0x64
 8002994:	fb02 f303 	mul.w	r3, r2, r3
 8002998:	1af3      	subs	r3, r6, r3
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	3332      	adds	r3, #50	; 0x32
 800299e:	4a06      	ldr	r2, [pc, #24]	; (80029b8 <UART_SetConfig+0x434>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	442b      	add	r3, r5
 80029ac:	60a3      	str	r3, [r4, #8]
}
 80029ae:	e7ff      	b.n	80029b0 <UART_SetConfig+0x42c>
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b8:	51eb851f 	.word	0x51eb851f

080029bc <send_ATCommand_DMA>:
	if (HAL_UART_Transmit(&huart1, (uint8_t *) cmd, cmd_len, esp_timeout) != HAL_OK) {
//		imprimir("Error");
	}
}

void send_ATCommand_DMA(char *cmd) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	uint16_t cmd_len = strlen(cmd);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7fd fc07 	bl	80001d8 <strlen>
 80029ca:	4603      	mov	r3, r0
 80029cc:	81fb      	strh	r3, [r7, #14]

	if (HAL_UART_Transmit_DMA(&huart1, (uint8_t *) cmd, cmd_len) != HAL_OK) {
 80029ce:	89fb      	ldrh	r3, [r7, #14]
 80029d0:	461a      	mov	r2, r3
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	480a      	ldr	r0, [pc, #40]	; (8002a00 <send_ATCommand_DMA+0x44>)
 80029d6:	f7ff f993 	bl	8001d00 <HAL_UART_Transmit_DMA>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <send_ATCommand_DMA+0x2a>
		imprimir("Error Send");
 80029e0:	4808      	ldr	r0, [pc, #32]	; (8002a04 <send_ATCommand_DMA+0x48>)
 80029e2:	f000 fa91 	bl	8002f08 <imprimir>
	}
	while (Uart1Ready != SET) {}
 80029e6:	bf00      	nop
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <send_ATCommand_DMA+0x4c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d1fa      	bne.n	80029e8 <send_ATCommand_DMA+0x2c>
	Uart1Ready = RESET;
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <send_ATCommand_DMA+0x4c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200133a4 	.word	0x200133a4
 8002a04:	08003470 	.word	0x08003470
 8002a08:	2000009d 	.word	0x2000009d

08002a0c <read_buffer>:
//}

uint8_t RXBUFFERSIZE = 5;
uint8_t aRxBuffer[5];

void read_buffer() {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
	while (HAL_UART_Receive_DMA(&huart1, (uint8_t *) aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 8002a10:	e002      	b.n	8002a18 <read_buffer+0xc>
	{
		imprimir("Error Read");
 8002a12:	4809      	ldr	r0, [pc, #36]	; (8002a38 <read_buffer+0x2c>)
 8002a14:	f000 fa78 	bl	8002f08 <imprimir>
	while (HAL_UART_Receive_DMA(&huart1, (uint8_t *) aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <read_buffer+0x30>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <read_buffer+0x34>)
 8002a22:	4808      	ldr	r0, [pc, #32]	; (8002a44 <read_buffer+0x38>)
 8002a24:	f7ff f9d8 	bl	8001dd8 <HAL_UART_Receive_DMA>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f1      	bne.n	8002a12 <read_buffer+0x6>
	}
//	while (Uart1Ready != SET) {}
//	Uart1Ready = RESET;
	imprimir(aRxBuffer);
 8002a2e:	4804      	ldr	r0, [pc, #16]	; (8002a40 <read_buffer+0x34>)
 8002a30:	f000 fa6a 	bl	8002f08 <imprimir>
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	0800347c 	.word	0x0800347c
 8002a3c:	20000004 	.word	0x20000004
 8002a40:	200000a8 	.word	0x200000a8
 8002a44:	200133a4 	.word	0x200133a4

08002a48 <leerBuffer>:

void leerBuffer()
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
	imprimir(aRxBuffer);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <leerBuffer+0x10>)
 8002a4e:	f000 fa5b 	bl	8002f08 <imprimir>
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200000a8 	.word	0x200000a8

08002a5c <inicializar_gps>:

__IO ITStatus UartReady = RESET;
__IO ITStatus Uart1Ready = RESET;

void inicializar_gps(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_DMA(&huart6, (uint8_t *) parsing, 80) != HAL_OK) {
 8002a60:	2250      	movs	r2, #80	; 0x50
 8002a62:	4930      	ldr	r1, [pc, #192]	; (8002b24 <inicializar_gps+0xc8>)
 8002a64:	4830      	ldr	r0, [pc, #192]	; (8002b28 <inicializar_gps+0xcc>)
 8002a66:	f7ff f9b7 	bl	8001dd8 <HAL_UART_Receive_DMA>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <inicializar_gps+0x18>
		Error_Handler();
 8002a70:	f000 fabc 	bl	8002fec <Error_Handler>
	}
	while (UartReady != SET) {}
 8002a74:	bf00      	nop
 8002a76:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <inicializar_gps+0xd0>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d1fa      	bne.n	8002a76 <inicializar_gps+0x1a>
	UartReady = RESET;
 8002a80:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <inicializar_gps+0xd0>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GSV, sizeof(deinit_GSV)) != HAL_OK) {
 8002a86:	221a      	movs	r2, #26
 8002a88:	4929      	ldr	r1, [pc, #164]	; (8002b30 <inicializar_gps+0xd4>)
 8002a8a:	4827      	ldr	r0, [pc, #156]	; (8002b28 <inicializar_gps+0xcc>)
 8002a8c:	f7ff f938 	bl	8001d00 <HAL_UART_Transmit_DMA>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <inicializar_gps+0x3e>
		Error_Handler();
 8002a96:	f000 faa9 	bl	8002fec <Error_Handler>
	}
	while (UartReady != SET) {}
 8002a9a:	bf00      	nop
 8002a9c:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <inicializar_gps+0xd0>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d1fa      	bne.n	8002a9c <inicializar_gps+0x40>
	UartReady = RESET;
 8002aa6:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <inicializar_gps+0xd0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GSA, sizeof(deinit_GSA)) != HAL_OK) {
 8002aac:	221a      	movs	r2, #26
 8002aae:	4921      	ldr	r1, [pc, #132]	; (8002b34 <inicializar_gps+0xd8>)
 8002ab0:	481d      	ldr	r0, [pc, #116]	; (8002b28 <inicializar_gps+0xcc>)
 8002ab2:	f7ff f925 	bl	8001d00 <HAL_UART_Transmit_DMA>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <inicializar_gps+0x64>
		Error_Handler();
 8002abc:	f000 fa96 	bl	8002fec <Error_Handler>
	}
	while (UartReady != SET) {}
 8002ac0:	bf00      	nop
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <inicializar_gps+0xd0>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d1fa      	bne.n	8002ac2 <inicializar_gps+0x66>
	UartReady = RESET;
 8002acc:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <inicializar_gps+0xd0>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GGA, sizeof(deinit_GGA)) != HAL_OK) {
 8002ad2:	221a      	movs	r2, #26
 8002ad4:	4918      	ldr	r1, [pc, #96]	; (8002b38 <inicializar_gps+0xdc>)
 8002ad6:	4814      	ldr	r0, [pc, #80]	; (8002b28 <inicializar_gps+0xcc>)
 8002ad8:	f7ff f912 	bl	8001d00 <HAL_UART_Transmit_DMA>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <inicializar_gps+0x8a>
		Error_Handler();
 8002ae2:	f000 fa83 	bl	8002fec <Error_Handler>
	}
	while (UartReady != SET) {}
 8002ae6:	bf00      	nop
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <inicializar_gps+0xd0>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d1fa      	bne.n	8002ae8 <inicializar_gps+0x8c>
	UartReady = RESET;
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <inicializar_gps+0xd0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) init_RMC, sizeof(init_RMC)) != HAL_OK) {
 8002af8:	221a      	movs	r2, #26
 8002afa:	4910      	ldr	r1, [pc, #64]	; (8002b3c <inicializar_gps+0xe0>)
 8002afc:	480a      	ldr	r0, [pc, #40]	; (8002b28 <inicializar_gps+0xcc>)
 8002afe:	f7ff f8ff 	bl	8001d00 <HAL_UART_Transmit_DMA>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <inicializar_gps+0xb0>
		Error_Handler();
 8002b08:	f000 fa70 	bl	8002fec <Error_Handler>
	}
	while (UartReady != SET) {}
 8002b0c:	bf00      	nop
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <inicializar_gps+0xd0>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d1fa      	bne.n	8002b0e <inicializar_gps+0xb2>
	UartReady = RESET;
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <inicializar_gps+0xd0>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20013224 	.word	0x20013224
 8002b28:	200133f8 	.word	0x200133f8
 8002b2c:	2000009c 	.word	0x2000009c
 8002b30:	20000040 	.word	0x20000040
 8002b34:	20000024 	.word	0x20000024
 8002b38:	20000008 	.word	0x20000008
 8002b3c:	2000005c 	.word	0x2000005c

08002b40 <guardar_coordenadas>:
  * @brief  Las tramas obtenidas se guardan en un struct
  * @param  None
  * @retval None
  */
void guardar_coordenadas(char buffer[])
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	strcpy(mibuffer[c].datos, buffer);
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <guardar_coordenadas+0x40>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	22c8      	movs	r2, #200	; 0xc8
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <guardar_coordenadas+0x44>)
 8002b54:	4413      	add	r3, r2
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fc75 	bl	8003448 <strcpy>
	c++;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <guardar_coordenadas+0x40>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a06      	ldr	r2, [pc, #24]	; (8002b80 <guardar_coordenadas+0x40>)
 8002b66:	6013      	str	r3, [r2, #0]
	if (c == 199)
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <guardar_coordenadas+0x40>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2bc7      	cmp	r3, #199	; 0xc7
 8002b6e:	d102      	bne.n	8002b76 <guardar_coordenadas+0x36>
	{
		c = 0;
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <guardar_coordenadas+0x40>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
	}
//	obtener_coordenadas();
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000098 	.word	0x20000098
 8002b84:	20009560 	.word	0x20009560

08002b88 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
 {
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <HAL_UART_TxCpltCallback+0x58>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d10b      	bne.n	8002bb2 <HAL_UART_TxCpltCallback+0x2a>
		(&huart1)->gState = HAL_UART_STATE_READY;
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_UART_TxCpltCallback+0x5c>)
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		Uart1Ready = SET;
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_UART_TxCpltCallback+0x60>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
		(&huart6)->RxState = HAL_UART_STATE_READY;
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <HAL_UART_TxCpltCallback+0x64>)
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	else if (UartHandle->Instance == USART6) {
		(&huart6)->gState = HAL_UART_STATE_READY;
		UartReady = SET;
		(&huart6)->RxState = HAL_UART_STATE_READY;
	}
}
 8002bb0:	e00f      	b.n	8002bd2 <HAL_UART_TxCpltCallback+0x4a>
	else if (UartHandle->Instance == USART6) {
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <HAL_UART_TxCpltCallback+0x68>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d10a      	bne.n	8002bd2 <HAL_UART_TxCpltCallback+0x4a>
		(&huart6)->gState = HAL_UART_STATE_READY;
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_UART_TxCpltCallback+0x64>)
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		UartReady = SET;
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_UART_TxCpltCallback+0x6c>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
		(&huart6)->RxState = HAL_UART_STATE_READY;
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_UART_TxCpltCallback+0x64>)
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40011000 	.word	0x40011000
 8002be4:	200133a4 	.word	0x200133a4
 8002be8:	2000009d 	.word	0x2000009d
 8002bec:	200133f8 	.word	0x200133f8
 8002bf0:	40011400 	.word	0x40011400
 8002bf4:	2000009c 	.word	0x2000009c

08002bf8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1) {
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_UART_RxCpltCallback+0x48>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d107      	bne.n	8002c1a <HAL_UART_RxCpltCallback+0x22>
		(&huart1)->RxState = HAL_UART_STATE_READY;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_UART_RxCpltCallback+0x4c>)
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		Uart1Ready = SET;
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <HAL_UART_RxCpltCallback+0x50>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
		(&huart6)->RxState = HAL_UART_STATE_READY;
		//imprimir(parsing);
		guardar_coordenadas(parsing);
		UartReady = SET;
	}
}
 8002c18:	e00e      	b.n	8002c38 <HAL_UART_RxCpltCallback+0x40>
	else if (UartHandle->Instance == USART6) {
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <HAL_UART_RxCpltCallback+0x54>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d109      	bne.n	8002c38 <HAL_UART_RxCpltCallback+0x40>
		(&huart6)->RxState = HAL_UART_STATE_READY;
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_UART_RxCpltCallback+0x58>)
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		guardar_coordenadas(parsing);
 8002c2c:	4809      	ldr	r0, [pc, #36]	; (8002c54 <HAL_UART_RxCpltCallback+0x5c>)
 8002c2e:	f7ff ff87 	bl	8002b40 <guardar_coordenadas>
		UartReady = SET;
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_UART_RxCpltCallback+0x60>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40011000 	.word	0x40011000
 8002c44:	200133a4 	.word	0x200133a4
 8002c48:	2000009d 	.word	0x2000009d
 8002c4c:	40011400 	.word	0x40011400
 8002c50:	200133f8 	.word	0x200133f8
 8002c54:	20013224 	.word	0x20013224
 8002c58:	2000009c 	.word	0x2000009c

08002c5c <GPIO_Init>:
RTC_HandleTypeDef RtcHandle;
WWDG_HandleTypeDef hwwdg;

/** Pinout Configuration
 */
void GPIO_Init(void) {
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__GPIOA_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	4a25      	ldr	r2, [pc, #148]	; (8002cfc <GPIO_Init+0xa0>)
 8002c68:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <GPIO_Init+0xa0>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <GPIO_Init+0xa0>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]
	__GPIOB_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <GPIO_Init+0xa0>)
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <GPIO_Init+0xa0>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <GPIO_Init+0xa0>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	693b      	ldr	r3, [r7, #16]
	__GPIOC_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <GPIO_Init+0xa0>)
 8002ca0:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <GPIO_Init+0xa0>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	f043 0304 	orr.w	r3, r3, #4
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <GPIO_Init+0xa0>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
	__GPIOD_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <GPIO_Init+0xa0>)
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <GPIO_Init+0xa0>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	f043 0308 	orr.w	r3, r3, #8
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <GPIO_Init+0xa0>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
	__GPIOE_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <GPIO_Init+0xa0>)
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <GPIO_Init+0xa0>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f043 0310 	orr.w	r3, r3, #16
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <GPIO_Init+0xa0>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800

08002d00 <UART1_Init>:

	}
}

/* USART1 init function */
void UART1_Init(void) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0

	huart1.Instance = USART1;
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <UART1_Init+0x40>)
 8002d06:	4a0f      	ldr	r2, [pc, #60]	; (8002d44 <UART1_Init+0x44>)
 8002d08:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <UART1_Init+0x40>)
 8002d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d10:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <UART1_Init+0x40>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <UART1_Init+0x40>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <UART1_Init+0x40>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <UART1_Init+0x40>)
 8002d26:	220c      	movs	r2, #12
 8002d28:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <UART1_Init+0x40>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <UART1_Init+0x40>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart1);
 8002d36:	4802      	ldr	r0, [pc, #8]	; (8002d40 <UART1_Init+0x40>)
 8002d38:	f7fe fefc 	bl	8001b34 <HAL_UART_Init>

}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	200133a4 	.word	0x200133a4
 8002d44:	40011000 	.word	0x40011000

08002d48 <UART2_Init>:

/* USART2 init function */
void UART2_Init(void) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0

	huart2.Instance = USART2;
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <UART2_Init+0x40>)
 8002d4e:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <UART2_Init+0x44>)
 8002d50:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <UART2_Init+0x40>)
 8002d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d58:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <UART2_Init+0x40>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002d60:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <UART2_Init+0x40>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002d66:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <UART2_Init+0x40>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <UART2_Init+0x40>)
 8002d6e:	220c      	movs	r2, #12
 8002d70:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <UART2_Init+0x40>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <UART2_Init+0x40>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart2);
 8002d7e:	4802      	ldr	r0, [pc, #8]	; (8002d88 <UART2_Init+0x40>)
 8002d80:	f7fe fed8 	bl	8001b34 <HAL_UART_Init>

}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20013490 	.word	0x20013490
 8002d8c:	40004400 	.word	0x40004400

08002d90 <UART6_Init>:

/* USART1 init function */
void UART6_Init(void) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0

	huart6.Instance = USART6;
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <UART6_Init+0x40>)
 8002d96:	4a0f      	ldr	r2, [pc, #60]	; (8002dd4 <UART6_Init+0x44>)
 8002d98:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <UART6_Init+0x40>)
 8002d9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002da0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <UART6_Init+0x40>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <UART6_Init+0x40>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <UART6_Init+0x40>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <UART6_Init+0x40>)
 8002db6:	220c      	movs	r2, #12
 8002db8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <UART6_Init+0x40>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <UART6_Init+0x40>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart6);
 8002dc6:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <UART6_Init+0x40>)
 8002dc8:	f7fe feb4 	bl	8001b34 <HAL_UART_Init>

}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200133f8 	.word	0x200133f8
 8002dd4:	40011400 	.word	0x40011400

08002dd8 <DMA_Init>:

/**
 * Enable DMA controller clock
 */
void DMA_Init(void) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__DMA2_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <DMA_Init+0x6c>)
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <DMA_Init+0x6c>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <DMA_Init+0x6c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	203a      	movs	r0, #58	; 0x3a
 8002e00:	f7fd fb9b 	bl	800053a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002e04:	203a      	movs	r0, #58	; 0x3a
 8002e06:	f7fd fbb4 	bl	8000572 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	2044      	movs	r0, #68	; 0x44
 8002e10:	f7fd fb93 	bl	800053a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002e14:	2044      	movs	r0, #68	; 0x44
 8002e16:	f7fd fbac 	bl	8000572 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	2045      	movs	r0, #69	; 0x45
 8002e20:	f7fd fb8b 	bl	800053a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002e24:	2045      	movs	r0, #69	; 0x45
 8002e26:	f7fd fba4 	bl	8000572 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2046      	movs	r0, #70	; 0x46
 8002e30:	f7fd fb83 	bl	800053a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002e34:	2046      	movs	r0, #70	; 0x46
 8002e36:	f7fd fb9c 	bl	8000572 <HAL_NVIC_EnableIRQ>

}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800

08002e48 <HAL_SYSTICK_Callback>:
/**
 * @brief SYSTICK callback
 * @param None
 * @retval None
 */
void HAL_SYSTICK_Callback(void) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002e4c:	f7fd fa68 	bl	8000320 <HAL_IncTick>
}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_RTCEx_WakeUpTimerEventCallback>:
/**
 * @brief  Wake Up Timer callback
 * @param  hrtc : hrtc handle
 * @retval None
 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	/* NOTE : add the specific code to handle the RTC wake up interrupt */
	uwCounter = 1;
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
	imprimir("RTC callback");
 8002e62:	4804      	ldr	r0, [pc, #16]	; (8002e74 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 8002e64:	f000 f850 	bl	8002f08 <imprimir>
}
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200000a0 	.word	0x200000a0
 8002e74:	08003498 	.word	0x08003498

08002e78 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief EXTI line detection callbacks
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	80fb      	strh	r3, [r7, #6]
	/* Configure LED2 */
	BSP_LED_Init(LED2);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7fd f9b0 	bl	80001e8 <BSP_LED_Init>
	/* NOTE : add the specific code to handle the wake up button interrupt */
	if (GPIO_Pin == KEY_BUTTON_PIN) {
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e8e:	d105      	bne.n	8002e9c <HAL_GPIO_EXTI_Callback+0x24>
		uwCounter = 2;
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002e92:	2202      	movs	r2, #2
 8002e94:	601a      	str	r2, [r3, #0]
		imprimir("GPIO callback");
 8002e96:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <HAL_GPIO_EXTI_Callback+0x30>)
 8002e98:	f000 f836 	bl	8002f08 <imprimir>
	}
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	200000a0 	.word	0x200000a0
 8002ea8:	080034a8 	.word	0x080034a8

08002eac <main>:
extern int ready;
extern uint8_t ReadyMsg[];

__attribute__((__section__(".user_data"))) const char userConfig[64];

int main(void) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0

	/* MCU Configuration----------------------------------------------------------*/
	uint32_t delay;

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002eb0:	f7fd f9f8 	bl	80002a4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002eb4:	f000 f83e 	bl	8002f34 <SystemClock_Config>

	GPIO_Init();
 8002eb8:	f7ff fed0 	bl	8002c5c <GPIO_Init>
	BSP_LED_Init(LED2);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7fd f993 	bl	80001e8 <BSP_LED_Init>

	UART2_Init();
 8002ec2:	f7ff ff41 	bl	8002d48 <UART2_Init>
	DMA_Init();
 8002ec6:	f7ff ff87 	bl	8002dd8 <DMA_Init>
	UART6_Init();
 8002eca:	f7ff ff61 	bl	8002d90 <UART6_Init>
	UART1_Init();
 8002ece:	f7ff ff17 	bl	8002d00 <UART1_Init>

	imprimir("\r\nCOMIENZO PROGRAMA\r\n");
 8002ed2:	480b      	ldr	r0, [pc, #44]	; (8002f00 <main+0x54>)
 8002ed4:	f000 f818 	bl	8002f08 <imprimir>

	inicializar_gps();
 8002ed8:	f7ff fdc0 	bl	8002a5c <inicializar_gps>

	read_buffer();
 8002edc:	f7ff fd96 	bl	8002a0c <read_buffer>

	send_ATCommand_DMA("AT\r\n");
 8002ee0:	4808      	ldr	r0, [pc, #32]	; (8002f04 <main+0x58>)
 8002ee2:	f7ff fd6b 	bl	80029bc <send_ATCommand_DMA>
	HAL_Delay(1000);
 8002ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002eea:	f7fd fa33 	bl	8000354 <HAL_Delay>
//	enviar_coord_lora();


	while (1) {
		/* Toggle LED2 */
		BSP_LED_Toggle(LED2);
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7fd f9c4 	bl	800027c <BSP_LED_Toggle>
		leerBuffer();
 8002ef4:	f7ff fda8 	bl	8002a48 <leerBuffer>
		HAL_Delay(100);
 8002ef8:	2064      	movs	r0, #100	; 0x64
 8002efa:	f7fd fa2b 	bl	8000354 <HAL_Delay>
	while (1) {
 8002efe:	e7f6      	b.n	8002eee <main+0x42>
 8002f00:	080034b8 	.word	0x080034b8
 8002f04:	080034d0 	.word	0x080034d0

08002f08 <imprimir>:
//	}
//	HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, (uint64_t)data);
//	HAL_FLASH_Lock();
}

void imprimir(char* msg){
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7fd f961 	bl	80001d8 <strlen>
 8002f16:	4603      	mov	r3, r0
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4803      	ldr	r0, [pc, #12]	; (8002f30 <imprimir+0x28>)
 8002f22:	f7fe fe54 	bl	8001bce <HAL_UART_Transmit>

}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20013490 	.word	0x20013490

08002f34 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b094      	sub	sp, #80	; 0x50
 8002f38:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	4a29      	ldr	r2, [pc, #164]	; (8002fe4 <SystemClock_Config+0xb0>)
 8002f40:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <SystemClock_Config+0xb0>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <SystemClock_Config+0xb0>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	4a23      	ldr	r2, [pc, #140]	; (8002fe8 <SystemClock_Config+0xb4>)
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <SystemClock_Config+0xb4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <SystemClock_Config+0xb4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f76:	2302      	movs	r3, #2
 8002f78:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8002f7e:	2310      	movs	r3, #16
 8002f80:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f82:	2302      	movs	r3, #2
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f86:	2300      	movs	r3, #0
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002f8e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002f92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002f94:	2304      	movs	r3, #4
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f98:	2307      	movs	r3, #7
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe f86b 	bl	800107c <HAL_RCC_OscConfig>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002fac:	f000 f81e 	bl	8002fec <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002fb0:	230f      	movs	r3, #15
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002fc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fca:	2103      	movs	r1, #3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe faaf 	bl	8001530 <HAL_RCC_ClockConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002fd8:	f000 f808 	bl	8002fec <Error_Handler>
//
//  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
//
//  /* SysTick_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}
 8002fdc:	bf00      	nop
 8002fde:	3750      	adds	r7, #80	; 0x50
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40007000 	.word	0x40007000

08002fec <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Turn LED3 on */
  BSP_LED_On(LED2);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f7fd f92f 	bl	8000254 <BSP_LED_On>

  while(1)
 8002ff6:	e7fe      	b.n	8002ff6 <Error_Handler+0xa>

08002ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003030 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ffc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ffe:	e003      	b.n	8003008 <LoopCopyDataInit>

08003000 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003002:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003004:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003006:	3104      	adds	r1, #4

08003008 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003008:	480b      	ldr	r0, [pc, #44]	; (8003038 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800300c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800300e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003010:	d3f6      	bcc.n	8003000 <CopyDataInit>
  ldr  r2, =_sbss
 8003012:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003014:	e002      	b.n	800301c <LoopFillZerobss>

08003016 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003016:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003018:	f842 3b04 	str.w	r3, [r2], #4

0800301c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800301e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003020:	d3f9      	bcc.n	8003016 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003022:	f000 f9b7 	bl	8003394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003026:	f000 f9eb 	bl	8003400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800302a:	f7ff ff3f 	bl	8002eac <main>
  bx  lr    
 800302e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003030:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003034:	08003500 	.word	0x08003500
  ldr  r0, =_sdata
 8003038:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800303c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8003040:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003044:	20013690 	.word	0x20013690

08003048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003048:	e7fe      	b.n	8003048 <ADC_IRQHandler>

0800304a <HAL_MspInit>:

/**
 * Initializes the Global MSP.
 */

void HAL_MspInit(void) {
 800304a:	b580      	push	{r7, lr}
 800304c:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800304e:	2003      	movs	r0, #3
 8003050:	f7fd fa68 	bl	8000524 <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	2100      	movs	r1, #0
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	f7fd fa6d 	bl	800053a <HAL_NVIC_SetPriority>
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	if (huart->Instance == USART1) {
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a8f      	ldr	r2, [pc, #572]	; (80032b0 <HAL_UART_MspInit+0x24c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d173      	bne.n	800315e <HAL_UART_MspInit+0xfa>
		/* Peripheral clock enable */
		__USART1_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	4a8e      	ldr	r2, [pc, #568]	; (80032b4 <HAL_UART_MspInit+0x250>)
 800307c:	4b8d      	ldr	r3, [pc, #564]	; (80032b4 <HAL_UART_MspInit+0x250>)
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	f043 0310 	orr.w	r3, r3, #16
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b8b      	ldr	r3, [pc, #556]	; (80032b4 <HAL_UART_MspInit+0x250>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]

		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8003092:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003096:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800309c:	2301      	movs	r3, #1
 800309e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80030a0:	2303      	movs	r3, #3
 80030a2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030a4:	2307      	movs	r3, #7
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	4619      	mov	r1, r3
 80030ae:	4882      	ldr	r0, [pc, #520]	; (80032b8 <HAL_UART_MspInit+0x254>)
 80030b0:	f7fd fe1e 	bl	8000cf0 <HAL_GPIO_Init>

	    /* Peripheral DMA init*/

	    hdma_usart1_rx.Instance = DMA2_Stream5;
 80030b4:	4b81      	ldr	r3, [pc, #516]	; (80032bc <HAL_UART_MspInit+0x258>)
 80030b6:	4a82      	ldr	r2, [pc, #520]	; (80032c0 <HAL_UART_MspInit+0x25c>)
 80030b8:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80030ba:	4b80      	ldr	r3, [pc, #512]	; (80032bc <HAL_UART_MspInit+0x258>)
 80030bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030c0:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030c2:	4b7e      	ldr	r3, [pc, #504]	; (80032bc <HAL_UART_MspInit+0x258>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c8:	4b7c      	ldr	r3, [pc, #496]	; (80032bc <HAL_UART_MspInit+0x258>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030ce:	4b7b      	ldr	r3, [pc, #492]	; (80032bc <HAL_UART_MspInit+0x258>)
 80030d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d4:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030d6:	4b79      	ldr	r3, [pc, #484]	; (80032bc <HAL_UART_MspInit+0x258>)
 80030d8:	2200      	movs	r2, #0
 80030da:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030dc:	4b77      	ldr	r3, [pc, #476]	; (80032bc <HAL_UART_MspInit+0x258>)
 80030de:	2200      	movs	r2, #0
 80030e0:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80030e2:	4b76      	ldr	r3, [pc, #472]	; (80032bc <HAL_UART_MspInit+0x258>)
 80030e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030e8:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030ea:	4b74      	ldr	r3, [pc, #464]	; (80032bc <HAL_UART_MspInit+0x258>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030f0:	4b72      	ldr	r3, [pc, #456]	; (80032bc <HAL_UART_MspInit+0x258>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
	    HAL_DMA_Init(&hdma_usart1_rx);
 80030f6:	4871      	ldr	r0, [pc, #452]	; (80032bc <HAL_UART_MspInit+0x258>)
 80030f8:	f7fd fa5c 	bl	80005b4 <HAL_DMA_Init>

	    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a6f      	ldr	r2, [pc, #444]	; (80032bc <HAL_UART_MspInit+0x258>)
 8003100:	635a      	str	r2, [r3, #52]	; 0x34
 8003102:	4a6e      	ldr	r2, [pc, #440]	; (80032bc <HAL_UART_MspInit+0x258>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6393      	str	r3, [r2, #56]	; 0x38

	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003108:	4b6e      	ldr	r3, [pc, #440]	; (80032c4 <HAL_UART_MspInit+0x260>)
 800310a:	4a6f      	ldr	r2, [pc, #444]	; (80032c8 <HAL_UART_MspInit+0x264>)
 800310c:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800310e:	4b6d      	ldr	r3, [pc, #436]	; (80032c4 <HAL_UART_MspInit+0x260>)
 8003110:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003114:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003116:	4b6b      	ldr	r3, [pc, #428]	; (80032c4 <HAL_UART_MspInit+0x260>)
 8003118:	2240      	movs	r2, #64	; 0x40
 800311a:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800311c:	4b69      	ldr	r3, [pc, #420]	; (80032c4 <HAL_UART_MspInit+0x260>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003122:	4b68      	ldr	r3, [pc, #416]	; (80032c4 <HAL_UART_MspInit+0x260>)
 8003124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003128:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800312a:	4b66      	ldr	r3, [pc, #408]	; (80032c4 <HAL_UART_MspInit+0x260>)
 800312c:	2200      	movs	r2, #0
 800312e:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003130:	4b64      	ldr	r3, [pc, #400]	; (80032c4 <HAL_UART_MspInit+0x260>)
 8003132:	2200      	movs	r2, #0
 8003134:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8003136:	4b63      	ldr	r3, [pc, #396]	; (80032c4 <HAL_UART_MspInit+0x260>)
 8003138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313c:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800313e:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_UART_MspInit+0x260>)
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003144:	4b5f      	ldr	r3, [pc, #380]	; (80032c4 <HAL_UART_MspInit+0x260>)
 8003146:	2200      	movs	r2, #0
 8003148:	625a      	str	r2, [r3, #36]	; 0x24
	    HAL_DMA_Init(&hdma_usart1_tx);
 800314a:	485e      	ldr	r0, [pc, #376]	; (80032c4 <HAL_UART_MspInit+0x260>)
 800314c:	f7fd fa32 	bl	80005b4 <HAL_DMA_Init>

	    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a5c      	ldr	r2, [pc, #368]	; (80032c4 <HAL_UART_MspInit+0x260>)
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
 8003156:	4a5b      	ldr	r2, [pc, #364]	; (80032c4 <HAL_UART_MspInit+0x260>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6393      	str	r3, [r2, #56]	; 0x38

//		/* Peripheral interrupt init*/
//		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
//		HAL_NVIC_EnableIRQ(USART6_IRQn);
	}
}
 800315c:	e0a4      	b.n	80032a8 <HAL_UART_MspInit+0x244>
	} else if (huart->Instance == USART2) {
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a5a      	ldr	r2, [pc, #360]	; (80032cc <HAL_UART_MspInit+0x268>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d128      	bne.n	80031ba <HAL_UART_MspInit+0x156>
		__USART2_CLK_ENABLE();
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <HAL_UART_MspInit+0x250>)
 800316e:	4b51      	ldr	r3, [pc, #324]	; (80032b4 <HAL_UART_MspInit+0x250>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003176:	6413      	str	r3, [r2, #64]	; 0x40
 8003178:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <HAL_UART_MspInit+0x250>)
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003184:	2304      	movs	r3, #4
 8003186:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003188:	2302      	movs	r3, #2
 800318a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003190:	2303      	movs	r3, #3
 8003192:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003194:	2307      	movs	r3, #7
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003198:	f107 0314 	add.w	r3, r7, #20
 800319c:	4619      	mov	r1, r3
 800319e:	4846      	ldr	r0, [pc, #280]	; (80032b8 <HAL_UART_MspInit+0x254>)
 80031a0:	f7fd fda6 	bl	8000cf0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031a4:	2308      	movs	r3, #8
 80031a6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031a8:	2307      	movs	r3, #7
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4619      	mov	r1, r3
 80031b2:	4841      	ldr	r0, [pc, #260]	; (80032b8 <HAL_UART_MspInit+0x254>)
 80031b4:	f7fd fd9c 	bl	8000cf0 <HAL_GPIO_Init>
}
 80031b8:	e076      	b.n	80032a8 <HAL_UART_MspInit+0x244>
	} else if (huart->Instance == USART6) {
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a44      	ldr	r2, [pc, #272]	; (80032d0 <HAL_UART_MspInit+0x26c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d171      	bne.n	80032a8 <HAL_UART_MspInit+0x244>
		__USART6_CLK_ENABLE();
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_UART_MspInit+0x250>)
 80031ca:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <HAL_UART_MspInit+0x250>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f043 0320 	orr.w	r3, r3, #32
 80031d2:	6453      	str	r3, [r2, #68]	; 0x44
 80031d4:	4b37      	ldr	r3, [pc, #220]	; (80032b4 <HAL_UART_MspInit+0x250>)
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80031e0:	23c0      	movs	r3, #192	; 0xc0
 80031e2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL; //GPIO_PULLUP?
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80031ec:	2303      	movs	r3, #3
 80031ee:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80031f0:	2308      	movs	r3, #8
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	4619      	mov	r1, r3
 80031fa:	4836      	ldr	r0, [pc, #216]	; (80032d4 <HAL_UART_MspInit+0x270>)
 80031fc:	f7fd fd78 	bl	8000cf0 <HAL_GPIO_Init>
		hdma_usart6_rx.Instance = DMA2_Stream2;
 8003200:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <HAL_UART_MspInit+0x274>)
 8003202:	4a36      	ldr	r2, [pc, #216]	; (80032dc <HAL_UART_MspInit+0x278>)
 8003204:	601a      	str	r2, [r3, #0]
		hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003206:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <HAL_UART_MspInit+0x274>)
 8003208:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800320c:	605a      	str	r2, [r3, #4]
		hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800320e:	4b32      	ldr	r3, [pc, #200]	; (80032d8 <HAL_UART_MspInit+0x274>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
		hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003214:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <HAL_UART_MspInit+0x274>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
		hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800321a:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <HAL_UART_MspInit+0x274>)
 800321c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003220:	611a      	str	r2, [r3, #16]
		hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003222:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <HAL_UART_MspInit+0x274>)
 8003224:	2200      	movs	r2, #0
 8003226:	615a      	str	r2, [r3, #20]
		hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_UART_MspInit+0x274>)
 800322a:	2200      	movs	r2, #0
 800322c:	619a      	str	r2, [r3, #24]
		hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800322e:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <HAL_UART_MspInit+0x274>)
 8003230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003234:	61da      	str	r2, [r3, #28]
		hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003236:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_UART_MspInit+0x274>)
 8003238:	2200      	movs	r2, #0
 800323a:	621a      	str	r2, [r3, #32]
		hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800323c:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <HAL_UART_MspInit+0x274>)
 800323e:	2200      	movs	r2, #0
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_DMA_Init(&hdma_usart6_rx);
 8003242:	4825      	ldr	r0, [pc, #148]	; (80032d8 <HAL_UART_MspInit+0x274>)
 8003244:	f7fd f9b6 	bl	80005b4 <HAL_DMA_Init>
		__HAL_LINKDMA(huart, hdmarx, hdma_usart6_rx);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a23      	ldr	r2, [pc, #140]	; (80032d8 <HAL_UART_MspInit+0x274>)
 800324c:	635a      	str	r2, [r3, #52]	; 0x34
 800324e:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <HAL_UART_MspInit+0x274>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6393      	str	r3, [r2, #56]	; 0x38
		hdma_usart6_tx.Instance = DMA2_Stream6;
 8003254:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 8003256:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <HAL_UART_MspInit+0x280>)
 8003258:	601a      	str	r2, [r3, #0]
		hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800325a:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 800325c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003260:	605a      	str	r2, [r3, #4]
		hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003262:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 8003264:	2240      	movs	r2, #64	; 0x40
 8003266:	609a      	str	r2, [r3, #8]
		hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
		hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800326e:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 8003270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003274:	611a      	str	r2, [r3, #16]
		hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
		hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
		hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8003282:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 8003284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003288:	61da      	str	r2, [r3, #28]
		hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 800328c:	2200      	movs	r2, #0
 800328e:	621a      	str	r2, [r3, #32]
		hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003290:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 8003292:	2200      	movs	r2, #0
 8003294:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_DMA_Init(&hdma_usart6_tx);
 8003296:	4812      	ldr	r0, [pc, #72]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 8003298:	f7fd f98c 	bl	80005b4 <HAL_DMA_Init>
		__HAL_LINKDMA(huart, hdmatx, hdma_usart6_tx);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
 80032a2:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_UART_MspInit+0x27c>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80032a8:	bf00      	nop
 80032aa:	3728      	adds	r7, #40	; 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40011000 	.word	0x40011000
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020000 	.word	0x40020000
 80032bc:	20013630 	.word	0x20013630
 80032c0:	40026488 	.word	0x40026488
 80032c4:	20013570 	.word	0x20013570
 80032c8:	400264b8 	.word	0x400264b8
 80032cc:	40004400 	.word	0x40004400
 80032d0:	40011400 	.word	0x40011400
 80032d4:	40020800 	.word	0x40020800
 80032d8:	20013510 	.word	0x20013510
 80032dc:	40026440 	.word	0x40026440
 80032e0:	200135d0 	.word	0x200135d0
 80032e4:	400264a0 	.word	0x400264a0

080032e8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032ec:	f7fd f818 	bl	8000320 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80032f0:	f7fd f959 	bl	80005a6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&RTCHandle);
 80032fc:	4802      	ldr	r0, [pc, #8]	; (8003308 <RTC_WKUP_IRQHandler+0x10>)
 80032fe:	f7fe faf7 	bl	80018f0 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200134f0 	.word	0x200134f0

0800330c <EXTI15_10_IRQHandler>:
  * @brief  This function handles External line 15_10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* As the following address is invalid (not mapped), a Hardfault exception
  will be generated with an infinite loop and when the WWDG counter falls to 63
  the WWDG reset occurs */
//  *(__IO uint32_t *) 0xA0003000 = 0xFF;
	 HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8003310:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003314:	f7fd fe9a 	bl	800104c <HAL_GPIO_EXTI_IRQHandler>
}
 8003318:	bf00      	nop
 800331a:	bd80      	pop	{r7, pc}

0800331c <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003320:	4802      	ldr	r0, [pc, #8]	; (800332c <USART2_IRQHandler+0x10>)
 8003322:	f7fe fdd9 	bl	8001ed8 <HAL_UART_IRQHandler>
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20013490 	.word	0x20013490

08003330 <DMA2_Stream2_IRQHandler>:

/**
* @brief This function handles DMA2 stream5 global interrupt.
*/
void DMA2_Stream2_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003334:	4802      	ldr	r0, [pc, #8]	; (8003340 <DMA2_Stream2_IRQHandler+0x10>)
 8003336:	f7fd fa6d 	bl	8000814 <HAL_DMA_IRQHandler>
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20013510 	.word	0x20013510

08003344 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream7 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003348:	4802      	ldr	r0, [pc, #8]	; (8003354 <DMA2_Stream6_IRQHandler+0x10>)
 800334a:	f7fd fa63 	bl	8000814 <HAL_DMA_IRQHandler>
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200135d0 	.word	0x200135d0

08003358 <SPI1_IRQHandler>:

/**
* @brief This function handles SPI1 global interrupt.
*/
void SPI1_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 800335c:	4802      	ldr	r0, [pc, #8]	; (8003368 <SPI1_IRQHandler+0x10>)
 800335e:	f7fe faf3 	bl	8001948 <HAL_SPI_IRQHandler>
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20013438 	.word	0x20013438

0800336c <DMA2_Stream5_IRQHandler>:

/**
* @brief This function handles DMA2 stream5 global interrupt.
*/
void DMA2_Stream5_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003370:	4802      	ldr	r0, [pc, #8]	; (800337c <DMA2_Stream5_IRQHandler+0x10>)
 8003372:	f7fd fa4f 	bl	8000814 <HAL_DMA_IRQHandler>
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20013630 	.word	0x20013630

08003380 <DMA2_Stream7_IRQHandler>:

/**
* @brief This function handles DMA2 stream7 global interrupt.
*/
void DMA2_Stream7_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003384:	4802      	ldr	r0, [pc, #8]	; (8003390 <DMA2_Stream7_IRQHandler+0x10>)
 8003386:	f7fd fa45 	bl	8000814 <HAL_DMA_IRQHandler>

}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20013570 	.word	0x20013570

08003394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003398:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <SystemInit+0x60>)
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <SystemInit+0x60>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80033a8:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <SystemInit+0x64>)
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <SystemInit+0x64>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <SystemInit+0x64>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80033ba:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <SystemInit+0x64>)
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <SystemInit+0x64>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80033ca:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <SystemInit+0x64>)
 80033cc:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <SystemInit+0x68>)
 80033ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80033d0:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <SystemInit+0x64>)
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <SystemInit+0x64>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <SystemInit+0x64>)
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <SystemInit+0x60>)
 80033e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033e8:	609a      	str	r2, [r3, #8]
#endif
}
 80033ea:	bf00      	nop
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00
 80033f8:	40023800 	.word	0x40023800
 80033fc:	24003010 	.word	0x24003010

08003400 <__libc_init_array>:
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	4e0d      	ldr	r6, [pc, #52]	; (8003438 <__libc_init_array+0x38>)
 8003404:	4c0d      	ldr	r4, [pc, #52]	; (800343c <__libc_init_array+0x3c>)
 8003406:	1ba4      	subs	r4, r4, r6
 8003408:	10a4      	asrs	r4, r4, #2
 800340a:	2500      	movs	r5, #0
 800340c:	42a5      	cmp	r5, r4
 800340e:	d109      	bne.n	8003424 <__libc_init_array+0x24>
 8003410:	4e0b      	ldr	r6, [pc, #44]	; (8003440 <__libc_init_array+0x40>)
 8003412:	4c0c      	ldr	r4, [pc, #48]	; (8003444 <__libc_init_array+0x44>)
 8003414:	f000 f820 	bl	8003458 <_init>
 8003418:	1ba4      	subs	r4, r4, r6
 800341a:	10a4      	asrs	r4, r4, #2
 800341c:	2500      	movs	r5, #0
 800341e:	42a5      	cmp	r5, r4
 8003420:	d105      	bne.n	800342e <__libc_init_array+0x2e>
 8003422:	bd70      	pop	{r4, r5, r6, pc}
 8003424:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003428:	4798      	blx	r3
 800342a:	3501      	adds	r5, #1
 800342c:	e7ee      	b.n	800340c <__libc_init_array+0xc>
 800342e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003432:	4798      	blx	r3
 8003434:	3501      	adds	r5, #1
 8003436:	e7f2      	b.n	800341e <__libc_init_array+0x1e>
 8003438:	080034f8 	.word	0x080034f8
 800343c:	080034f8 	.word	0x080034f8
 8003440:	080034f8 	.word	0x080034f8
 8003444:	080034fc 	.word	0x080034fc

08003448 <strcpy>:
 8003448:	4603      	mov	r3, r0
 800344a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800344e:	f803 2b01 	strb.w	r2, [r3], #1
 8003452:	2a00      	cmp	r2, #0
 8003454:	d1f9      	bne.n	800344a <strcpy+0x2>
 8003456:	4770      	bx	lr

08003458 <_init>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	bf00      	nop
 800345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345e:	bc08      	pop	{r3}
 8003460:	469e      	mov	lr, r3
 8003462:	4770      	bx	lr

08003464 <_fini>:
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003466:	bf00      	nop
 8003468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346a:	bc08      	pop	{r3}
 800346c:	469e      	mov	lr, r3
 800346e:	4770      	bx	lr
