
WhistBand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f88  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  0800315c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00013388  2000007c  080031d8  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20013404  080031d8  00023404  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010242  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021a9  00000000  00000000  000302ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007f0  00000000  00000000  00032498  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000708  00000000  00000000  00032c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000041d9  00000000  00000000  00033390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002c66  00000000  00000000  00037569  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003a1cf  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001e5c  00000000  00000000  0003a24c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0003c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003108 	.word	0x08003108

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08003108 	.word	0x08003108

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <BSP_LED_Init>:
  * @param  Led: Specifies the Led to be configured. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b088      	sub	sp, #32
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80001f2:	2300      	movs	r3, #0
 80001f4:	60bb      	str	r3, [r7, #8]
 80001f6:	4a15      	ldr	r2, [pc, #84]	; (800024c <BSP_LED_Init+0x64>)
 80001f8:	4b14      	ldr	r3, [pc, #80]	; (800024c <BSP_LED_Init+0x64>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	6313      	str	r3, [r2, #48]	; 0x30
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <BSP_LED_Init+0x64>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	f003 0301 	and.w	r3, r3, #1
 800020a:	60bb      	str	r3, [r7, #8]
 800020c:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800020e:	2320      	movs	r3, #32
 8000210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000212:	2301      	movs	r3, #1
 8000214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <BSP_LED_Init+0x68>)
 8000222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000226:	f107 020c 	add.w	r2, r7, #12
 800022a:	4611      	mov	r1, r2
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fdcf 	bl	8000dd0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <BSP_LED_Init+0x68>)
 8000236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023a:	2120      	movs	r1, #32
 800023c:	2200      	movs	r2, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f000 ff48 	bl	80010d4 <HAL_GPIO_WritePin>
}
 8000244:	bf00      	nop
 8000246:	3720      	adds	r7, #32
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40023800 	.word	0x40023800
 8000250:	20000000 	.word	0x20000000

08000254 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	4a05      	ldr	r2, [pc, #20]	; (8000278 <BSP_LED_On+0x24>)
 8000262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000266:	2120      	movs	r1, #32
 8000268:	2201      	movs	r2, #1
 800026a:	4618      	mov	r0, r3
 800026c:	f000 ff32 	bl	80010d4 <HAL_GPIO_WritePin>
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000000 	.word	0x20000000

0800027c <BSP_LED_Off>:
  * @param  Led: Specifies the Led to be set off. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	4a05      	ldr	r2, [pc, #20]	; (80002a0 <BSP_LED_Off+0x24>)
 800028a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028e:	2120      	movs	r1, #32
 8000290:	2200      	movs	r2, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f000 ff1e 	bl	80010d4 <HAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000000 	.word	0x20000000

080002a4 <BSP_LED_Toggle>:
  * @param  Led: Specifies the Led to be toggled. 
  *   This parameter can be one of following parameters:
  *     @arg LED2  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <BSP_LED_Toggle+0x24>)
 80002b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b6:	2220      	movs	r2, #32
 80002b8:	4611      	mov	r1, r2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 ff23 	bl	8001106 <HAL_GPIO_TogglePin>
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000000 	.word	0x20000000

080002cc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	460a      	mov	r2, r1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80002dc:	2300      	movs	r3, #0
 80002de:	60bb      	str	r3, [r7, #8]
 80002e0:	4a22      	ldr	r2, [pc, #136]	; (800036c <BSP_PB_Init+0xa0>)
 80002e2:	4b22      	ldr	r3, [pc, #136]	; (800036c <BSP_PB_Init+0xa0>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6313      	str	r3, [r2, #48]	; 0x30
 80002ec:	4b1f      	ldr	r3, [pc, #124]	; (800036c <BSP_PB_Init+0xa0>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	60bb      	str	r3, [r7, #8]
 80002f6:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d112      	bne.n	8000324 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80002fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000302:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000304:	2300      	movs	r3, #0
 8000306:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000308:	2302      	movs	r3, #2
 800030a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800030c:	2302      	movs	r3, #2
 800030e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	4a17      	ldr	r2, [pc, #92]	; (8000370 <BSP_PB_Init+0xa4>)
 8000314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000318:	f107 020c 	add.w	r2, r7, #12
 800031c:	4611      	mov	r1, r2
 800031e:	4618      	mov	r0, r3
 8000320:	f000 fd56 	bl	8000dd0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000324:	79bb      	ldrb	r3, [r7, #6]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d11c      	bne.n	8000364 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800032a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <BSP_PB_Init+0xa8>)
 8000336:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <BSP_PB_Init+0xa4>)
 800033c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000340:	f107 020c 	add.w	r2, r7, #12
 8000344:	4611      	mov	r1, r2
 8000346:	4618      	mov	r0, r3
 8000348:	f000 fd42 	bl	8000dd0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800034c:	2328      	movs	r3, #40	; 0x28
 800034e:	b25b      	sxtb	r3, r3
 8000350:	2200      	movs	r2, #0
 8000352:	210f      	movs	r1, #15
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f95a 	bl	800060e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800035a:	2328      	movs	r3, #40	; 0x28
 800035c:	b25b      	sxtb	r3, r3
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f971 	bl	8000646 <HAL_NVIC_EnableIRQ>
  }
}
 8000364:	bf00      	nop
 8000366:	3720      	adds	r7, #32
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40023800 	.word	0x40023800
 8000370:	20000004 	.word	0x20000004
 8000374:	10210000 	.word	0x10210000

08000378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800037c:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <HAL_Init+0x40>)
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <HAL_Init+0x40>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000388:	4a0b      	ldr	r2, [pc, #44]	; (80003b8 <HAL_Init+0x40>)
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <HAL_Init+0x40>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000394:	4a08      	ldr	r2, [pc, #32]	; (80003b8 <HAL_Init+0x40>)
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <HAL_Init+0x40>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800039e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003a0:	2003      	movs	r0, #3
 80003a2:	f000 f929 	bl	80005f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 f808 	bl	80003bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80003ac:	f002 fd29 	bl	8002e02 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80003b0:	2300      	movs	r3, #0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40023c00 	.word	0x40023c00

080003bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <HAL_InitTick+0x30>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <HAL_InitTick+0x34>)
 80003ca:	fba2 2303 	umull	r2, r3, r2, r3
 80003ce:	099b      	lsrs	r3, r3, #6
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f946 	bl	8000662 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80003d6:	2200      	movs	r2, #0
 80003d8:	6879      	ldr	r1, [r7, #4]
 80003da:	f04f 30ff 	mov.w	r0, #4294967295
 80003de:	f000 f916 	bl	800060e <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80003e2:	2300      	movs	r3, #0
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000078 	.word	0x20000078
 80003f0:	10624dd3 	.word	0x10624dd3

080003f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  uwTick++;
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <HAL_IncTick+0x18>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3301      	adds	r3, #1
 80003fe:	4a03      	ldr	r2, [pc, #12]	; (800040c <HAL_IncTick+0x18>)
 8000400:	6013      	str	r3, [r2, #0]
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	200000a0 	.word	0x200000a0

08000410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  return uwTick;
 8000414:	4b03      	ldr	r3, [pc, #12]	; (8000424 <HAL_GetTick+0x14>)
 8000416:	681b      	ldr	r3, [r3, #0]
}
 8000418:	4618      	mov	r0, r3
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	200000a0 	.word	0x200000a0

08000428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000430:	f7ff ffee 	bl	8000410 <HAL_GetTick>
 8000434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000440:	d002      	beq.n	8000448 <HAL_Delay+0x20>
  {
     wait++;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	3301      	adds	r3, #1
 8000446:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000448:	bf00      	nop
 800044a:	f7ff ffe1 	bl	8000410 <HAL_GetTick>
 800044e:	4602      	mov	r2, r0
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	1ad2      	subs	r2, r2, r3
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	429a      	cmp	r2, r3
 8000458:	d3f7      	bcc.n	800044a <HAL_Delay+0x22>
  {
  }
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f003 0307 	and.w	r3, r3, #7
 8000472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <NVIC_SetPriorityGrouping+0x44>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800047a:	68ba      	ldr	r2, [r7, #8]
 800047c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000480:	4013      	ands	r3, r2
 8000482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800048c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000496:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <NVIC_SetPriorityGrouping+0x44>)
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	60d3      	str	r3, [r2, #12]
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000ed00 	.word	0xe000ed00

080004ac <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <NVIC_GetPriorityGrouping+0x18>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	0a1b      	lsrs	r3, r3, #8
 80004b6:	f003 0307 	and.w	r3, r3, #7
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004d2:	4909      	ldr	r1, [pc, #36]	; (80004f8 <NVIC_EnableIRQ+0x30>)
 80004d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d8:	095b      	lsrs	r3, r3, #5
 80004da:	79fa      	ldrb	r2, [r7, #7]
 80004dc:	f002 021f 	and.w	r2, r2, #31
 80004e0:	2001      	movs	r0, #1
 80004e2:	fa00 f202 	lsl.w	r2, r0, r2
 80004e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000e100 	.word	0xe000e100

080004fc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050c:	2b00      	cmp	r3, #0
 800050e:	da0b      	bge.n	8000528 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000510:	490d      	ldr	r1, [pc, #52]	; (8000548 <NVIC_SetPriority+0x4c>)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f003 030f 	and.w	r3, r3, #15
 8000518:	3b04      	subs	r3, #4
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	b2d2      	uxtb	r2, r2
 800051e:	0112      	lsls	r2, r2, #4
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	440b      	add	r3, r1
 8000524:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000526:	e009      	b.n	800053c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000528:	4908      	ldr	r1, [pc, #32]	; (800054c <NVIC_SetPriority+0x50>)
 800052a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	0112      	lsls	r2, r2, #4
 8000534:	b2d2      	uxtb	r2, r2
 8000536:	440b      	add	r3, r1
 8000538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	e000ed00 	.word	0xe000ed00
 800054c:	e000e100 	.word	0xe000e100

08000550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000550:	b480      	push	{r7}
 8000552:	b089      	sub	sp, #36	; 0x24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	f1c3 0307 	rsb	r3, r3, #7
 800056a:	2b04      	cmp	r3, #4
 800056c:	bf28      	it	cs
 800056e:	2304      	movcs	r3, #4
 8000570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	3304      	adds	r3, #4
 8000576:	2b06      	cmp	r3, #6
 8000578:	d902      	bls.n	8000580 <NVIC_EncodePriority+0x30>
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	3b03      	subs	r3, #3
 800057e:	e000      	b.n	8000582 <NVIC_EncodePriority+0x32>
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000584:	2201      	movs	r2, #1
 8000586:	69bb      	ldr	r3, [r7, #24]
 8000588:	fa02 f303 	lsl.w	r3, r2, r3
 800058c:	1e5a      	subs	r2, r3, #1
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	401a      	ands	r2, r3
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000596:	2101      	movs	r1, #1
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	1e59      	subs	r1, r3, #1
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a4:	4313      	orrs	r3, r2
         );
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3724      	adds	r7, #36	; 0x24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
	...

080005b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3b01      	subs	r3, #1
 80005c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005c4:	d301      	bcc.n	80005ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005c6:	2301      	movs	r3, #1
 80005c8:	e00f      	b.n	80005ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <SysTick_Config+0x40>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005d2:	210f      	movs	r1, #15
 80005d4:	f04f 30ff 	mov.w	r0, #4294967295
 80005d8:	f7ff ff90 	bl	80004fc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <SysTick_Config+0x40>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005e2:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <SysTick_Config+0x40>)
 80005e4:	2207      	movs	r2, #7
 80005e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	e000e010 	.word	0xe000e010

080005f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff ff2f 	bl	8000464 <NVIC_SetPriorityGrouping>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800060e:	b580      	push	{r7, lr}
 8000610:	b086      	sub	sp, #24
 8000612:	af00      	add	r7, sp, #0
 8000614:	4603      	mov	r3, r0
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000620:	f7ff ff44 	bl	80004ac <NVIC_GetPriorityGrouping>
 8000624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	68b9      	ldr	r1, [r7, #8]
 800062a:	6978      	ldr	r0, [r7, #20]
 800062c:	f7ff ff90 	bl	8000550 <NVIC_EncodePriority>
 8000630:	4602      	mov	r2, r0
 8000632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000636:	4611      	mov	r1, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff5f 	bl	80004fc <NVIC_SetPriority>
}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	4603      	mov	r3, r0
 800064e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff37 	bl	80004c8 <NVIC_EnableIRQ>
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff ffa2 	bl	80005b4 <SysTick_Config>
 8000670:	4603      	mov	r3, r0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800067e:	f000 f802 	bl	8000686 <HAL_SYSTICK_Callback>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}

08000686 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80006a0:	f7ff feb6 	bl	8000410 <HAL_GetTick>
 80006a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80006ac:	2301      	movs	r3, #1
 80006ae:	e099      	b.n	80007e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2202      	movs	r2, #2
 80006bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	f022 0201 	bic.w	r2, r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006d0:	e00f      	b.n	80006f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80006d2:	f7ff fe9d 	bl	8000410 <HAL_GetTick>
 80006d6:	4602      	mov	r2, r0
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	2b05      	cmp	r3, #5
 80006de:	d908      	bls.n	80006f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2220      	movs	r2, #32
 80006e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2203      	movs	r2, #3
 80006ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80006ee:	2303      	movs	r3, #3
 80006f0:	e078      	b.n	80007e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1e8      	bne.n	80006d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4b38      	ldr	r3, [pc, #224]	; (80007ec <HAL_DMA_Init+0x158>)
 800070c:	4013      	ands	r3, r2
 800070e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800071e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	691b      	ldr	r3, [r3, #16]
 8000724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800072a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6a1b      	ldr	r3, [r3, #32]
 800073c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	4313      	orrs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000748:	2b04      	cmp	r3, #4
 800074a:	d107      	bne.n	800075c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4313      	orrs	r3, r2
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	4313      	orrs	r3, r2
 800075a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	f023 0307 	bic.w	r3, r3, #7
 8000772:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	4313      	orrs	r3, r2
 800077c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000782:	2b04      	cmp	r3, #4
 8000784:	d117      	bne.n	80007b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800078a:	697a      	ldr	r2, [r7, #20]
 800078c:	4313      	orrs	r3, r2
 800078e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00e      	beq.n	80007b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 fa9f 	bl	8000cdc <DMA_CheckFifoParam>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d008      	beq.n	80007b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2240      	movs	r2, #64	; 0x40
 80007a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2201      	movs	r2, #1
 80007ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80007b2:	2301      	movs	r3, #1
 80007b4:	e016      	b.n	80007e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	697a      	ldr	r2, [r7, #20]
 80007bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 fa56 	bl	8000c70 <DMA_CalcBaseAndBitshift>
 80007c4:	4603      	mov	r3, r0
 80007c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007cc:	223f      	movs	r2, #63	; 0x3f
 80007ce:	409a      	lsls	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	f010803f 	.word	0xf010803f

080007f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000806:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800080e:	2b01      	cmp	r3, #1
 8000810:	d101      	bne.n	8000816 <HAL_DMA_Start_IT+0x26>
 8000812:	2302      	movs	r3, #2
 8000814:	e048      	b.n	80008a8 <HAL_DMA_Start_IT+0xb8>
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	2201      	movs	r2, #1
 800081a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b01      	cmp	r3, #1
 8000828:	d137      	bne.n	800089a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2202      	movs	r2, #2
 800082e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	2200      	movs	r2, #0
 8000836:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	68b9      	ldr	r1, [r7, #8]
 800083e:	68f8      	ldr	r0, [r7, #12]
 8000840:	f000 f9e8 	bl	8000c14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000848:	223f      	movs	r2, #63	; 0x3f
 800084a:	409a      	lsls	r2, r3
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	6812      	ldr	r2, [r2, #0]
 8000858:	6812      	ldr	r2, [r2, #0]
 800085a:	f042 0216 	orr.w	r2, r2, #22
 800085e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	6812      	ldr	r2, [r2, #0]
 8000868:	6952      	ldr	r2, [r2, #20]
 800086a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800086e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	2b00      	cmp	r3, #0
 8000876:	d007      	beq.n	8000888 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	6812      	ldr	r2, [r2, #0]
 8000882:	f042 0208 	orr.w	r2, r2, #8
 8000886:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	6812      	ldr	r2, [r2, #0]
 8000890:	6812      	ldr	r2, [r2, #0]
 8000892:	f042 0201 	orr.w	r2, r2, #1
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	e005      	b.n	80008a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80008a2:	2302      	movs	r3, #2
 80008a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d004      	beq.n	80008ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00c      	b.n	80008e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2205      	movs	r2, #5
 80008d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	6812      	ldr	r2, [r2, #0]
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	f022 0201 	bic.w	r2, r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000900:	4b93      	ldr	r3, [pc, #588]	; (8000b50 <HAL_DMA_IRQHandler+0x25c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a93      	ldr	r2, [pc, #588]	; (8000b54 <HAL_DMA_IRQHandler+0x260>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	0a9b      	lsrs	r3, r3, #10
 800090c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000912:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800091e:	2208      	movs	r2, #8
 8000920:	409a      	lsls	r2, r3
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4013      	ands	r3, r2
 8000926:	2b00      	cmp	r3, #0
 8000928:	d01a      	beq.n	8000960 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	2b00      	cmp	r3, #0
 8000936:	d013      	beq.n	8000960 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	6812      	ldr	r2, [r2, #0]
 8000940:	6812      	ldr	r2, [r2, #0]
 8000942:	f022 0204 	bic.w	r2, r2, #4
 8000946:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800094c:	2208      	movs	r2, #8
 800094e:	409a      	lsls	r2, r3
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000958:	f043 0201 	orr.w	r2, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000964:	4a7c      	ldr	r2, [pc, #496]	; (8000b58 <HAL_DMA_IRQHandler+0x264>)
 8000966:	409a      	lsls	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4013      	ands	r3, r2
 800096c:	2b00      	cmp	r3, #0
 800096e:	d012      	beq.n	8000996 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00b      	beq.n	8000996 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000982:	4a75      	ldr	r2, [pc, #468]	; (8000b58 <HAL_DMA_IRQHandler+0x264>)
 8000984:	409a      	lsls	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800098e:	f043 0202 	orr.w	r2, r3, #2
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800099a:	4a70      	ldr	r2, [pc, #448]	; (8000b5c <HAL_DMA_IRQHandler+0x268>)
 800099c:	409a      	lsls	r2, r3
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	4013      	ands	r3, r2
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d012      	beq.n	80009cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00b      	beq.n	80009cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009b8:	4a68      	ldr	r2, [pc, #416]	; (8000b5c <HAL_DMA_IRQHandler+0x268>)
 80009ba:	409a      	lsls	r2, r3
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009c4:	f043 0204 	orr.w	r2, r3, #4
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009d0:	2210      	movs	r2, #16
 80009d2:	409a      	lsls	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4013      	ands	r3, r2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d043      	beq.n	8000a64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d03c      	beq.n	8000a64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ee:	2210      	movs	r2, #16
 80009f0:	409a      	lsls	r2, r3
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d018      	beq.n	8000a36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d108      	bne.n	8000a24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d024      	beq.n	8000a64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	4798      	blx	r3
 8000a22:	e01f      	b.n	8000a64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d01b      	beq.n	8000a64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	4798      	blx	r3
 8000a34:	e016      	b.n	8000a64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d107      	bne.n	8000a54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	6812      	ldr	r2, [r2, #0]
 8000a4c:	6812      	ldr	r2, [r2, #0]
 8000a4e:	f022 0208 	bic.w	r2, r2, #8
 8000a52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a68:	2220      	movs	r2, #32
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f000 8094 	beq.w	8000b9e <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 808c 	beq.w	8000b9e <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a8a:	2220      	movs	r2, #32
 8000a8c:	409a      	lsls	r2, r3
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	d137      	bne.n	8000b0e <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	6812      	ldr	r2, [r2, #0]
 8000aa6:	6812      	ldr	r2, [r2, #0]
 8000aa8:	f022 0216 	bic.w	r2, r2, #22
 8000aac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	6952      	ldr	r2, [r2, #20]
 8000ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000abc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d103      	bne.n	8000ace <HAL_DMA_IRQHandler+0x1da>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	f022 0208 	bic.w	r2, r2, #8
 8000adc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae2:	223f      	movs	r2, #63	; 0x3f
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2201      	movs	r2, #1
 8000af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 8083 	beq.w	8000c0a <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	4798      	blx	r3
        }
        return;
 8000b0c:	e07d      	b.n	8000c0a <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d021      	beq.n	8000b60 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d108      	bne.n	8000b3c <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d035      	beq.n	8000b9e <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	4798      	blx	r3
 8000b3a:	e030      	b.n	8000b9e <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d02c      	beq.n	8000b9e <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	4798      	blx	r3
 8000b4c:	e027      	b.n	8000b9e <HAL_DMA_IRQHandler+0x2aa>
 8000b4e:	bf00      	nop
 8000b50:	20000078 	.word	0x20000078
 8000b54:	1b4e81b5 	.word	0x1b4e81b5
 8000b58:	00800001 	.word	0x00800001
 8000b5c:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10f      	bne.n	8000b8e <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	6812      	ldr	r2, [r2, #0]
 8000b78:	f022 0210 	bic.w	r2, r2, #16
 8000b7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d032      	beq.n	8000c0c <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d022      	beq.n	8000bf8 <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2205      	movs	r2, #5
 8000bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	6812      	ldr	r2, [r2, #0]
 8000bc2:	6812      	ldr	r2, [r2, #0]
 8000bc4:	f022 0201 	bic.w	r2, r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d807      	bhi.n	8000be6 <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f2      	bne.n	8000bca <HAL_DMA_IRQHandler+0x2d6>
 8000be4:	e000      	b.n	8000be8 <HAL_DMA_IRQHandler+0x2f4>
          break;
 8000be6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d005      	beq.n	8000c0c <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	4798      	blx	r3
 8000c08:	e000      	b.n	8000c0c <HAL_DMA_IRQHandler+0x318>
        return;
 8000c0a:	bf00      	nop
    }
  }
}
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop

08000c14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2b40      	cmp	r3, #64	; 0x40
 8000c40:	d108      	bne.n	8000c54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000c52:	e007      	b.n	8000c64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68ba      	ldr	r2, [r7, #8]
 8000c5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	60da      	str	r2, [r3, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	3b10      	subs	r3, #16
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <DMA_CalcBaseAndBitshift+0x64>)
 8000c82:	fba2 2303 	umull	r2, r3, r2, r3
 8000c86:	091b      	lsrs	r3, r3, #4
 8000c88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c8a:	4a13      	ldr	r2, [pc, #76]	; (8000cd8 <DMA_CalcBaseAndBitshift+0x68>)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d909      	bls.n	8000cb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000ca6:	f023 0303 	bic.w	r3, r3, #3
 8000caa:	1d1a      	adds	r2, r3, #4
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	659a      	str	r2, [r3, #88]	; 0x58
 8000cb0:	e007      	b.n	8000cc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000cba:	f023 0303 	bic.w	r3, r3, #3
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	aaaaaaab 	.word	0xaaaaaaab
 8000cd8:	08003134 	.word	0x08003134

08000cdc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d11f      	bne.n	8000d36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d855      	bhi.n	8000da8 <DMA_CheckFifoParam+0xcc>
 8000cfc:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <DMA_CheckFifoParam+0x28>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000d27 	.word	0x08000d27
 8000d0c:	08000d15 	.word	0x08000d15
 8000d10:	08000da9 	.word	0x08000da9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d045      	beq.n	8000dac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d24:	e042      	b.n	8000dac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d2e:	d13f      	bne.n	8000db0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d34:	e03c      	b.n	8000db0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d3e:	d121      	bne.n	8000d84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d836      	bhi.n	8000db4 <DMA_CheckFifoParam+0xd8>
 8000d46:	a201      	add	r2, pc, #4	; (adr r2, 8000d4c <DMA_CheckFifoParam+0x70>)
 8000d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4c:	08000d5d 	.word	0x08000d5d
 8000d50:	08000d63 	.word	0x08000d63
 8000d54:	08000d5d 	.word	0x08000d5d
 8000d58:	08000d75 	.word	0x08000d75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8000d60:	e02f      	b.n	8000dc2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d024      	beq.n	8000db8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000d72:	e021      	b.n	8000db8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000d7c:	d11e      	bne.n	8000dbc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000d82:	e01b      	b.n	8000dbc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d902      	bls.n	8000d90 <DMA_CheckFifoParam+0xb4>
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	d003      	beq.n	8000d96 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000d8e:	e018      	b.n	8000dc2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
      break;
 8000d94:	e015      	b.n	8000dc2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00e      	beq.n	8000dc0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
      break;
 8000da6:	e00b      	b.n	8000dc0 <DMA_CheckFifoParam+0xe4>
      break;
 8000da8:	bf00      	nop
 8000daa:	e00a      	b.n	8000dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8000dac:	bf00      	nop
 8000dae:	e008      	b.n	8000dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8000db0:	bf00      	nop
 8000db2:	e006      	b.n	8000dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8000db4:	bf00      	nop
 8000db6:	e004      	b.n	8000dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8000db8:	bf00      	nop
 8000dba:	e002      	b.n	8000dc2 <DMA_CheckFifoParam+0xe6>
      break;   
 8000dbc:	bf00      	nop
 8000dbe:	e000      	b.n	8000dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8000dc0:	bf00      	nop
    }
  } 
  
  return status; 
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	e159      	b.n	80010a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f040 8148 	bne.w	800109a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x4a>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b12      	cmp	r3, #18
 8000e18:	d123      	bne.n	8000e62 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	08da      	lsrs	r2, r3, #3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3208      	adds	r2, #8
 8000e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	69b9      	ldr	r1, [r7, #24]
 8000e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0203 	and.w	r2, r3, #3
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_GPIO_Init+0xe6>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eaa:	2b11      	cmp	r3, #17
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b12      	cmp	r3, #18
 8000eb4:	d130      	bne.n	8000f18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80a2 	beq.w	800109a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4a56      	ldr	r2, [pc, #344]	; (80010b4 <HAL_GPIO_Init+0x2e4>)
 8000f5c:	4b55      	ldr	r3, [pc, #340]	; (80010b4 <HAL_GPIO_Init+0x2e4>)
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b53      	ldr	r3, [pc, #332]	; (80010b4 <HAL_GPIO_Init+0x2e4>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f72:	4a51      	ldr	r2, [pc, #324]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a48      	ldr	r2, [pc, #288]	; (80010bc <HAL_GPIO_Init+0x2ec>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0x202>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a47      	ldr	r2, [pc, #284]	; (80010c0 <HAL_GPIO_Init+0x2f0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0x1fe>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a46      	ldr	r2, [pc, #280]	; (80010c4 <HAL_GPIO_Init+0x2f4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00d      	beq.n	8000fca <HAL_GPIO_Init+0x1fa>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a45      	ldr	r2, [pc, #276]	; (80010c8 <HAL_GPIO_Init+0x2f8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d007      	beq.n	8000fc6 <HAL_GPIO_Init+0x1f6>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a44      	ldr	r2, [pc, #272]	; (80010cc <HAL_GPIO_Init+0x2fc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x1f2>
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	e008      	b.n	8000fd4 <HAL_GPIO_Init+0x204>
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x204>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e004      	b.n	8000fd4 <HAL_GPIO_Init+0x204>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e002      	b.n	8000fd4 <HAL_GPIO_Init+0x204>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x204>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	f002 0203 	and.w	r2, r2, #3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4093      	lsls	r3, r2
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe4:	4934      	ldr	r1, [pc, #208]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff2:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <HAL_GPIO_Init+0x300>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001016:	4a2e      	ldr	r2, [pc, #184]	; (80010d0 <HAL_GPIO_Init+0x300>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800101c:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <HAL_GPIO_Init+0x300>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001040:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <HAL_GPIO_Init+0x300>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001046:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <HAL_GPIO_Init+0x300>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106a:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_GPIO_Init+0x300>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_GPIO_Init+0x300>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001094:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_GPIO_Init+0x300>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3301      	adds	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	f67f aea2 	bls.w	8000dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a8:	bf00      	nop
 80010aa:	3724      	adds	r7, #36	; 0x24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	460b      	mov	r3, r1
 8001110:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	405a      	eors	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	615a      	str	r2, [r3, #20]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	; 0x38
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d075      	beq.n	8001230 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001144:	4ba4      	ldr	r3, [pc, #656]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b04      	cmp	r3, #4
 800114e:	d00c      	beq.n	800116a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001150:	4ba1      	ldr	r3, [pc, #644]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001158:	2b08      	cmp	r3, #8
 800115a:	d112      	bne.n	8001182 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115c:	4b9e      	ldr	r3, [pc, #632]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001168:	d10b      	bne.n	8001182 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116a:	4b9b      	ldr	r3, [pc, #620]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d05b      	beq.n	800122e <HAL_RCC_OscConfig+0x102>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d157      	bne.n	800122e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e224      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x6e>
 800118c:	4a92      	ldr	r2, [pc, #584]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	4b92      	ldr	r3, [pc, #584]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	e01d      	b.n	80011d6 <HAL_RCC_OscConfig+0xaa>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a2:	d10c      	bne.n	80011be <HAL_RCC_OscConfig+0x92>
 80011a4:	4a8c      	ldr	r2, [pc, #560]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	4b8c      	ldr	r3, [pc, #560]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4a89      	ldr	r2, [pc, #548]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011b2:	4b89      	ldr	r3, [pc, #548]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	e00b      	b.n	80011d6 <HAL_RCC_OscConfig+0xaa>
 80011be:	4a86      	ldr	r2, [pc, #536]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	4b85      	ldr	r3, [pc, #532]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4a83      	ldr	r2, [pc, #524]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	4b82      	ldr	r3, [pc, #520]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d4:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d013      	beq.n	8001206 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011de:	f7ff f917 	bl	8000410 <HAL_GetTick>
 80011e2:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e6:	f7ff f913 	bl	8000410 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b64      	cmp	r3, #100	; 0x64
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e1e9      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f8:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0xba>
 8001204:	e014      	b.n	8001230 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001206:	f7ff f903 	bl	8000410 <HAL_GetTick>
 800120a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800120e:	f7ff f8ff 	bl	8000410 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b64      	cmp	r3, #100	; 0x64
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e1d5      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001220:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f0      	bne.n	800120e <HAL_RCC_OscConfig+0xe2>
 800122c:	e000      	b.n	8001230 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d077      	beq.n	800132c <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123c:	4b66      	ldr	r3, [pc, #408]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001248:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001250:	2b08      	cmp	r3, #8
 8001252:	d126      	bne.n	80012a2 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001254:	4b60      	ldr	r3, [pc, #384]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d120      	bne.n	80012a2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001260:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_RCC_OscConfig+0x14c>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d001      	beq.n	8001278 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e1a9      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001278:	4857      	ldr	r0, [pc, #348]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6919      	ldr	r1, [r3, #16]
 8001286:	23f8      	movs	r3, #248	; 0xf8
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a0:	e044      	b.n	800132c <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d02a      	beq.n	8001300 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012aa:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <HAL_RCC_OscConfig+0x2b0>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff f8ae 	bl	8000410 <HAL_GetTick>
 80012b4:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b8:	f7ff f8aa 	bl	8000410 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e180      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ca:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4840      	ldr	r0, [pc, #256]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6919      	ldr	r1, [r3, #16]
 80012e4:	23f8      	movs	r3, #248	; 0xf8
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	6003      	str	r3, [r0, #0]
 80012fe:	e015      	b.n	800132c <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <HAL_RCC_OscConfig+0x2b0>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff f883 	bl	8000410 <HAL_GetTick>
 800130a:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff f87f 	bl	8000410 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e155      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d030      	beq.n	800139a <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d016      	beq.n	800136e <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HAL_RCC_OscConfig+0x2b4>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001346:	f7ff f863 	bl	8000410 <HAL_GetTick>
 800134a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134e:	f7ff f85f 	bl	8000410 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e135      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x222>
 800136c:	e015      	b.n	800139a <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_RCC_OscConfig+0x2b4>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001374:	f7ff f84c 	bl	8000410 <HAL_GetTick>
 8001378:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800137c:	f7ff f848 	bl	8000410 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e11e      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8086 	beq.w	80014b4 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b6:	6413      	str	r3, [r2, #64]	; 0x40
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_RCC_OscConfig+0x2b8>)
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <HAL_RCC_OscConfig+0x2b8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80013d0:	f7ff f81e 	bl	8000410 <HAL_GetTick>
 80013d4:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013d6:	e010      	b.n	80013fa <HAL_RCC_OscConfig+0x2ce>
 80013d8:	40023800 	.word	0x40023800
 80013dc:	42470000 	.word	0x42470000
 80013e0:	42470e80 	.word	0x42470e80
 80013e4:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013e8:	f7ff f812 	bl	8000410 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e0e8      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013fa:	4b76      	ldr	r3, [pc, #472]	; (80015d4 <HAL_RCC_OscConfig+0x4a8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x2f0>
 800140e:	4a72      	ldr	r2, [pc, #456]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 8001410:	4b71      	ldr	r3, [pc, #452]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
 800141a:	e01c      	b.n	8001456 <HAL_RCC_OscConfig+0x32a>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b05      	cmp	r3, #5
 8001422:	d10c      	bne.n	800143e <HAL_RCC_OscConfig+0x312>
 8001424:	4a6c      	ldr	r2, [pc, #432]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 8001426:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6713      	str	r3, [r2, #112]	; 0x70
 8001430:	4a69      	ldr	r2, [pc, #420]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 8001432:	4b69      	ldr	r3, [pc, #420]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
 800143c:	e00b      	b.n	8001456 <HAL_RCC_OscConfig+0x32a>
 800143e:	4a66      	ldr	r2, [pc, #408]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 8001440:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
 800144a:	4a63      	ldr	r2, [pc, #396]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 800144c:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	f023 0304 	bic.w	r3, r3, #4
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d015      	beq.n	800148a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145e:	f7fe ffd7 	bl	8000410 <HAL_GetTick>
 8001462:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f7fe ffd3 	bl	8000410 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f241 3288 	movw	r2, #5000	; 0x1388
 8001474:	4293      	cmp	r3, r2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e0a7      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	4b56      	ldr	r3, [pc, #344]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0ee      	beq.n	8001466 <HAL_RCC_OscConfig+0x33a>
 8001488:	e014      	b.n	80014b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148a:	f7fe ffc1 	bl	8000410 <HAL_GetTick>
 800148e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7fe ffbd 	bl	8000410 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e091      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a8:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ee      	bne.n	8001492 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 8086 	beq.w	80015ca <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014be:	4b46      	ldr	r3, [pc, #280]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d07d      	beq.n	80015c6 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d162      	bne.n	8001598 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	4b42      	ldr	r3, [pc, #264]	; (80015dc <HAL_RCC_OscConfig+0x4b0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7fe ff9a 	bl	8000410 <HAL_GetTick>
 80014dc:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e0:	f7fe ff96 	bl	8000410 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e06c      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	4b39      	ldr	r3, [pc, #228]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014fe:	4836      	ldr	r0, [pc, #216]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69da      	ldr	r2, [r3, #28]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800150e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	60fb      	str	r3, [r7, #12]
  return(result);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	1e59      	subs	r1, r3, #1
 8001530:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001534:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	fa93 f3a3 	rbit	r3, r3
 800153c:	617b      	str	r3, [r7, #20]
  return(result);
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800154e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001552:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	fa93 f3a3 	rbit	r3, r3
 800155a:	61fb      	str	r3, [r7, #28]
  return(result);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	6043      	str	r3, [r0, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <HAL_RCC_OscConfig+0x4b0>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7fe ff4e 	bl	8000410 <HAL_GetTick>
 8001574:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001578:	f7fe ff4a 	bl	8000410 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e020      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x44c>
 8001596:	e018      	b.n	80015ca <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_RCC_OscConfig+0x4b0>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7fe ff37 	bl	8000410 <HAL_GetTick>
 80015a2:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a6:	f7fe ff33 	bl	8000410 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e009      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b8:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_RCC_OscConfig+0x4ac>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x47a>
 80015c4:	e001      	b.n	80015ca <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3738      	adds	r7, #56	; 0x38
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40007000 	.word	0x40007000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	42470060 	.word	0x42470060

080015e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015ee:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <HAL_RCC_ClockConfig+0x214>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 020f 	and.w	r2, r3, #15
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d20c      	bcs.n	8001616 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fc:	4b7d      	ldr	r3, [pc, #500]	; (80017f4 <HAL_RCC_ClockConfig+0x214>)
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001604:	4b7b      	ldr	r3, [pc, #492]	; (80017f4 <HAL_RCC_ClockConfig+0x214>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 020f 	and.w	r2, r3, #15
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d001      	beq.n	8001616 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0ea      	b.n	80017ec <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001622:	4975      	ldr	r1, [pc, #468]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 8001624:	4b74      	ldr	r3, [pc, #464]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 8086 	beq.w	800174e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b6b      	ldr	r3, [pc, #428]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d119      	bne.n	800168a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0c8      	b.n	80017ec <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d003      	beq.n	800166a <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001666:	2b03      	cmp	r3, #3
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e0b8      	b.n	80017ec <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b5f      	ldr	r3, [pc, #380]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0b0      	b.n	80017ec <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168a:	495b      	ldr	r1, [pc, #364]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 800168c:	4b5a      	ldr	r3, [pc, #360]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 0203 	bic.w	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800169c:	f7fe feb8 	bl	8000410 <HAL_GetTick>
 80016a0:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d112      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7fe feb0 	bl	8000410 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e094      	b.n	80017ec <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c2:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d1ee      	bne.n	80016ac <HAL_RCC_ClockConfig+0xcc>
 80016ce:	e03e      	b.n	800174e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d112      	bne.n	80016fe <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016da:	f7fe fe99 	bl	8000410 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e07d      	b.n	80017ec <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f0:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d1ee      	bne.n	80016da <HAL_RCC_ClockConfig+0xfa>
 80016fc:	e027      	b.n	800174e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d11d      	bne.n	8001742 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001706:	e00a      	b.n	800171e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7fe fe82 	bl	8000410 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e066      	b.n	80017ec <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800171e:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d1ee      	bne.n	8001708 <HAL_RCC_ClockConfig+0x128>
 800172a:	e010      	b.n	800174e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172c:	f7fe fe70 	bl	8000410 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e054      	b.n	80017ec <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ee      	bne.n	800172c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_RCC_ClockConfig+0x214>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 020f 	and.w	r2, r3, #15
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d90c      	bls.n	8001776 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_RCC_ClockConfig+0x214>)
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_RCC_ClockConfig+0x214>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 020f 	and.w	r2, r3, #15
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e03a      	b.n	80017ec <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001782:	491d      	ldr	r1, [pc, #116]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a0:	4915      	ldr	r1, [pc, #84]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80017b4:	f000 f826 	bl	8001804 <HAL_RCC_GetSysClockFreq>
 80017b8:	4601      	mov	r1, r0
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_RCC_ClockConfig+0x218>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017c2:	23f0      	movs	r3, #240	; 0xf0
 80017c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_RCC_ClockConfig+0x21c>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	fa21 f303 	lsr.w	r3, r1, r3
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_RCC_ClockConfig+0x220>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7fe fde9 	bl	80003bc <HAL_InitTick>
  
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023c00 	.word	0x40023c00
 80017f8:	40023800 	.word	0x40023800
 80017fc:	0800313c 	.word	0x0800313c
 8001800:	20000078 	.word	0x20000078

08001804 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	; 0x2c
 8001808:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800181a:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b04      	cmp	r3, #4
 8001824:	d006      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x30>
 8001826:	2b08      	cmp	r3, #8
 8001828:	d007      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x36>
 800182a:	2b00      	cmp	r3, #0
 800182c:	d158      	bne.n	80018e0 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001830:	623b      	str	r3, [r7, #32]
       break;
 8001832:	e058      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001834:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001836:	623b      	str	r3, [r7, #32]
      break;
 8001838:	e055      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800183a:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001842:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d017      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001850:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fbb2 f2f3 	udiv	r2, r2, r3
 8001858:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001860:	400b      	ands	r3, r1
 8001862:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001866:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	6979      	ldr	r1, [r7, #20]
 800186a:	fa91 f1a1 	rbit	r1, r1
 800186e:	6139      	str	r1, [r7, #16]
  return(result);
 8001870:	6939      	ldr	r1, [r7, #16]
 8001872:	fab1 f181 	clz	r1, r1
 8001876:	40cb      	lsrs	r3, r1
 8001878:	fb03 f302 	mul.w	r3, r3, r2
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
 800187e:	e016      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fbb2 f2f3 	udiv	r2, r2, r3
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001890:	400b      	ands	r3, r1
 8001892:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001896:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	fa91 f1a1 	rbit	r1, r1
 800189e:	60b9      	str	r1, [r7, #8]
  return(result);
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	fab1 f181 	clz	r1, r1
 80018a6:	40cb      	lsrs	r3, r1
 80018a8:	fb03 f302 	mul.w	r3, r3, r2
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018b6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80018ba:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	fa93 f3a3 	rbit	r3, r3
 80018c2:	603b      	str	r3, [r7, #0]
  return(result);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018dc:	623b      	str	r3, [r7, #32]
      break;
 80018de:	e002      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018e2:	623b      	str	r3, [r7, #32]
      break;
 80018e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e6:	6a3b      	ldr	r3, [r7, #32]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	372c      	adds	r7, #44	; 0x2c
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40023800 	.word	0x40023800
 80018f8:	00f42400 	.word	0x00f42400
 80018fc:	017d7840 	.word	0x017d7840

08001900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_RCC_GetHCLKFreq+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000078 	.word	0x20000078

08001918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800191e:	f7ff ffef 	bl	8001900 <HAL_RCC_GetHCLKFreq>
 8001922:	4601      	mov	r1, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800192c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001930:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	603b      	str	r3, [r7, #0]
  return(result);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	0800314c 	.word	0x0800314c

0800195c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001962:	f7ff ffcd 	bl	8001900 <HAL_RCC_GetHCLKFreq>
 8001966:	4601      	mov	r1, r0
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8001970:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001974:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	603b      	str	r3, [r7, #0]
  return(result);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_RCC_GetPCLK2Freq+0x40>)
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	0800314c 	.word	0x0800314c

080019a0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e03f      	b.n	8001a32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f001 fa28 	bl	8002e1c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	68d2      	ldr	r2, [r2, #12]
 80019de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fd03 	bl	80023f0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	6912      	ldr	r2, [r2, #16]
 80019f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	6952      	ldr	r2, [r2, #20]
 8001a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a08:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	68d2      	ldr	r2, [r2, #12]
 8001a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a18:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b088      	sub	sp, #32
 8001a3e:	af02      	add	r7, sp, #8
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4613      	mov	r3, r2
 8001a48:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	f040 8082 	bne.w	8001b60 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_UART_Transmit+0x2e>
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e07a      	b.n	8001b62 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_UART_Transmit+0x40>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e073      	b.n	8001b62 <HAL_UART_Transmit+0x128>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2221      	movs	r2, #33	; 0x21
 8001a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a90:	f7fe fcbe 	bl	8000410 <HAL_GetTick>
 8001a94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	88fa      	ldrh	r2, [r7, #6]
 8001a9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	88fa      	ldrh	r2, [r7, #6]
 8001aa0:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001aa2:	e041      	b.n	8001b28 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aba:	d121      	bne.n	8001b00 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2180      	movs	r1, #128	; 0x80
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fb19 	bl	80020fe <UART_WaitOnFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e045      	b.n	8001b62 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	8812      	ldrh	r2, [r2, #0]
 8001ae2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ae6:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d103      	bne.n	8001af8 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	3302      	adds	r3, #2
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	e017      	b.n	8001b28 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	3301      	adds	r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	e013      	b.n	8001b28 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2200      	movs	r2, #0
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 faf7 	bl	80020fe <UART_WaitOnFlagUntilTimeout>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e023      	b.n	8001b62 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1c59      	adds	r1, r3, #1
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1b8      	bne.n	8001aa4 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2140      	movs	r1, #64	; 0x40
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 fade 	bl	80020fe <UART_WaitOnFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e00a      	b.n	8001b62 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e000      	b.n	8001b62 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001b60:	2302      	movs	r3, #2
  }
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_UART_Transmit_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b20      	cmp	r3, #32
 8001b84:	d153      	bne.n	8001c2e <HAL_UART_Transmit_DMA+0xc2>
  {
    if((pData == NULL ) || (Size == 0))
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_UART_Transmit_DMA+0x26>
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e04c      	b.n	8001c30 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_UART_Transmit_DMA+0x38>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e045      	b.n	8001c30 <HAL_UART_Transmit_DMA+0xc4>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	88fa      	ldrh	r2, [r7, #6]
 8001bb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	88fa      	ldrh	r2, [r7, #6]
 8001bbc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2221      	movs	r2, #33	; 0x21
 8001bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <HAL_UART_Transmit_DMA+0xcc>)
 8001bd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_UART_Transmit_DMA+0xd0>)
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_UART_Transmit_DMA+0xd4>)
 8001be2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	2200      	movs	r2, #0
 8001bea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA Stream */
    tmp = (uint32_t*)&pData;
 8001bec:	f107 0308 	add.w	r3, r7, #8
 8001bf0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	461a      	mov	r2, r3
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	f7fe fdf4 	bl	80007f0 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c10:	601a      	str	r2, [r3, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	6952      	ldr	r2, [r2, #20]
 8001c24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c28:	615a      	str	r2, [r3, #20]
    
    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	08001f79 	.word	0x08001f79
 8001c3c:	08001fcb 	.word	0x08001fcb
 8001c40:	0800206b 	.word	0x0800206b

08001c44 <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d166      	bne.n	8001d2c <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_UART_Receive_DMA+0x26>
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e05f      	b.n	8001d2e <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_UART_Receive_DMA+0x38>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e058      	b.n	8001d2e <HAL_UART_Receive_DMA+0xea>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2222      	movs	r2, #34	; 0x22
 8001c9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca2:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <HAL_UART_Receive_DMA+0xf4>)
 8001ca4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001caa:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <HAL_UART_Receive_DMA+0xf8>)
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb2:	4a23      	ldr	r2, [pc, #140]	; (8001d40 <HAL_UART_Receive_DMA+0xfc>)
 8001cb4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cba:	2200      	movs	r2, #0
 8001cbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	f7fe fd8b 	bl	80007f0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	68d2      	ldr	r2, [r2, #12]
 8001d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d06:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	6952      	ldr	r2, [r2, #20]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	6952      	ldr	r2, [r2, #20]
 8001d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d26:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8001d2c:	2302      	movs	r3, #2
  }
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	08001fe7 	.word	0x08001fe7
 8001d3c:	0800204f 	.word	0x0800204f
 8001d40:	0800206b 	.word	0x0800206b

08001d44 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10d      	bne.n	8001d96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_UART_IRQHandler+0x52>
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fab4 	bl	80022fc <UART_Receive_IT>
      return;
 8001d94:	e0cc      	b.n	8001f30 <HAL_UART_IRQHandler+0x1ec>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80ab 	beq.w	8001ef4 <HAL_UART_IRQHandler+0x1b0>
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_UART_IRQHandler+0x70>
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80a0 	beq.w	8001ef4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00a      	beq.n	8001dd4 <HAL_UART_IRQHandler+0x90>
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00a      	beq.n	8001df4 <HAL_UART_IRQHandler+0xb0>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	f043 0202 	orr.w	r2, r3, #2
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00a      	beq.n	8001e14 <HAL_UART_IRQHandler+0xd0>
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	f043 0204 	orr.w	r2, r3, #4
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <HAL_UART_IRQHandler+0xf0>
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	f043 0208 	orr.w	r2, r3, #8
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d078      	beq.n	8001f2e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_UART_IRQHandler+0x112>
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fa53 	bl	80022fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf14      	ite	ne
 8001e64:	2301      	movne	r3, #1
 8001e66:	2300      	moveq	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <HAL_UART_IRQHandler+0x13a>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d031      	beq.n	8001ee2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f99d 	bl	80021be <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d023      	beq.n	8001eda <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	6952      	ldr	r2, [r2, #20]
 8001e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ea0:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d013      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eae:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <HAL_UART_IRQHandler+0x1f4>)
 8001eb0:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fcfa 	bl	80008b0 <HAL_DMA_Abort_IT>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d016      	beq.n	8001ef0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed0:	e00e      	b.n	8001ef0 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f846 	bl	8001f64 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed8:	e00a      	b.n	8001ef0 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f842 	bl	8001f64 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ee0:	e006      	b.n	8001ef0 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f83e 	bl	8001f64 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001eee:	e01e      	b.n	8001f2e <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef0:	bf00      	nop
    return;
 8001ef2:	e01c      	b.n	8001f2e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d008      	beq.n	8001f10 <HAL_UART_IRQHandler+0x1cc>
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f98a 	bl	8002222 <UART_Transmit_IT>
    return;
 8001f0e:	e00f      	b.n	8001f30 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_UART_IRQHandler+0x1ec>
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f9d1 	bl	80022cc <UART_EndTransmit_IT>
    return;
 8001f2a:	bf00      	nop
 8001f2c:	e000      	b.n	8001f30 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001f2e:	bf00      	nop
  }
}
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	080021fb 	.word	0x080021fb

08001f3c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <UART_DMATransmitCplt>:
  * @brief  DMA UART transmit process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f84:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d113      	bne.n	8001fbc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	6952      	ldr	r2, [r2, #20]
 8001fa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	68d2      	ldr	r2, [r2, #12]
 8001fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fb8:	60da      	str	r2, [r3, #12]
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }
}
 8001fba:	e002      	b.n	8001fc2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fcfd 	bl	80029bc <HAL_UART_TxCpltCallback>
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <UART_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f7ff ffaf 	bl	8001f3c <HAL_UART_TxHalfCpltCallback>
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d11e      	bne.n	8002040 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	68d2      	ldr	r2, [r2, #12]
 8002012:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002016:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	6952      	ldr	r2, [r2, #20]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	6952      	ldr	r2, [r2, #20]
 8002032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002036:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 fcdb 	bl	80029fc <HAL_UART_RxCpltCallback>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff ff77 	bl	8001f50 <HAL_UART_RxHalfCpltCallback>
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf14      	ite	ne
 800208a:	2301      	movne	r3, #1
 800208c:	2300      	moveq	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b21      	cmp	r3, #33	; 0x21
 800209c:	d108      	bne.n	80020b0 <UART_DMAError+0x46>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2200      	movs	r2, #0
 80020a8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80020aa:	68b8      	ldr	r0, [r7, #8]
 80020ac:	f000 f871 	bl	8002192 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	bf14      	ite	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	2300      	moveq	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b22      	cmp	r3, #34	; 0x22
 80020d0:	d108      	bne.n	80020e4 <UART_DMAError+0x7a>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2200      	movs	r2, #0
 80020dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80020de:	68b8      	ldr	r0, [r7, #8]
 80020e0:	f000 f86d 	bl	80021be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e8:	f043 0210 	orr.w	r2, r3, #16
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80020f0:	68b8      	ldr	r0, [r7, #8]
 80020f2:	f7ff ff37 	bl	8001f64 <HAL_UART_ErrorCallback>
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	4613      	mov	r3, r2
 800210c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800210e:	e02c      	b.n	800216a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	d028      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <UART_WaitOnFlagUntilTimeout+0x30>
 800211e:	f7fe f977 	bl	8000410 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	429a      	cmp	r2, r3
 800212c:	d91d      	bls.n	800216a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	68d2      	ldr	r2, [r2, #12]
 8002138:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800213c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	6952      	ldr	r2, [r2, #20]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e00f      	b.n	800218a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	429a      	cmp	r2, r3
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	429a      	cmp	r2, r3
 8002186:	d0c3      	beq.n	8002110 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	68d2      	ldr	r2, [r2, #12]
 80021a4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80021a8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	68d2      	ldr	r2, [r2, #12]
 80021d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021d4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	6952      	ldr	r2, [r2, #20]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff fea5 	bl	8001f64 <HAL_UART_ErrorCallback>
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002222:	b480      	push	{r7}
 8002224:	b085      	sub	sp, #20
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b21      	cmp	r3, #33	; 0x21
 8002234:	d143      	bne.n	80022be <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223e:	d119      	bne.n	8002274 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	8812      	ldrh	r2, [r2, #0]
 800224e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002252:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	1c9a      	adds	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	621a      	str	r2, [r3, #32]
 8002266:	e00e      	b.n	8002286 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	621a      	str	r2, [r3, #32]
 8002272:	e008      	b.n	8002286 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	1c58      	adds	r0, r3, #1
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	6208      	str	r0, [r1, #32]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29b      	uxth	r3, r3
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4619      	mov	r1, r3
 8002294:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10f      	bne.n	80022ba <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	68d2      	ldr	r2, [r2, #12]
 80022a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	68d2      	ldr	r2, [r2, #12]
 80022b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
  }
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	68d2      	ldr	r2, [r2, #12]
 80022de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022e2:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fb65 	bl	80029bc <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b22      	cmp	r3, #34	; 0x22
 800230e:	d169      	bne.n	80023e4 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002318:	d123      	bne.n	8002362 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10e      	bne.n	8002346 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	b29b      	uxth	r3, r3
 8002330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	1c9a      	adds	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
 8002344:	e029      	b.n	800239a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	b29b      	uxth	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	629a      	str	r2, [r3, #40]	; 0x28
 8002360:	e01b      	b.n	800239a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	1c59      	adds	r1, r3, #1
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6291      	str	r1, [r2, #40]	; 0x28
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	6852      	ldr	r2, [r2, #4]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	e00c      	b.n	800239a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	1c59      	adds	r1, r3, #1
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6291      	str	r1, [r2, #40]	; 0x28
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	6852      	ldr	r2, [r2, #4]
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4619      	mov	r1, r3
 80023a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d118      	bne.n	80023e0 <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	68d2      	ldr	r2, [r2, #12]
 80023b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80023bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	6952      	ldr	r2, [r2, #20]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fb10 	bl	80029fc <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	e002      	b.n	80023e6 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800240a:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800242c:	f023 030c 	bic.w	r3, r3, #12
 8002430:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4313      	orrs	r3, r2
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002464:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002480:	f040 80e4 	bne.w	800264c <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4aab      	ldr	r2, [pc, #684]	; (8002738 <UART_SetConfig+0x348>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d004      	beq.n	8002498 <UART_SetConfig+0xa8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4aaa      	ldr	r2, [pc, #680]	; (800273c <UART_SetConfig+0x34c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d16c      	bne.n	8002572 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681c      	ldr	r4, [r3, #0]
 800249c:	f7ff fa5e 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009a      	lsls	r2, r3, #2
 80024aa:	441a      	add	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	4aa2      	ldr	r2, [pc, #648]	; (8002740 <UART_SetConfig+0x350>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	011d      	lsls	r5, r3, #4
 80024c0:	f7ff fa4c 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	009a      	lsls	r2, r3, #2
 80024ce:	441a      	add	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80024da:	f7ff fa3f 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	009a      	lsls	r2, r3, #2
 80024e8:	441a      	add	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	4a92      	ldr	r2, [pc, #584]	; (8002740 <UART_SetConfig+0x350>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2264      	movs	r2, #100	; 0x64
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	1af3      	subs	r3, r6, r3
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	3332      	adds	r3, #50	; 0x32
 8002508:	4a8d      	ldr	r2, [pc, #564]	; (8002740 <UART_SetConfig+0x350>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002516:	441d      	add	r5, r3
 8002518:	f7ff fa20 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 800251c:	4602      	mov	r2, r0
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	441a      	add	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002532:	f7ff fa13 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 8002536:	4602      	mov	r2, r0
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	009a      	lsls	r2, r3, #2
 8002540:	441a      	add	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	4a7c      	ldr	r2, [pc, #496]	; (8002740 <UART_SetConfig+0x350>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2264      	movs	r2, #100	; 0x64
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	1af3      	subs	r3, r6, r3
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	3332      	adds	r3, #50	; 0x32
 8002560:	4a77      	ldr	r2, [pc, #476]	; (8002740 <UART_SetConfig+0x350>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	442b      	add	r3, r5
 800256e:	60a3      	str	r3, [r4, #8]
 8002570:	e154      	b.n	800281c <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681c      	ldr	r4, [r3, #0]
 8002576:	f7ff f9cf 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 800257a:	4602      	mov	r2, r0
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009a      	lsls	r2, r3, #2
 8002584:	441a      	add	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	4a6b      	ldr	r2, [pc, #428]	; (8002740 <UART_SetConfig+0x350>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	011d      	lsls	r5, r3, #4
 800259a:	f7ff f9bd 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 800259e:	4602      	mov	r2, r0
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	009a      	lsls	r2, r3, #2
 80025a8:	441a      	add	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80025b4:	f7ff f9b0 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	009a      	lsls	r2, r3, #2
 80025c2:	441a      	add	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	4a5c      	ldr	r2, [pc, #368]	; (8002740 <UART_SetConfig+0x350>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	2264      	movs	r2, #100	; 0x64
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	1af3      	subs	r3, r6, r3
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	3332      	adds	r3, #50	; 0x32
 80025e2:	4a57      	ldr	r2, [pc, #348]	; (8002740 <UART_SetConfig+0x350>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025f0:	441d      	add	r5, r3
 80025f2:	f7ff f991 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 80025f6:	4602      	mov	r2, r0
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	009a      	lsls	r2, r3, #2
 8002600:	441a      	add	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fbb2 f6f3 	udiv	r6, r2, r3
 800260c:	f7ff f984 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 8002610:	4602      	mov	r2, r0
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	009a      	lsls	r2, r3, #2
 800261a:	441a      	add	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fbb2 f3f3 	udiv	r3, r2, r3
 8002626:	4a46      	ldr	r2, [pc, #280]	; (8002740 <UART_SetConfig+0x350>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	2264      	movs	r2, #100	; 0x64
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	1af3      	subs	r3, r6, r3
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	3332      	adds	r3, #50	; 0x32
 800263a:	4a41      	ldr	r2, [pc, #260]	; (8002740 <UART_SetConfig+0x350>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	442b      	add	r3, r5
 8002648:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800264a:	e0e7      	b.n	800281c <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a39      	ldr	r2, [pc, #228]	; (8002738 <UART_SetConfig+0x348>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d004      	beq.n	8002660 <UART_SetConfig+0x270>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a38      	ldr	r2, [pc, #224]	; (800273c <UART_SetConfig+0x34c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d171      	bne.n	8002744 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681c      	ldr	r4, [r3, #0]
 8002664:	f7ff f97a 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 8002668:	4602      	mov	r2, r0
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	009a      	lsls	r2, r3, #2
 8002672:	441a      	add	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	4a30      	ldr	r2, [pc, #192]	; (8002740 <UART_SetConfig+0x350>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	011d      	lsls	r5, r3, #4
 8002688:	f7ff f968 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 800268c:	4602      	mov	r2, r0
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	009a      	lsls	r2, r3, #2
 8002696:	441a      	add	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	fbb2 f6f3 	udiv	r6, r2, r3
 80026a2:	f7ff f95b 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 80026a6:	4602      	mov	r2, r0
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	009a      	lsls	r2, r3, #2
 80026b0:	441a      	add	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	4a20      	ldr	r2, [pc, #128]	; (8002740 <UART_SetConfig+0x350>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2264      	movs	r2, #100	; 0x64
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	1af3      	subs	r3, r6, r3
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	3332      	adds	r3, #50	; 0x32
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <UART_SetConfig+0x350>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026dc:	441d      	add	r5, r3
 80026de:	f7ff f93d 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009a      	lsls	r2, r3, #2
 80026ec:	441a      	add	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80026f8:	f7ff f930 	bl	800195c <HAL_RCC_GetPCLK2Freq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	009a      	lsls	r2, r3, #2
 8002706:	441a      	add	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <UART_SetConfig+0x350>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	2264      	movs	r2, #100	; 0x64
 800271c:	fb02 f303 	mul.w	r3, r2, r3
 8002720:	1af3      	subs	r3, r6, r3
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	3332      	adds	r3, #50	; 0x32
 8002726:	4a06      	ldr	r2, [pc, #24]	; (8002740 <UART_SetConfig+0x350>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	442b      	add	r3, r5
 8002734:	60a3      	str	r3, [r4, #8]
 8002736:	e071      	b.n	800281c <UART_SetConfig+0x42c>
 8002738:	40011000 	.word	0x40011000
 800273c:	40011400 	.word	0x40011400
 8002740:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681c      	ldr	r4, [r3, #0]
 8002748:	f7ff f8e6 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 800274c:	4602      	mov	r2, r0
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	009a      	lsls	r2, r3, #2
 8002756:	441a      	add	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	4a30      	ldr	r2, [pc, #192]	; (8002824 <UART_SetConfig+0x434>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	011d      	lsls	r5, r3, #4
 800276c:	f7ff f8d4 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 8002770:	4602      	mov	r2, r0
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	009a      	lsls	r2, r3, #2
 800277a:	441a      	add	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	fbb2 f6f3 	udiv	r6, r2, r3
 8002786:	f7ff f8c7 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 800278a:	4602      	mov	r2, r0
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009a      	lsls	r2, r3, #2
 8002794:	441a      	add	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	4a20      	ldr	r2, [pc, #128]	; (8002824 <UART_SetConfig+0x434>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2264      	movs	r2, #100	; 0x64
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	1af3      	subs	r3, r6, r3
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	3332      	adds	r3, #50	; 0x32
 80027b4:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <UART_SetConfig+0x434>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c0:	441d      	add	r5, r3
 80027c2:	f7ff f8a9 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009a      	lsls	r2, r3, #2
 80027d0:	441a      	add	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80027dc:	f7ff f89c 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	009a      	lsls	r2, r3, #2
 80027ea:	441a      	add	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f6:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <UART_SetConfig+0x434>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	2264      	movs	r2, #100	; 0x64
 8002800:	fb02 f303 	mul.w	r3, r2, r3
 8002804:	1af3      	subs	r3, r6, r3
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	3332      	adds	r3, #50	; 0x32
 800280a:	4a06      	ldr	r2, [pc, #24]	; (8002824 <UART_SetConfig+0x434>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	095b      	lsrs	r3, r3, #5
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	442b      	add	r3, r5
 8002818:	60a3      	str	r3, [r4, #8]
}
 800281a:	e7ff      	b.n	800281c <UART_SetConfig+0x42c>
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002824:	51eb851f 	.word	0x51eb851f

08002828 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e015      	b.n	8002866 <HAL_WWDG_Init+0x3e>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fbae 	bl	8002f9c <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	68d2      	ldr	r2, [r2, #12]
 8002848:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800284c:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6911      	ldr	r1, [r2, #16]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6852      	ldr	r2, [r2, #4]
 800285a:	4311      	orrs	r1, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6892      	ldr	r2, [r2, #8]
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68d2      	ldr	r2, [r2, #12]
 800287e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <inicializar_gps>:
uint8_t deinit_VTG[] = "$PSRF103,05,00,00,01*21\r\n";

__IO ITStatus UartReady = RESET;

void inicializar_gps(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_DMA(&huart6, (uint8_t *) parsing, 80) != HAL_OK) {
 8002894:	2250      	movs	r2, #80	; 0x50
 8002896:	4930      	ldr	r1, [pc, #192]	; (8002958 <inicializar_gps+0xc8>)
 8002898:	4830      	ldr	r0, [pc, #192]	; (800295c <inicializar_gps+0xcc>)
 800289a:	f7ff f9d3 	bl	8001c44 <HAL_UART_Receive_DMA>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <inicializar_gps+0x18>
		Error_Handler();
 80028a4:	f000 fa7e 	bl	8002da4 <Error_Handler>
	}
	while (UartReady != SET) {}
 80028a8:	bf00      	nop
 80028aa:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <inicializar_gps+0xd0>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d1fa      	bne.n	80028aa <inicializar_gps+0x1a>
	UartReady = RESET;
 80028b4:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <inicializar_gps+0xd0>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GSV, sizeof(deinit_GSV)) != HAL_OK) {
 80028ba:	221a      	movs	r2, #26
 80028bc:	4929      	ldr	r1, [pc, #164]	; (8002964 <inicializar_gps+0xd4>)
 80028be:	4827      	ldr	r0, [pc, #156]	; (800295c <inicializar_gps+0xcc>)
 80028c0:	f7ff f954 	bl	8001b6c <HAL_UART_Transmit_DMA>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <inicializar_gps+0x3e>
		Error_Handler();
 80028ca:	f000 fa6b 	bl	8002da4 <Error_Handler>
	}
	while (UartReady != SET) {}
 80028ce:	bf00      	nop
 80028d0:	4b23      	ldr	r3, [pc, #140]	; (8002960 <inicializar_gps+0xd0>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d1fa      	bne.n	80028d0 <inicializar_gps+0x40>
	UartReady = RESET;
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <inicializar_gps+0xd0>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GSA, sizeof(deinit_GSA)) != HAL_OK) {
 80028e0:	221a      	movs	r2, #26
 80028e2:	4921      	ldr	r1, [pc, #132]	; (8002968 <inicializar_gps+0xd8>)
 80028e4:	481d      	ldr	r0, [pc, #116]	; (800295c <inicializar_gps+0xcc>)
 80028e6:	f7ff f941 	bl	8001b6c <HAL_UART_Transmit_DMA>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <inicializar_gps+0x64>
		Error_Handler();
 80028f0:	f000 fa58 	bl	8002da4 <Error_Handler>
	}
	while (UartReady != SET) {}
 80028f4:	bf00      	nop
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <inicializar_gps+0xd0>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d1fa      	bne.n	80028f6 <inicializar_gps+0x66>
	UartReady = RESET;
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <inicializar_gps+0xd0>)
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) deinit_GGA, sizeof(deinit_GGA)) != HAL_OK) {
 8002906:	221a      	movs	r2, #26
 8002908:	4918      	ldr	r1, [pc, #96]	; (800296c <inicializar_gps+0xdc>)
 800290a:	4814      	ldr	r0, [pc, #80]	; (800295c <inicializar_gps+0xcc>)
 800290c:	f7ff f92e 	bl	8001b6c <HAL_UART_Transmit_DMA>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <inicializar_gps+0x8a>
		Error_Handler();
 8002916:	f000 fa45 	bl	8002da4 <Error_Handler>
	}
	while (UartReady != SET) {}
 800291a:	bf00      	nop
 800291c:	4b10      	ldr	r3, [pc, #64]	; (8002960 <inicializar_gps+0xd0>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d1fa      	bne.n	800291c <inicializar_gps+0x8c>
	UartReady = RESET;
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <inicializar_gps+0xd0>)
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_Transmit_DMA(&huart6, (uint8_t *) init_RMC, sizeof(init_RMC)) != HAL_OK) {
 800292c:	221a      	movs	r2, #26
 800292e:	4910      	ldr	r1, [pc, #64]	; (8002970 <inicializar_gps+0xe0>)
 8002930:	480a      	ldr	r0, [pc, #40]	; (800295c <inicializar_gps+0xcc>)
 8002932:	f7ff f91b 	bl	8001b6c <HAL_UART_Transmit_DMA>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <inicializar_gps+0xb0>
		Error_Handler();
 800293c:	f000 fa32 	bl	8002da4 <Error_Handler>
	}
	while (UartReady != SET) {}
 8002940:	bf00      	nop
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <inicializar_gps+0xd0>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d1fa      	bne.n	8002942 <inicializar_gps+0xb2>
	UartReady = RESET;
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <inicializar_gps+0xd0>)
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200131ac 	.word	0x200131ac
 800295c:	2001326c 	.word	0x2001326c
 8002960:	2000009c 	.word	0x2000009c
 8002964:	20000040 	.word	0x20000040
 8002968:	20000024 	.word	0x20000024
 800296c:	20000008 	.word	0x20000008
 8002970:	2000005c 	.word	0x2000005c

08002974 <guardar_coordenadas>:
  * @brief  Las tramas obtenidas se guardan en un struct
  * @param  None
  * @retval None
  */
void guardar_coordenadas(char buffer[])
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	strcpy(mibuffer[c].datos, buffer);
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <guardar_coordenadas+0x40>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	22c8      	movs	r2, #200	; 0xc8
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	4a0c      	ldr	r2, [pc, #48]	; (80029b8 <guardar_coordenadas+0x44>)
 8002988:	4413      	add	r3, r2
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fbb3 	bl	80030f8 <strcpy>
	c++;
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <guardar_coordenadas+0x40>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <guardar_coordenadas+0x40>)
 800299a:	6013      	str	r3, [r2, #0]
	if (c == 199)
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <guardar_coordenadas+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2bc7      	cmp	r3, #199	; 0xc7
 80029a2:	d102      	bne.n	80029aa <guardar_coordenadas+0x36>
	{
		c = 0;
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <guardar_coordenadas+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
	}
//	obtener_coordenadas();
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000098 	.word	0x20000098
 80029b8:	20009520 	.word	0x20009520

080029bc <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
 {
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART6) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <HAL_UART_TxCpltCallback+0x34>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10a      	bne.n	80029e4 <HAL_UART_TxCpltCallback+0x28>
		(&huart6)->gState = HAL_UART_STATE_READY;
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_UART_TxCpltCallback+0x38>)
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		UartReady = SET;
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_UART_TxCpltCallback+0x3c>)
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
		(&huart6)->RxState = HAL_UART_STATE_READY;
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_UART_TxCpltCallback+0x38>)
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	}
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40011400 	.word	0x40011400
 80029f4:	2001326c 	.word	0x2001326c
 80029f8:	2000009c 	.word	0x2000009c

080029fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART6) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_UART_RxCpltCallback+0x34>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10c      	bne.n	8002a28 <HAL_UART_RxCpltCallback+0x2c>
		(&huart6)->RxState = HAL_UART_STATE_READY;
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_UART_RxCpltCallback+0x38>)
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		imprimir(parsing);
 8002a16:	4808      	ldr	r0, [pc, #32]	; (8002a38 <HAL_UART_RxCpltCallback+0x3c>)
 8002a18:	f000 f928 	bl	8002c6c <imprimir>
		guardar_coordenadas(parsing);
 8002a1c:	4806      	ldr	r0, [pc, #24]	; (8002a38 <HAL_UART_RxCpltCallback+0x3c>)
 8002a1e:	f7ff ffa9 	bl	8002974 <guardar_coordenadas>
		UartReady = SET;
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_UART_RxCpltCallback+0x40>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]

	}
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40011400 	.word	0x40011400
 8002a34:	2001326c 	.word	0x2001326c
 8002a38:	200131ac 	.word	0x200131ac
 8002a3c:	2000009c 	.word	0x2000009c

08002a40 <GPIO_Init>:


/** Pinout Configuration
*/
void GPIO_Init(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <GPIO_Init+0x68>)
 8002a4c:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <GPIO_Init+0x68>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <GPIO_Init+0x68>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
  __GPIOC_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <GPIO_Init+0x68>)
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <GPIO_Init+0x68>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <GPIO_Init+0x68>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
  __GPIOB_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <GPIO_Init+0x68>)
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <GPIO_Init+0x68>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <GPIO_Init+0x68>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]

}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800

08002aac <UART2_Init>:

/* USART2 init function */
void UART2_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <UART2_Init+0x40>)
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <UART2_Init+0x44>)
 8002ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <UART2_Init+0x40>)
 8002ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002abe:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <UART2_Init+0x40>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <UART2_Init+0x40>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <UART2_Init+0x40>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <UART2_Init+0x40>)
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <UART2_Init+0x40>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <UART2_Init+0x40>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 8002ae2:	4802      	ldr	r0, [pc, #8]	; (8002aec <UART2_Init+0x40>)
 8002ae4:	f7fe ff5c 	bl	80019a0 <HAL_UART_Init>

}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20013304 	.word	0x20013304
 8002af0:	40004400 	.word	0x40004400

08002af4 <UART6_Init>:

/* USART1 init function */
void UART6_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0

	huart6.Instance = USART6;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <UART6_Init+0x40>)
 8002afa:	4a0f      	ldr	r2, [pc, #60]	; (8002b38 <UART6_Init+0x44>)
 8002afc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <UART6_Init+0x40>)
 8002b00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b04:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <UART6_Init+0x40>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <UART6_Init+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <UART6_Init+0x40>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <UART6_Init+0x40>)
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <UART6_Init+0x40>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <UART6_Init+0x40>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart6);
 8002b2a:	4802      	ldr	r0, [pc, #8]	; (8002b34 <UART6_Init+0x40>)
 8002b2c:	f7fe ff38 	bl	80019a0 <HAL_UART_Init>

}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	2001326c 	.word	0x2001326c
 8002b38:	40011400 	.word	0x40011400

08002b3c <DMA_Init>:

/**
  * Enable DMA controller clock
  */
void DMA_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __DMA2_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <DMA_Init+0x4c>)
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <DMA_Init+0x4c>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <DMA_Init+0x4c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	203a      	movs	r0, #58	; 0x3a
 8002b64:	f7fd fd53 	bl	800060e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002b68:	203a      	movs	r0, #58	; 0x3a
 8002b6a:	f7fd fd6c 	bl	8000646 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	2045      	movs	r0, #69	; 0x45
 8002b74:	f7fd fd4b 	bl	800060e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002b78:	2045      	movs	r0, #69	; 0x45
 8002b7a:	f7fd fd64 	bl	8000646 <HAL_NVIC_EnableIRQ>

}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800

08002b8c <WWDG_Init>:

}

/* WWDG init function */
void WWDG_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <WWDG_Init+0x30>)
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <WWDG_Init+0x34>)
 8002b94:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <WWDG_Init+0x30>)
 8002b98:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002b9c:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window    = 80;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <WWDG_Init+0x30>)
 8002ba0:	2250      	movs	r2, #80	; 0x50
 8002ba2:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter   = 127;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <WWDG_Init+0x30>)
 8002ba6:	227f      	movs	r2, #127	; 0x7f
 8002ba8:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode   = WWDG_EWI_DISABLE;
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <WWDG_Init+0x30>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  HAL_WWDG_Init(&hwwdg);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <WWDG_Init+0x30>)
 8002bb2:	f7ff fe39 	bl	8002828 <HAL_WWDG_Init>

}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20013258 	.word	0x20013258
 8002bc0:	40002c00 	.word	0x40002c00

08002bc4 <main>:
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart6;

char pars[80];

int main(void) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0

	/* MCU Configuration----------------------------------------------------------*/
	uint32_t delay;

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002bca:	f7fd fbd5 	bl	8000378 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002bce:	f000 f88d 	bl	8002cec <SystemClock_Config>
	/* Initialize all configured peripherals */
	GPIO_Init();
 8002bd2:	f7ff ff35 	bl	8002a40 <GPIO_Init>
	BSP_LED_Init(LED2);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7fd fb06 	bl	80001e8 <BSP_LED_Init>

	UART2_Init();
 8002bdc:	f7ff ff66 	bl	8002aac <UART2_Init>
	DMA_Init();
 8002be0:	f7ff ffac 	bl	8002b3c <DMA_Init>
	UART6_Init();
 8002be4:	f7ff ff86 	bl	8002af4 <UART6_Init>

	imprimir("Comienzo programa\r\n");
 8002be8:	481d      	ldr	r0, [pc, #116]	; (8002c60 <main+0x9c>)
 8002bea:	f000 f83f 	bl	8002c6c <imprimir>

	inicializar_gps();
 8002bee:	f7ff fe4f 	bl	8002890 <inicializar_gps>

//  I2C1_Init();
//  SPI1_Init();
//
	/*##-1- Check if the system has resumed from WWDG reset ####################*/
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET) {
 8002bf2:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <main+0xa0>)
 8002bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <main+0x4e>
		/* WWDGRST flag set: Turn LED2 on */
		BSP_LED_On(LED2);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7fd fb28 	bl	8000254 <BSP_LED_On>

		/* Insert 4s delay */
		HAL_Delay(4000);
 8002c04:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002c08:	f7fd fc0e 	bl	8000428 <HAL_Delay>

		/* Prior to clear WWDGRST flag: Turn LED2 off */
		BSP_LED_Off(LED2);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7fd fb35 	bl	800027c <BSP_LED_Off>
	}

	/* Clear reset flags in any case */
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8002c12:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <main+0xa0>)
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <main+0xa0>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c1c:	6753      	str	r3, [r2, #116]	; 0x74

	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002c1e:	2101      	movs	r1, #1
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7fd fb53 	bl	80002cc <BSP_PB_Init>

	WWDG_Init();
 8002c26:	f7ff ffb1 	bl	8002b8c <WWDG_Init>
//
//	/* calculate delay to enter window. Add 1ms to secure round number to upper number  */
	delay = TimeoutCalculation((hwwdg.Init.Counter - hwwdg.Init.Window) + 1) + 1;
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <main+0xa4>)
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <main+0xa4>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f82e 	bl	8002c98 <TimeoutCalculation>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	3301      	adds	r3, #1
 8002c40:	607b      	str	r3, [r7, #4]

	while (1) {
		/* Toggle LED2 */
		BSP_LED_Toggle(LED2);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fd fb2e 	bl	80002a4 <BSP_LED_Toggle>
		/* Insert calculated delay */
		HAL_Delay(delay);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fd fbed 	bl	8000428 <HAL_Delay>
//		HAL_Delay(500);

		if (HAL_WWDG_Refresh(&hwwdg) != HAL_OK) {
 8002c4e:	4806      	ldr	r0, [pc, #24]	; (8002c68 <main+0xa4>)
 8002c50:	f7ff fe0d 	bl	800286e <HAL_WWDG_Refresh>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f3      	beq.n	8002c42 <main+0x7e>
			Error_Handler();
 8002c5a:	f000 f8a3 	bl	8002da4 <Error_Handler>
		BSP_LED_Toggle(LED2);
 8002c5e:	e7f0      	b.n	8002c42 <main+0x7e>
 8002c60:	08003120 	.word	0x08003120
 8002c64:	40023800 	.word	0x40023800
 8002c68:	20013258 	.word	0x20013258

08002c6c <imprimir>:
		}
	}
}

void imprimir(char* msg){
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7fd faaf 	bl	80001d8 <strlen>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4803      	ldr	r0, [pc, #12]	; (8002c94 <imprimir+0x28>)
 8002c86:	f7fe fed8 	bl	8001a3a <HAL_UART_Transmit>

}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20013304 	.word	0x20013304

08002c98 <TimeoutCalculation>:
  *         WWDG with given prescaler and system clock.
  * @param  timevalue: period in term of WWDG counter cycle.
  * @retval None
  */
static uint32_t TimeoutCalculation(uint32_t timevalue)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t timeoutvalue = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  uint32_t pclk1 = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
  uint32_t wdgtb = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]

  /* considering APB divider is still 1, use HCLK value */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cac:	f7fe fe34 	bl	8001918 <HAL_RCC_GetPCLK1Freq>
 8002cb0:	6138      	str	r0, [r7, #16]

  /* get prescaler */
  wdgtb = (1 << ((hwwdg.Init.Prescaler) >> 7)); /* 2^WDGTB[1:0] */
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <TimeoutCalculation+0x4c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	09db      	lsrs	r3, r3, #7
 8002cb8:	2201      	movs	r2, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* calculate timeout */
  timeoutvalue = ((4096 * wdgtb * timevalue) / (pclk1 / 1000));
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	fb02 f303 	mul.w	r3, r2, r3
 8002cc8:	031a      	lsls	r2, r3, #12
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4906      	ldr	r1, [pc, #24]	; (8002ce8 <TimeoutCalculation+0x50>)
 8002cce:	fba1 1303 	umull	r1, r3, r1, r3
 8002cd2:	099b      	lsrs	r3, r3, #6
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]

  return timeoutvalue;
 8002cda:	697b      	ldr	r3, [r7, #20]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20013258 	.word	0x20013258
 8002ce8:	10624dd3 	.word	0x10624dd3

08002cec <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b094      	sub	sp, #80	; 0x50
 8002cf0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	4a29      	ldr	r2, [pc, #164]	; (8002d9c <SystemClock_Config+0xb0>)
 8002cf8:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <SystemClock_Config+0xb0>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b26      	ldr	r3, [pc, #152]	; (8002d9c <SystemClock_Config+0xb0>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	4a23      	ldr	r2, [pc, #140]	; (8002da0 <SystemClock_Config+0xb4>)
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <SystemClock_Config+0xb4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <SystemClock_Config+0xb4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d32:	2301      	movs	r3, #1
 8002d34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8002d36:	2310      	movs	r3, #16
 8002d38:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002d42:	2310      	movs	r3, #16
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002d46:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d50:	2307      	movs	r3, #7
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d54:	f107 030c 	add.w	r3, r7, #12
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe f9e7 	bl	800112c <HAL_RCC_OscConfig>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002d64:	f000 f81e 	bl	8002da4 <Error_Handler>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002d68:	230f      	movs	r3, #15
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d70:	2300      	movs	r3, #0
 8002d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002d7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d82:	2103      	movs	r1, #3
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe fc2b 	bl	80015e0 <HAL_RCC_ClockConfig>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002d90:	f000 f808 	bl	8002da4 <Error_Handler>
//
//  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
//
//  /* SysTick_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}
 8002d94:	bf00      	nop
 8002d96:	3750      	adds	r7, #80	; 0x50
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40007000 	.word	0x40007000

08002da4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Turn LED3 on */
  BSP_LED_On(LED2);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fd fa53 	bl	8000254 <BSP_LED_On>

  while(1)
 8002dae:	e7fe      	b.n	8002dae <Error_Handler+0xa>

08002db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002db4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002db6:	e003      	b.n	8002dc0 <LoopCopyDataInit>

08002db8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002dba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002dbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dbe:	3104      	adds	r1, #4

08002dc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dc0:	480b      	ldr	r0, [pc, #44]	; (8002df0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002dc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dc8:	d3f6      	bcc.n	8002db8 <CopyDataInit>
  ldr  r2, =_sbss
 8002dca:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002dcc:	e002      	b.n	8002dd4 <LoopFillZerobss>

08002dce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002dd0:	f842 3b04 	str.w	r3, [r2], #4

08002dd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dd8:	d3f9      	bcc.n	8002dce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dda:	f000 f933 	bl	8003044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dde:	f000 f967 	bl	80030b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002de2:	f7ff feef 	bl	8002bc4 <main>
  bx  lr    
 8002de6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002de8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002dec:	0800315c 	.word	0x0800315c
  ldr  r0, =_sdata
 8002df0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002df4:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002df8:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002dfc:	20013404 	.word	0x20013404

08002e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e00:	e7fe      	b.n	8002e00 <ADC_IRQHandler>

08002e02 <HAL_MspInit>:

/**
 * Initializes the Global MSP.
 */

void HAL_MspInit(void) {
 8002e02:	b580      	push	{r7, lr}
 8002e04:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e06:	2003      	movs	r0, #3
 8002e08:	f7fd fbf6 	bl	80005f8 <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f7fd fbfb 	bl	800060e <HAL_NVIC_SetPriority>
}
 8002e18:	bf00      	nop
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	  if(huart->Instance==USART2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a53      	ldr	r2, [pc, #332]	; (8002f78 <HAL_UART_MspInit+0x15c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d128      	bne.n	8002e80 <HAL_UART_MspInit+0x64>
	  {
	    /* Peripheral clock enable */
	    __USART2_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <HAL_UART_MspInit+0x160>)
 8002e34:	4b51      	ldr	r3, [pc, #324]	; (8002f7c <HAL_UART_MspInit+0x160>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <HAL_UART_MspInit+0x160>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]

	    /**USART2 GPIO Configuration
	    PA2     ------> USART2_TX
	    PA3     ------> USART2_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e5a:	2307      	movs	r3, #7
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5e:	f107 0314 	add.w	r3, r7, #20
 8002e62:	4619      	mov	r1, r3
 8002e64:	4846      	ldr	r0, [pc, #280]	; (8002f80 <HAL_UART_MspInit+0x164>)
 8002e66:	f7fd ffb3 	bl	8000dd0 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e6e:	2307      	movs	r3, #7
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e72:	f107 0314 	add.w	r3, r7, #20
 8002e76:	4619      	mov	r1, r3
 8002e78:	4841      	ldr	r0, [pc, #260]	; (8002f80 <HAL_UART_MspInit+0x164>)
 8002e7a:	f7fd ffa9 	bl	8000dd0 <HAL_GPIO_Init>

//		/* Peripheral interrupt init*/
//		HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
//		HAL_NVIC_EnableIRQ(USART6_IRQn);
	}
}
 8002e7e:	e076      	b.n	8002f6e <HAL_UART_MspInit+0x152>
	  else if(huart->Instance==USART6) {
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a3f      	ldr	r2, [pc, #252]	; (8002f84 <HAL_UART_MspInit+0x168>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d171      	bne.n	8002f6e <HAL_UART_MspInit+0x152>
		__USART6_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <HAL_UART_MspInit+0x160>)
 8002e90:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <HAL_UART_MspInit+0x160>)
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f043 0320 	orr.w	r3, r3, #32
 8002e98:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9a:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <HAL_UART_MspInit+0x160>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8002ea6:	23c0      	movs	r3, #192	; 0xc0
 8002ea8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;//GPIO_PULLUP?
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4831      	ldr	r0, [pc, #196]	; (8002f88 <HAL_UART_MspInit+0x16c>)
 8002ec2:	f7fd ff85 	bl	8000dd0 <HAL_GPIO_Init>
	    hdma_usart6_rx.Instance = DMA2_Stream2;
 8002ec6:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002ec8:	4a31      	ldr	r2, [pc, #196]	; (8002f90 <HAL_UART_MspInit+0x174>)
 8002eca:	601a      	str	r2, [r3, #0]
	    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002ecc:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002ece:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002ed2:	605a      	str	r2, [r3, #4]
	    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
	    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eda:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
	    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee0:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee6:	611a      	str	r2, [r3, #16]
	    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee8:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
	    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eee:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
	    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002ef4:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002efa:	61da      	str	r2, [r3, #28]
	    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002efc:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	621a      	str	r2, [r3, #32]
	    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f02:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
	    HAL_DMA_Init(&hdma_usart6_rx);
 8002f08:	4820      	ldr	r0, [pc, #128]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002f0a:	f7fd fbc3 	bl	8000694 <HAL_DMA_Init>
	    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002f12:	635a      	str	r2, [r3, #52]	; 0x34
 8002f14:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <HAL_UART_MspInit+0x170>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6393      	str	r3, [r2, #56]	; 0x38
	    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002f1a:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <HAL_UART_MspInit+0x17c>)
 8002f1e:	601a      	str	r2, [r3, #0]
	    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002f20:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f22:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002f26:	605a      	str	r2, [r3, #4]
	    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f2a:	2240      	movs	r2, #64	; 0x40
 8002f2c:	609a      	str	r2, [r3, #8]
	    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2e:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	60da      	str	r2, [r3, #12]
	    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f3a:	611a      	str	r2, [r3, #16]
	    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f3c:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	615a      	str	r2, [r3, #20]
	    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f42:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
	    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8002f48:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f4e:	61da      	str	r2, [r3, #28]
	    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f50:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	621a      	str	r2, [r3, #32]
	    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
	    HAL_DMA_Init(&hdma_usart6_tx);
 8002f5c:	480d      	ldr	r0, [pc, #52]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f5e:	f7fd fb99 	bl	8000694 <HAL_DMA_Init>
	    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
 8002f68:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HAL_UART_MspInit+0x178>)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f6e:	bf00      	nop
 8002f70:	3728      	adds	r7, #40	; 0x28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40004400 	.word	0x40004400
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40020000 	.word	0x40020000
 8002f84:	40011400 	.word	0x40011400
 8002f88:	40020800 	.word	0x40020800
 8002f8c:	20013344 	.word	0x20013344
 8002f90:	40026440 	.word	0x40026440
 8002f94:	200133a4 	.word	0x200133a4
 8002f98:	400264a0 	.word	0x400264a0

08002f9c <HAL_WWDG_MspInit>:
		 */
		HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6 | GPIO_PIN_7);
	}
}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg) {
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	if (hwwdg->Instance == WWDG) {
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <HAL_WWDG_MspInit+0x3c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10d      	bne.n	8002fca <HAL_WWDG_MspInit+0x2e>
		/* Peripheral clock enable */
		__WWDG_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <HAL_WWDG_MspInit+0x40>)
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_WWDG_MspInit+0x40>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <HAL_WWDG_MspInit+0x40>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
	}

}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40002c00 	.word	0x40002c00
 8002fdc:	40023800 	.word	0x40023800

08002fe0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe4:	f7fd fa06 	bl	80003f4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002fe8:	f7fd fb47 	bl	800067a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External line 15_10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* As the following address is invalid (not mapped), a Hardfault exception
  will be generated with an infinite loop and when the WWDG counter falls to 63
  the WWDG reset occurs */
  *(__IO uint32_t *) 0xA0003000 = 0xFF;
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <EXTI15_10_IRQHandler+0x14>)
 8002ff6:	22ff      	movs	r2, #255	; 0xff
 8002ff8:	601a      	str	r2, [r3, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	a0003000 	.word	0xa0003000

08003008 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <USART2_IRQHandler+0x10>)
 800300e:	f7fe fe99 	bl	8001d44 <HAL_UART_IRQHandler>
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20013304 	.word	0x20013304

0800301c <DMA2_Stream2_IRQHandler>:

/**
* @brief This function handles DMA2 stream5 global interrupt.
*/
void DMA2_Stream2_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <DMA2_Stream2_IRQHandler+0x10>)
 8003022:	f7fd fc67 	bl	80008f4 <HAL_DMA_IRQHandler>
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20013344 	.word	0x20013344

08003030 <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream7 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003034:	4802      	ldr	r0, [pc, #8]	; (8003040 <DMA2_Stream6_IRQHandler+0x10>)
 8003036:	f7fd fc5d 	bl	80008f4 <HAL_DMA_IRQHandler>
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	200133a4 	.word	0x200133a4

08003044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003048:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <SystemInit+0x60>)
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <SystemInit+0x60>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003058:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <SystemInit+0x64>)
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <SystemInit+0x64>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <SystemInit+0x64>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800306a:	4a0f      	ldr	r2, [pc, #60]	; (80030a8 <SystemInit+0x64>)
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <SystemInit+0x64>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <SystemInit+0x64>)
 800307c:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <SystemInit+0x68>)
 800307e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003080:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <SystemInit+0x64>)
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <SystemInit+0x64>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <SystemInit+0x64>)
 800308e:	2200      	movs	r2, #0
 8003090:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003092:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <SystemInit+0x60>)
 8003094:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003098:	609a      	str	r2, [r3, #8]
#endif
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000ed00 	.word	0xe000ed00
 80030a8:	40023800 	.word	0x40023800
 80030ac:	24003010 	.word	0x24003010

080030b0 <__libc_init_array>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	4e0d      	ldr	r6, [pc, #52]	; (80030e8 <__libc_init_array+0x38>)
 80030b4:	4c0d      	ldr	r4, [pc, #52]	; (80030ec <__libc_init_array+0x3c>)
 80030b6:	1ba4      	subs	r4, r4, r6
 80030b8:	10a4      	asrs	r4, r4, #2
 80030ba:	2500      	movs	r5, #0
 80030bc:	42a5      	cmp	r5, r4
 80030be:	d109      	bne.n	80030d4 <__libc_init_array+0x24>
 80030c0:	4e0b      	ldr	r6, [pc, #44]	; (80030f0 <__libc_init_array+0x40>)
 80030c2:	4c0c      	ldr	r4, [pc, #48]	; (80030f4 <__libc_init_array+0x44>)
 80030c4:	f000 f820 	bl	8003108 <_init>
 80030c8:	1ba4      	subs	r4, r4, r6
 80030ca:	10a4      	asrs	r4, r4, #2
 80030cc:	2500      	movs	r5, #0
 80030ce:	42a5      	cmp	r5, r4
 80030d0:	d105      	bne.n	80030de <__libc_init_array+0x2e>
 80030d2:	bd70      	pop	{r4, r5, r6, pc}
 80030d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030d8:	4798      	blx	r3
 80030da:	3501      	adds	r5, #1
 80030dc:	e7ee      	b.n	80030bc <__libc_init_array+0xc>
 80030de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030e2:	4798      	blx	r3
 80030e4:	3501      	adds	r5, #1
 80030e6:	e7f2      	b.n	80030ce <__libc_init_array+0x1e>
 80030e8:	08003154 	.word	0x08003154
 80030ec:	08003154 	.word	0x08003154
 80030f0:	08003154 	.word	0x08003154
 80030f4:	08003158 	.word	0x08003158

080030f8 <strcpy>:
 80030f8:	4603      	mov	r3, r0
 80030fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030fe:	f803 2b01 	strb.w	r2, [r3], #1
 8003102:	2a00      	cmp	r2, #0
 8003104:	d1f9      	bne.n	80030fa <strcpy+0x2>
 8003106:	4770      	bx	lr

08003108 <_init>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr

08003114 <_fini>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr
